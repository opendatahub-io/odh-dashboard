openapi: 3.0.3
info:
  title: Llama Stack Modular UI REST API
  version: 1.0.0
  description: REST API for Llama Stack Modular UI Backend for Frontend (BFF) using OpenAI SDK v2.1.0
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "http://localhost:8080"

# Global security requirement - all endpoints require Bearer token by default
security:
  - Bearer: []

paths:
  /healthcheck:
    summary: BFF service health check
    description: >-
      Health check endpoint to verify BFF service availability. This is a local service check
      and does not validate external Llama Stack connectivity.
    get:
      tags:
        - HealthCheck
      responses:
        "200":
          $ref: "#/components/responses/HealthCheckResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: healthcheck
      summary: BFF Health Check
      description: Returns BFF service status and version information.
      security: []

  /genai/v1/models:
    summary: List available AI models
    description: >-
      Lists all available AI models from Llama Stack using OpenAI SDK.
      Returns models with their identifiers, creation timestamps, and ownership information.
    get:
      tags:
        - Models
      security:
        - Bearer: []
      responses:
        "200":
          $ref: "#/components/responses/ModelsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: listModels
      summary: List All Models
      description: Gets a list of all available AI models from Llama Stack.

  /genai/v1/vectorstores:
    summary: Manage vector stores for RAG
    description: >-
      Vector stores are used for Retrieval-Augmented Generation (RAG).
      They store document embeddings that can be searched during AI response generation.
    get:
      tags:
        - VectorStores
      security:
        - Bearer: []
      parameters:
        - name: limit
          in: query
          description: Number of vector stores to return (1-100, default 20)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 10
        - name: order
          in: query
          description: Sort order by creation timestamp
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: desc

      responses:
        "200":
          $ref: "#/components/responses/VectorStoresResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: listVectorStores
      summary: List Vector Stores
      description: Gets a list of vector stores with optional pagination and sorting.
    post:
      tags:
        - VectorStores
      security:
        - Bearer: []
      requestBody:
        description: Vector store creation request (only name is required, all other parameters are optional)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVectorStoreRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/VectorStoreResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: createVectorStore
      summary: Create Vector Store
      description: Creates a new vector store for document storage and RAG. Only the name field is required.

  /genai/v1/files/upload:
    summary: Upload files to vector stores with chunking control
    description: >-
      Uploads a file and automatically adds it to the specified vector store.
      This is a combined operation that handles both file upload and vector store integration.
      Supports custom chunking strategies for optimal document processing and RAG performance.
    post:
      tags:
        - Files
      security:
        - Bearer: []
      requestBody:
        description: Multipart form with file and vector store information
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/FileUploadResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: uploadFile
      summary: Upload File to Vector Store
      description: Uploads a file and adds it to the specified vector store for RAG functionality. Supports custom chunking strategies for optimal document processing.

  /genai/v1/responses:
    summary: Create AI responses with comprehensive parameters
    description: >-
      Creates AI responses using the OpenAI Responses API with full parameter support.
      Supports RAG via vector stores, conversation context, and advanced generation parameters.
    post:
      tags:
        - Responses
      security:
        - Bearer: []
      requestBody:
        description: Response creation request with comprehensive parameter support
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResponseRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateResponseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: createResponse
      summary: Create AI Response
      description: Creates an AI response with full parameter control including RAG and conversation context. Returns a simplified response with only essential fields (id, model, status, created_at, content, usage).

  /genai/v1/code-exporter:
    summary: Generate Python code for Llama Stack integration
    description: >-
      Generates Python code templates for integrating with Llama Stack services.
      Supports custom configuration including model selection, instructions, streaming, and tool configurations.
      Returns executable Python code wrapped in a JSON envelope structure.
    post:
      tags:
        - CodeExporter
      security:
        - Bearer: []
      requestBody:
        description: Code generation request with configuration parameters
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeExportRequest"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/CodeExportResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: exportCode
      summary: Export Python Code
      description: Generates Python code based on provided configuration parameters.

  /genai/v1/namespaces:
    summary: List Kubernetes cluster namespaces
    description: >-
      Lists all namespaces in the Kubernetes cluster.
      Returns namespace information including name and display name.
      Requires valid Kubernetes authentication token.
    get:
      tags:
        - Kubernetes
      security:
        - Bearer: []
      responses:
        "200":
          $ref: "#/components/responses/NamespacesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: listNamespaces
      summary: List All Namespaces
      description: Gets a list of all namespaces in the Kubernetes cluster.

  /genai/v1/llamastack-distribution/status:
    summary: Get LlamaStack Distribution status
    description: >-
      Retrieves the status of LlamaStack Distribution (LSD) in the specified namespace.
      Returns LSD information including name, phase, version, and distribution configuration.
      Requires valid Kubernetes authentication token and namespace parameter.
      Returns 400 for missing parameters or other validation errors.
      Returns 401 for missing or invalid authentication tokens.
      Returns 404 if the LSD CRD is not installed, the namespace doesn't exist, or no LSD resources are found.
    get:
      tags:
        - Kubernetes
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace to query for LSD resources
          required: true
          schema:
            type: string
            example: "default"
      responses:
        "200":
          $ref: "#/components/responses/LlamaStackDistributionStatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getLlamaStackDistributionStatus
      summary: Get LSD Status
      description: Gets the status of LlamaStack Distribution in the specified namespace.

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication using OAuth2 JWT tokens
  schemas:
    HealthCheckModel:
      type: object
      required:
        - status
        - system_info
      properties:
        status:
          type: string
          example: "available"
          description: BFF service availability status
        system_info:
          $ref: "#/components/schemas/SystemInfo"
        userId:
          type: string
          example: "user@example.com"
          description: User identifier (optional)

    SystemInfo:
      type: object
      required:
        - version
      properties:
        version:
          type: string
          example: "1.0.0"
          description: BFF service version

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "400"
          description: HTTP status code
        message:
          type: string
          example: "Bad request"
          description: Human-readable error message

    ErrorEnvelope:
      type: object
      required:
        - error
      properties:
        error:
          $ref: "#/components/schemas/Error"

    # Models Schema
    Model:
      type: object
      required:
        - id
        - object
        - created
        - owned_by
      properties:
        id:
          type: string
          example: "ollama/llama3.2:3b"
          description: Unique model identifier
        object:
          type: string
          example: "model"
          description: Object type (always "model")
        created:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when model was created
        owned_by:
          type: string
          example: "llama_stack"
          description: Model owner/provider

    ModelsData:
      type: array
      items:
        $ref: "#/components/schemas/Model"
      description: Array of available models

    # Vector Stores Schema
    VectorStore:
      type: object
      required:
        - id
        - object
        - created_at
        - name
        - usage_bytes
        - file_counts
        - status
        - last_active_at
        - metadata
      properties:
        id:
          type: string
          example: "vs_abc123-def456"
          description: Unique vector store identifier
        object:
          type: string
          example: "vector_store"
          description: Object type (always "vector_store")
        created_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when vector store was created
        name:
          type: string
          example: "Support Documents"
          description: Human-readable name (max 256 characters)
        usage_bytes:
          type: integer
          format: int64
          example: 1024
          description: Storage usage in bytes
        file_counts:
          $ref: "#/components/schemas/FileCounts"
        status:
          type: string
          enum: [pending, completed, failed]
          example: "completed"
          description: Vector store processing status
        last_active_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp of last activity
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            provider_id: "milvus"
            provider_vector_db_id: "vs_abc123-def456"
            description: "Customer support documents"
          description: Key-value metadata (max 16 pairs, keys ≤64 chars, values ≤512 chars)

    FileCounts:
      type: object
      required:
        - in_progress
        - completed
        - failed
        - cancelled
        - total
      properties:
        in_progress:
          type: integer
          example: 0
          description: Number of files currently being processed
        completed:
          type: integer
          example: 3
          description: Number of successfully processed files
        failed:
          type: integer
          example: 0
          description: Number of files that failed processing
        cancelled:
          type: integer
          example: 0
          description: Number of cancelled file operations
        total:
          type: integer
          example: 3
          description: Total number of files in vector store

    VectorStoresData:
      type: array
      items:
        $ref: "#/components/schemas/VectorStore"
      description: Array of vector stores

    CreateVectorStoreRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          example: "Customer Support FAQ"
          description: Required name for the vector store (1-256 characters)
        metadata:
          type: object
          additionalProperties:
            type: string
          maxProperties: 16
          example:
            department: "support"
            category: "faq"
            provider_id: "milvus"
          description: Optional key-value metadata (max 16 pairs, keys ≤64 chars, values ≤512 chars)


    # File Upload Schema
    FileUploadRequest:
      type: object
      required:
        - file
        - vector_store_id
      properties:
        file:
          type: string
          format: binary
          description: File to upload (max 512MB, supports PDF, TXT, DOC, etc.)
        vector_store_id:
          type: string
          example: "vs_abc123-def456"
          description: Vector store ID to add the file to (required)
        purpose:
          type: string
          enum: [assistants, batch, fine-tune, vision, user_data, evals]
          default: "assistants"
          example: "assistants"
          description: Intended file purpose (defaults to "assistants" for RAG)
        chunking_type:
          type: string
          enum: [auto, static]
          example: "static"
          description: Optional chunking strategy ("auto" uses defaults, "static" allows custom configuration)
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          default: 800
          example: 600
          description: Maximum tokens per chunk (only for static chunking, range 100-4096)
        chunk_overlap_tokens:
          type: integer
          minimum: 0
          example: 200
          description: Token overlap between chunks (only for static chunking, must be < half of max_chunk_size_tokens)

    ChunkingStrategyResult:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [auto, static]
          example: "static"
          description: Type of chunking strategy applied
        static:
          type: object
          properties:
            max_chunk_size_tokens:
              type: integer
              example: 600
              description: Maximum tokens per chunk (actual applied value)
            chunk_overlap_tokens:
              type: integer
              example: 200
              description: Token overlap between chunks (actual applied value)
          description: Static chunking configuration (present for both auto and static types)

    FileError:
      type: object
      properties:
        code:
          type: string
          example: "server_error"
          description: Error code if file processing failed
        message:
          type: string
          example: "File processing failed"
          description: Error message if file processing failed

    FileUploadResult:
      type: object
      required:
        - file_id
      properties:
        file_id:
          type: string
          example: "file-abc123def456"
          description: Unique identifier of uploaded file
        vector_store_file:
          $ref: "#/components/schemas/VectorStoreFile"
          description: Details about the file added to the vector store (only present if vector_store_id was provided)

    VectorStoreFile:
      type: object
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - chunking_strategy
      properties:
        id:
          type: string
          example: "vsf-abc123"
          description: Unique vector store file identifier
        object:
          type: string
          example: "vector_store.file"
          description: Object type
        usage_bytes:
          type: integer
          format: int64
          example: 1024
          description: File size in bytes
        created_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when file was added
        vector_store_id:
          type: string
          example: "vs_abc123"
          description: Parent vector store ID
        status:
          type: string
          enum: [pending, completed, failed]
          example: "completed"
          description: File processing status
        chunking_strategy:
          $ref: "#/components/schemas/ChunkingStrategyResult"
        attributes:
          type: object
          description: File attributes and metadata
        last_error:
          $ref: "#/components/schemas/FileError"

    # Chat Context Schema
    ChatContextMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          example: "user"
          description: Message role in conversation
        content:
          type: string
          example: "Hello, how are you?"
          description: Message content
      example:
        role: "assistant"
        content: "Hello! I'm doing well, thank you for asking. How can I help you today?"

    # Response Creation Schema
    CreateResponseRequest:
      type: object
      required:
        - input
        - model
      properties:
        # === REQUIRED PARAMETERS ===
        input:
          type: string
          minLength: 1
          example: "Tell me about artificial intelligence"
          description: Text input for AI response generation (required)
        model:
          type: string
          example: "ollama/llama3.2:3b"
          description: Model ID to use for generation (required, see /genai/v1/models)

        # === OPTIONAL PARAMETERS (TESTED & WORKING) ===
        vector_store_ids:
          type: array
          items:
            type: string
          example: ["vs_abc123", "vs_def456"]
          description: Vector store IDs for file search (RAG functionality)
        chat_context:
          type: array
          items:
            $ref: "#/components/schemas/ChatContextMessage"
          example:
            - role: "user"
              content: "What is artificial intelligence?"
            - role: "assistant" 
              content: "Artificial intelligence (AI) is a branch of computer science that aims to create machines capable of intelligent behavior, learning, and decision-making."
            - role: "user"
              content: "Can you give me some examples?"
          description: Full conversation history for multi-turn conversations

        # === GENERATION PARAMETERS ===
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          example: 0.7
          description: Controls randomness (0.0=deterministic, 2.0=very random)
        top_p:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          example: 0.9
          description: Nucleus sampling parameter (alternative to temperature)
        instructions:
          type: string
          example: "You are a helpful AI assistant that provides detailed explanations."
          description: System instructions for response generation

    # Simplified Response Schema - Only Essential Fields
    SimplifiedResponse:
      type: object
      required:
        - id
        - model
        - status
        - created_at
        - content
      properties:
        id:
          type: string
          example: "resp-abc123-def456"
          description: Unique response identifier
        model:
          type: string
          example: "ollama/llama3.2:3b"
          description: AI model used for generation
        status:
          type: string
          example: "completed"
          description: Response completion status
        created_at:
          type: number
          format: float
          example: 1755695135.0
          description: Response creation timestamp
        content:
          type: string
          example: "Hello! How can I help you today?"
          description: The actual AI response text content
        usage:
          $ref: "#/components/schemas/SimplifiedUsage"
          description: Token usage information (only if populated)

    # Simplified Usage Schema - Only Populated Fields
    SimplifiedUsage:
      type: object
      properties:
        input_tokens:
          type: integer
          format: int64
          example: 150
          description: Number of input tokens processed (omitted if 0)
        output_tokens:
          type: integer
          format: int64
          example: 75
          description: Number of output tokens generated (omitted if 0)
        total_tokens:
          type: integer
          format: int64
          example: 225
          description: Total tokens consumed (omitted if 0)

    ResponseOutput:
      type: object
      required:
        - id
        - type
        - status
      properties:
        id:
          type: string
          example: "msg_abc123"
          description: Output item identifier
        type:
          type: string
          enum: [message, file_search_call, code_interpreter_call]
          example: "message"
          description: Type of output item
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
          example: "completed"
          description: Output item status
        content:
          type: array
          items:
            $ref: "#/components/schemas/ResponseContent"
          description: Content array for message outputs
        role:
          type: string
          enum: [assistant]
          example: "assistant"
          description: Role for message outputs
        queries:
          type: array
          items:
            type: string
          example: ["search query"]
          description: Search queries for file_search_call outputs
        results:
          type: array
          items:
            $ref: "#/components/schemas/SearchResult"
          description: Search results for file_search_call outputs

    ResponseContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum: [output_text, refusal]
          example: "output_text"
          description: Content type
        text:
          type: string
          example: "AI response text content"
          description: Generated text content
        annotations:
          type: array
          items:
            type: object
          description: Content annotations
        logprobs:
          type: object
          nullable: true
          description: Log probabilities (if requested)
        refusal:
          type: string
          example: ""
          description: Refusal message (if content was refused)

    SearchResult:
      type: object
      properties:
        filename:
          type: string
          example: "document.pdf"
          description: Source filename
        score:
          type: number
          format: float
          example: 0.95
          description: Relevance score (0.0-1.0)
        text:
          type: string
          example: "Relevant document content"
          description: Retrieved text content
        attributes:
          type: object
          description: File attributes and metadata

    # Code Exporter Schema
    Tool:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [file_search]
          example: "file_search"
          description: Type of tool to include in the generated code
        vector_store_ids:
          type: array
          items:
            type: string
          example: ["vs_abc123", "vs_def456"]
          description: Vector store IDs to use with the tool

    CodeExportRequest:
      type: object
      required:
        - input
        - model
      properties:
        input:
          type: string
          minLength: 1
          example: "What is the capital of Ireland?"
          description: User prompt
        model:
          type: string
          example: "ollama/llama3.2:3b"
          description: Model ID to use in the generated code
        instructions:
          type: string
          example: "You are a helpful assistant. Use the RAG tool to answer questions as needed."
          description: System instructions for code generation
        stream:
          type: boolean
          default: false
          example: false
          description: Whether to enable streaming in the generated code
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          default: 0.7
          example: 0.5
          description: Controls randomness in code generation (0.0=deterministic, 2.0=very random)
        tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"
          example:
            - type: "file_search"
              vector_store_ids: ["vs_abc123"]
          description: Tools to include in the generated code

    CodeExportData:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Generated Python code
          example: |
            # Llama Stack Quickstart Script
            #
            # README:
            # This example shows how to configure a assistant using the Llama Stack client.
            # Before using this code, make sure of the following:
            #
            # 1. Llama Stack Server:
            #    - Your Llama Stack instance must be running and accessible
            #    - Set the LLAMA_STACK_URL variable to the base URL of your Llama Stack server
            #
            # 2. Model Configuration:
            #    - The selected model (e.g., "llama3.2:3b") must be available in your Llama Stack deployment.
            #
            # 3. Tools (MCP Integration):
            #    - Any tools used must be properly pre-configured in your Llama Stack setup.
                    
            # Configuration adjust as needed:
            LLAMA_STACK_URL = ""
            input_text = "What is the capital of Ireland?"
            model_name = "ollama/llama3.2:3b"
            temperature = 0.7
            stream_enabled = False
            system_instructions = "You are a helpful assistant. Use the RAG tool to answer questions as needed."
                    
            # Tool configuration
            tools = [
                {
                    "type": "file_search",
                    "vector_store_ids": ["vs_abc123", "vs_def456"]
                }
            ]
                    
            from llama_stack_client import LlamaStackClient
                    
            client = LlamaStackClient(base_url=LLAMA_STACK_URL)
                    
            config = {
                "input": input_text,
                "model": model_name,
                "temperature": temperature,
                "stream": stream_enabled,
                "instructions": system_instructions,
                "tools": tools
            }
                    
            response = client.responses.create(**config)
                    
            print("agent>", response.output_text)

    # Kubernetes Namespace Schema
    NamespaceModel:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "default"
          description: Kubernetes namespace name
        displayName:
          type: string
          nullable: true
          example: "default"
          description: Human-readable display name for the namespace (optional, defaults to name)

    NamespacesData:
      type: array
      items:
        $ref: "#/components/schemas/NamespaceModel"
      description: Array of Kubernetes namespaces

    # LlamaStack Distribution Schema
    LlamaStackDistributionModel:
      type: object
      required:
        - name
        - phase
        - version
        - distributionConfig
      properties:
        name:
          type: string
          example: "test-lsd"
          description: Name of the LlamaStack Distribution resource
        phase:
          type: string
          example: "Ready"
          description: Current phase of the LSD (e.g., Pending, Initializing, Ready, Failed, Terminating)
        version:
          type: string
          example: "v0.2.0"
          description: Version of the LlamaStack server
        distributionConfig:
          $ref: "#/components/schemas/DistributionConfig"

    DistributionConfig:
      type: object
      required:
        - activeDistribution
        - availableDistributions
        - providers
      properties:
        activeDistribution:
          type: string
          example: "ollama"
          description: Currently active distribution type
        availableDistributions:
          type: object
          additionalProperties:
            type: string
          example:
            ollama: "docker.io/llamastack/distribution-ollama:latest"
            bedrock: "docker.io/llamastack/distribution-bedrock:latest"
          description: Map of available distribution types to their image references
        providers:
          type: array
          items:
            $ref: "#/components/schemas/ProviderInfo"
          description: List of provider information

    ProviderInfo:
      type: object
      required:
        - api
        - provider_id
        - provider_type
      properties:
        api:
          type: string
          example: "mock-api"
          description: API endpoint for the provider
        provider_id:
          type: string
          example: "mock-provider"
          description: Unique identifier for the provider
        provider_type:
          type: string
          example: "mock-type"
          description: Type of the provider
        config:
          type: object
          nullable: true
          description: Provider-specific configuration
        health:
          $ref: "#/components/schemas/ProviderHealth"

    ProviderHealth:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          example: "healthy"
          description: Health status of the provider
        message:
          type: string
          example: "Provider is responding normally"
          description: Additional health information

  responses:
    HealthCheckResponse:
      description: BFF service health status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthCheckModel"

    ModelsResponse:
      description: List of available AI models
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/ModelsData"

    VectorStoresResponse:
      description: List of vector stores with pagination support
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/VectorStoresData"

    VectorStoreResponse:
      description: Created vector store
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/VectorStore"

    FileUploadResponse:
      description: File upload and vector store addition result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/FileUploadResult"
            example:
              data:
                file_id: "file-abc123def456"
                vector_store_file:
                  id: "vsf-def789ghi012"
                  vector_store_id: "vs_abc123"
                  status: "completed"

    CodeExportResponse:
      description: Generated Python code for Llama Stack integration
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/CodeExportData"
            example:
              data:
                code: |
                  # Llama Stack Quickstart Script
                  # Generated Python code for Llama Stack integration
                  # ... rest of the Python code

    NamespacesResponse:
      description: List of Kubernetes namespaces
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/NamespacesData"
            example:
              data:
                - name: "default"
                  displayName: "default"
                - name: "kube-system"
                  displayName: "kube-system"
                - name: "llama-stack"
                  displayName: "llama-stack"
                - name: "test-namespace"
                  displayName: null

    LlamaStackDistributionStatusResponse:
      description: LlamaStack Distribution status information
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/LlamaStackDistributionModel"
                nullable: true
            example:
              data:
                name: "test-lsd"
                phase: "Ready"
                version: "v0.2.0"
                distributionConfig:
                  activeDistribution: "ollama"
                  availableDistributions:
                    ollama: "docker.io/llamastack/distribution-ollama:latest"
                    bedrock: "docker.io/llamastack/distribution-bedrock:latest"
                  providers:
                    - api: "mock-api"
                      provider_id: "mock-provider"
                      provider_type: "mock-type"
                      config: null
                      health:
                        status: "healthy"
                        message: "Provider is responding normally"
            examples:
              lsd_found:
                summary: LSD found
                value:
                  data:
                    name: "test-lsd"
                    phase: "Ready"
                    version: "v0.2.0"
                    distributionConfig:
                      activeDistribution: "ollama"
                      availableDistributions:
                        ollama: "docker.io/llamastack/distribution-ollama:latest"
                      providers: []
              lsd_not_found:
                summary: No LSD found
                value:
                  data: null

    CreateResponseResponse:
      description: Created AI response with essential information only
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/SimplifiedResponse"
            example:
              data:
                id: "resp-78d9c676-d1b0-4fed-b89a-9fd81a9d990c"
                model: "ollama/llama3.2:3b"
                status: "completed"
                created_at: 1755721435.0
                content: "This is a sample AI response. The content would contain the actual generated text from the AI model based on the input prompt and any retrieved context from vector stores."
                usage:
                  input_tokens: 15
                  output_tokens: 45
                  total_tokens: 60

    BadRequest:
      description: Bad Request - Invalid parameters or missing required fields
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"

    NotFound:
      description: Not Found - Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"

    InternalServerError:
      description: Internal Server Error - Server encountered an unexpected condition
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"

tags:
  - name: HealthCheck
    description: BFF service health check operations
  - name: Models
    description: AI model discovery and management
  - name: VectorStores
    description: Vector store management for RAG functionality
  - name: Files
    description: File upload and vector store integration
  - name: Responses
    description: AI response generation with comprehensive parameter support
  - name: CodeExporter
    description: Code generation for Llama Stack integration
  - name: Kubernetes
    description: Kubernetes cluster operations and namespace management