openapi: 3.0.3
info:
  title: Llama Stack Modular UI REST API
  version: 1.0.0
  description: REST API for Llama Stack Modular UI Backend for Frontend (BFF)
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "http://localhost:8080"
paths:
  /healthcheck:
    summary: Path targeted for healthcheck purposes.
    description: >-
      The REST endpoint/path used to check the health status of the service.
    get:
    
      tags:
        - HealthCheck
      responses:
        "200":
          $ref: "#/components/responses/HealthCheckResponse"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: healthcheck
      summary: HealthCheck
      description: HealthCheck endpoint to verify service availability.
      security: []

  /api/v1/config:
    summary: Path used to get application configuration.
    description: >-
      The REST endpoint/path used to retrieve configuration information for the frontend.
    get:
      tags:
        - Configuration
      responses:
        "200":
          $ref: "#/components/responses/ConfigResponse"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: getConfig
      summary: Get Configuration
      description: Returns configuration information needed for the frontend application.
      security: []


  /api/v1/models:
    summary: Path used to manage models.
    description: >-
      The REST endpoint/path used to list available models from Llama Stack.
    get:
      tags:
        - Models
      parameters:
        - name: model_type
          description: Filter models by type (llm or embedding)
          schema:
            type: string
            enum: [llm, embedding]
          in: query
          required: false
      responses:
        "200":
          $ref: "#/components/responses/ModelListResponse"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: getModels
      summary: List All Models
      description: Gets a list of all available models, optionally filtered by model type.

  /api/v1/vector-dbs:
    summary: Path used to manage vector databases.
    description: >-
      The REST endpoint/path used to list and register vector databases.
    get:
      tags:
        - VectorDB
      responses:
        "200":
          $ref: "#/components/responses/VectorDBListResponse"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: getVectorDBs
      summary: List All Vector Databases
      description: Gets a list of all registered vector databases.
    post:
      requestBody:
        description: Vector database registration request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorDBRegistrationRequest"
        required: true
      tags:
        - VectorDB
      responses:
        "201":
          $ref: "#/components/responses/VectorDBRegistrationResponse"
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: registerVectorDB
      summary: Register Vector Database
      description: Registers a new vector database with the specified embedding model.

  /api/v1/upload:
    summary: Path used to upload documents.
    description: >-
      The REST endpoint/path used to upload documents for processing and indexing into vector databases.
    post:
      requestBody:
        description: Document upload request containing documents and vector database information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadRequest"
        required: true
      tags:
        - Upload
      responses:
        "200":
          $ref: "#/components/responses/UploadResponse"
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: uploadDocuments
      summary: Upload Documents
      description: Uploads documents for processing and indexing into the specified vector database.

  /api/v1/query:
    summary: Path used to query documents with RAG and chat completion.
    description: >-
      The REST endpoint/path used to query documents using retrieval-augmented generation (RAG) 
      and generate responses using LLM chat completion.
    post:
      requestBody:
        description: Query request containing the question, optional vector database IDs, and LLM configuration.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
        required: true
      tags:
        - Query
      responses:
        "200":
          $ref: "#/components/responses/QueryResponse"
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: queryDocuments
      summary: Query Documents with RAG
      description: Queries documents using RAG if vector databases are provided, then generates a response using chat completion.

  /llama-stack/{proxy+}:
    summary: Path used to proxy requests to Llama Stack.
    description: >-
      The REST endpoint/path used to proxy all requests to the underlying Llama Stack API.
    get:
      tags:
        - Proxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
          description: The path to proxy to Llama Stack
      responses:
        "200":
          description: Successful proxy response
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "502":
          description: Bad Gateway - Proxy error
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: proxyToLlamaStackGet
      summary: Proxy GET to Llama Stack
      description: Proxies GET requests directly to the Llama Stack API.
    post:
      tags:
        - Proxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
          description: The path to proxy to Llama Stack
      requestBody:
        description: Request body to proxy to Llama Stack
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: Successful proxy response
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "502":
          description: Bad Gateway - Proxy error
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: proxyToLlamaStackPost
      summary: Proxy POST to Llama Stack
      description: Proxies POST requests directly to the Llama Stack API.
    put:
      tags:
        - Proxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
          description: The path to proxy to Llama Stack
      requestBody:
        description: Request body to proxy to Llama Stack
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: Successful proxy response
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "502":
          description: Bad Gateway - Proxy error
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: proxyToLlamaStackPut
      summary: Proxy PUT to Llama Stack
      description: Proxies PUT requests directly to the Llama Stack API.
    patch:
      tags:
        - Proxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
          description: The path to proxy to Llama Stack
      requestBody:
        description: Request body to proxy to Llama Stack
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: Successful proxy response
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "502":
          description: Bad Gateway - Proxy error
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: proxyToLlamaStackPatch
      summary: Proxy PATCH to Llama Stack
      description: Proxies PATCH requests directly to the Llama Stack API.
    delete:
      tags:
        - Proxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
          description: The path to proxy to Llama Stack
      responses:
        "200":
          description: Successful proxy response
        "400":
          $ref: "lib/common.yaml#/components/responses/BadRequest"
        "502":
          description: Bad Gateway - Proxy error
        "500":
          $ref: "lib/common.yaml#/components/responses/InternalServerError"
      operationId: proxyToLlamaStackDelete
      summary: Proxy DELETE to Llama Stack
      description: Proxies DELETE requests directly to the Llama Stack API.

components:
  schemas:
    HealthCheckModel:
      type: object
      required:
        - status
        - system_info
      properties:
        status:
          type: string
          example: "available"
        system_info:
          $ref: "#/components/schemas/SystemInfo"
        userId:
          type: string
          example: "user@example.com"

    SystemInfo:
      type: object
      required:
        - version
      properties:
        version:
          type: string
          example: "1.0.0"

    Config:
      type: object
      required:
        - oauthEnabled
      properties:
        oauthEnabled:
          type: boolean
          example: true
        oauthClientId:
          type: string
          example: "llama-stack-ui"
        oauthRedirectUri:
          type: string
          example: "http://localhost:3000/auth/callback"
        oauthServerUrl:
          type: string
          example: "https://oauth.example.com"



    Model:
      type: object
      required:
        - identifier
        - provider_id
        - model_type
        - provider_resource_id
      properties:
        identifier:
          type: string
          example: "llama3.2:3b"
        provider_id:
          type: string
          example: "ollama"
        model_type:
          type: string
          enum: [llm, embedding]
          example: "llm"
        provider_resource_id:
          type: string
          example: "llama3.2:3b"

    ModelList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Model"

    VectorDB:
      type: object
      required:
        - identifier
        - provider_id
        - provider_resource_id
      properties:
        identifier:
          type: string
          example: "my-vector-db"
        provider_id:
          type: string
          example: "chroma"
        provider_resource_id:
          type: string
          example: "my-vector-db"
        embedding_dimension:
          type: integer
          format: int64
          example: 1536
        embedding_model:
          type: string
          example: "sentence-transformers/all-MiniLM-L6-v2"

    VectorDBList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/VectorDB"

    VectorDBRegistrationRequest:
      type: object
      required:
        - vector_db_id
        - embedding_model
      properties:
        vector_db_id:
          type: string
          example: "my-new-vector-db"
        embedding_model:
          type: string
          example: "sentence-transformers/all-MiniLM-L6-v2"

    Document:
      type: object
      required:
        - document_id
        - content
      properties:
        document_id:
          type: string
          example: "doc-123"
        content:
          type: string
          example: "This is the document content to be indexed."
        metadata:
          type: object
          additionalProperties: true
          example:
            title: "Sample Document"
            author: "John Doe"

    UploadRequest:
      type: object
      required:
        - documents
        - vector_db_id
        - embedding_model
      properties:
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        vector_db_id:
          type: string
          example: "my-vector-db"
        embedding_model:
          type: string
          example: "sentence-transformers/all-MiniLM-L6-v2"
        chunk_size_in_tokens:
          type: integer
          example: 500
          description: Optional chunk size for document processing

    QueryRequest:
      type: object
      required:
        - content
        - llm_model_id
      properties:
        content:
          type: string
          example: "What is machine learning?"
          description: The question or query content
        vector_db_ids:
          type: array
          items:
            type: string
          example: ["my-vector-db"]
          description: Optional list of vector database IDs to query for RAG
        query_config:
          $ref: "#/components/schemas/QueryConfigParam"
        llm_model_id:
          type: string
          example: "llama3.2:3b"
          description: The LLM model ID to use for chat completion
        sampling_params:
          $ref: "#/components/schemas/SamplingParams"

    QueryConfigParam:
      type: object
      properties:
        chunk_template:
          type: string
          example: "Result {index}\nContent: {chunk.content}\nMetadata: {metadata}\n"
          description: Template for formatting each retrieved chunk in the context
        max_chunks:
          type: integer
          format: int64
          example: 5
          description: Maximum number of chunks to retrieve
        max_tokens_in_context:
          type: integer
          format: int64
          example: 1000
          description: Maximum number of tokens in the context

    SamplingParams:
      type: object
      required:
        - strategy
        - max_tokens
      properties:
        strategy:
          $ref: "#/components/schemas/SamplingStrategy"
        max_tokens:
          type: integer
          format: int64
          example: 500
          description: Maximum number of tokens to generate

    SamplingStrategy:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          example: "greedy"
          description: The sampling strategy type

    QueryEmbeddingModelResponse:
      type: object
      required:
        - content
        - metadata
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ContentItem"
        metadata:
          $ref: "#/components/schemas/Metadata"

    ContentItem:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          example: "text"
          description: The type of content
        text:
          type: string
          example: "Machine learning is a subset of artificial intelligence..."
          description: The text content

    Metadata:
      type: object
      properties:
        document_ids:
          type: array
          items:
            type: string
          example: ["doc-123", "doc-456"]
          description: List of document IDs
        chunks:
          type: array
          items:
            type: string
          example: ["chunk1", "chunk2"]
          description: List of chunk identifiers
        scores:
          type: array
          items:
            type: number
            format: double
          example: [0.95, 0.87]
          description: Relevance scores for the chunks

    ChatCompletionResponse:
      type: object
      required:
        - completion_message
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"
        completion_message:
          $ref: "#/components/schemas/CompletionMessage"
        logprobs:
          type: object
          nullable: true
          description: Log probabilities information

    CompletionMessage:
      type: object
      required:
        - role
        - content
        - stop_reason
      properties:
        role:
          type: string
          example: "assistant"
          description: Role of the completion message
        content:
          type: string
          example: "Machine learning is a method of data analysis..."
          description: The generated response content
        stop_reason:
          type: string
          example: "end_of_turn"
          description: Reason why generation stopped
        tool_calls:
          type: array
          items:
            type: object
          description: Tool calls made during generation

    Metric:
      type: object
      required:
        - metric
        - value
      properties:
        metric:
          type: string
          example: "completion_tokens"
          description: Name of the metric
        value:
          type: object
          description: Value of the metric
        unit:
          type: object
          nullable: true
          description: Unit of the metric

    QueryResponse:
      type: object
      required:
        - rag_response
        - chat_completion
        - has_rag_content
        - used_vector_dbs
        - assistant_message
      properties:
        rag_response:
          $ref: "#/components/schemas/QueryEmbeddingModelResponse"
        chat_completion:
          $ref: "#/components/schemas/ChatCompletionResponse"
        has_rag_content:
          type: boolean
          example: true
          description: Whether RAG content was found and used
        used_vector_dbs:
          type: boolean
          example: true
          description: Whether vector databases were queried
        assistant_message:
          type: string
          example: "Machine learning is a method of data analysis that automates analytical model building..."
          description: The final assistant response message

  responses:
    HealthCheckResponse:
      description: Health check status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthCheckModel"

    ConfigResponse:
      description: Application configuration
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Config"



    ModelListResponse:
      description: List of models
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/ModelList"

    VectorDBListResponse:
      description: List of vector databases
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/VectorDBList"

    VectorDBRegistrationResponse:
      description: Vector database registration success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Vector database registered successfully"
              vector_db_id:
                type: string
                example: "my-new-vector-db"

    UploadResponse:
      description: Document upload success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Documents uploaded successfully"
              vector_db_id:
                type: string
                example: "my-vector-db"

    QueryResponse:
      description: Query response with RAG results and chat completion
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueryResponse"

tags:
  - name: HealthCheck
    description: Health check operations
  - name: Configuration
    description: Application configuration operations
  - name: Models
    description: Model management operations
  - name: VectorDB
    description: Vector database operations
  - name: Upload
    description: Document upload operations
  - name: Query
    description: Document query and RAG operations
  - name: Proxy
    description: Llama Stack proxy operations
