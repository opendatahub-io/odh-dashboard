import { K8sResourceCommon } from 'mod-arch-shared';
import { K8sCondition, K8sDSGResource } from '~/app/shared/components/types';
export declare const PreInstalledName = "Pre-installed";
export declare const isOOTB: (resource: K8sResourceCommon) => boolean;
export declare const isK8sDSGResource: (x?: K8sResourceCommon) => x is K8sDSGResource;
export declare const getDisplayNameFromK8sResource: (resource: K8sDSGResource) => string;
export declare const getResourceNameFromK8sResource: (resource: K8sDSGResource) => string;
export declare const getDescriptionFromK8sResource: (resource: K8sDSGResource) => string;
export declare const getCreatorFromK8sResource: (resource: K8sDSGResource) => string;
type AdditionalCriteriaForTranslation = {
    /**
     * If pure digits, prevent it with this safe string.
     * Also used when we translate to nothing, uses prefix & generated value.
     * Note: Do not exceed maxLength otherwise it will replace content with it
     */
    safeK8sPrefix?: string;
    /** If the safe prefix is to be statically applied */
    staticPrefix?: boolean;
    /**
     * Cap the characters allowed.
     * Note: This value can be problematic at very short sizes (< 3)
     */
    maxLength?: number;
};
type AdditionalCriteriaApplied = Record<keyof AdditionalCriteriaForTranslation | 'autoGenerated', boolean>;
/**
 * Converts a display name to a k8s safe variant.
 * Provide additional criteria to help trim the value
 */
export declare const translateDisplayNameForK8sAndReport: (name: string, { safeK8sPrefix, staticPrefix, maxLength }?: AdditionalCriteriaForTranslation) => [string, AdditionalCriteriaApplied];
/**
 * Simplified if you don't care what happened.
 * @see translateDisplayNameForK8sAndReport
 */
export declare const translateDisplayNameForK8s: (name: string, additionalCriteria?: AdditionalCriteriaForTranslation) => string;
export declare const isValidK8sName: (name?: string, regExp?: RegExp) => boolean;
type ResourceWithConditions = K8sResourceCommon & {
    status?: {
        conditions?: K8sCondition[];
    };
};
export declare const getConditionForType: (resource: ResourceWithConditions, type: string) => K8sCondition | undefined;
export declare const isConditionInStatus: (resource: ResourceWithConditions, type: string, status: string) => boolean;
export {};
