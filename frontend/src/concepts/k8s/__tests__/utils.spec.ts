import { mockProjectK8sResource } from '~/__mocks__';
import * as stringUtils from '~/utilities/string';
import {
  getDescriptionFromK8sResource,
  getDisplayNameFromK8sResource,
  isValidK8sName,
  translateDisplayNameForK8s,
  translateDisplayNameForK8sAndReport,
} from '~/concepts/k8s/utils';
import { K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR } from '~/pages/projects/screens/spawner/const';

describe('getDisplayNameFromK8sResource', () => {
  it('gets the display name when present', () => {
    const mockProject = mockProjectK8sResource({
      k8sName: 'my-project',
      displayName: 'My Project',
    });
    expect(getDisplayNameFromK8sResource(mockProject)).toBe('My Project');
  });

  it('uses the resource name if no display name is present', () => {
    const mockProject = mockProjectK8sResource({
      k8sName: 'my-project',
      displayName: '',
    });
    expect(getDisplayNameFromK8sResource(mockProject)).toBe('my-project');
  });
});

describe('getDescriptionFromK8sResource', () => {
  it('gets the description', () => {
    const mockProject = mockProjectK8sResource({ description: 'This is a test project' });
    expect(getDescriptionFromK8sResource(mockProject)).toBe('This is a test project');
  });

  it('returns empty string if no description', () => {
    const mockProject = mockProjectK8sResource({ description: '' });
    expect(getDescriptionFromK8sResource(mockProject)).toBe('');
  });
});

describe('translateDisplayNameForK8s', () => {
  it('translates a string into a valid k8s name', () => {
    expect(translateDisplayNameForK8s('Test Project 1')).toBe('test-project-1');
    expect(translateDisplayNameForK8s("John Doe's Cool Project!")).toBe('john-does-cool-project');
    expect(translateDisplayNameForK8s('$ymbols & Capitals and Spaces! (These are invalid!)')).toBe(
      'ymbols-capitals-and-spaces-these-are-invalid',
    );
    expect(translateDisplayNameForK8s('1234', { safeK8sPrefix: 'wb-' })).toBe('wb-1234');
    expect(translateDisplayNameForK8s('-1234', { safeK8sPrefix: 'wb-' })).toBe('wb-1234');
    expect(translateDisplayNameForK8s('-1-', { safeK8sPrefix: 'wb-' })).toBe('wb-1');
    expect(translateDisplayNameForK8s('1-', { safeK8sPrefix: 'wb-' })).toBe('wb-1');
    expect(translateDisplayNameForK8s('213-workbench-1-tls', { safeK8sPrefix: 'wb-' })).toBe(
      'wb-213-workbench-1-tls',
    );
    expect(translateDisplayNameForK8s('$-12hello', { safeK8sPrefix: 'wb-' })).toBe('wb-12hello');
    expect(translateDisplayNameForK8s('-validcharacters')).toBe(`validcharacters`);
  });
});

describe('translateDisplayNameForK8sAndReport', () => {
  type ReturnArrayType = ReturnType<typeof translateDisplayNameForK8sAndReport>;

  it('should NOT generate name if provided nothing', () => {
    expect(translateDisplayNameForK8sAndReport('')).toEqual([
      '',
      { autoGenerated: false, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(translateDisplayNameForK8sAndReport('  ')).toEqual([
      '',
      { autoGenerated: false, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(
      translateDisplayNameForK8sAndReport('', { safeK8sPrefix: 'wb-', staticPrefix: true }),
    ).toEqual([
      '',
      { autoGenerated: false, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);
  });

  it('should handle cases where it applied additional criteria', () => {
    expect(translateDisplayNameForK8sAndReport('1234', { safeK8sPrefix: 'wb-' })).toEqual([
      'wb-1234',
      { autoGenerated: false, safeK8sPrefix: true, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(translateDisplayNameForK8sAndReport('foobarbaz', { maxLength: 3 })).toEqual([
      'foo',
      { autoGenerated: false, safeK8sPrefix: false, maxLength: true, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(
      translateDisplayNameForK8sAndReport('test', { safeK8sPrefix: 'wb-', staticPrefix: true }),
    ).toEqual([
      'wb-test',
      { autoGenerated: false, safeK8sPrefix: true, maxLength: false, staticPrefix: true },
    ] satisfies ReturnArrayType);
  });

  it('should handle cases where multiple additional criteria are applied', () => {
    expect(
      translateDisplayNameForK8sAndReport('111allnumbers', { maxLength: 3, safeK8sPrefix: 'f-' }),
    ).toEqual([
      'f-1',
      { autoGenerated: false, safeK8sPrefix: true, maxLength: true, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(
      translateDisplayNameForK8sAndReport('111allnumbers', { maxLength: 3, safeK8sPrefix: 'foo-' }),
    ).toEqual([
      'foo', // known exception to providing a too long safeK8sPrefix
      { autoGenerated: false, safeK8sPrefix: true, maxLength: true, staticPrefix: false },
    ] satisfies ReturnArrayType);
  });

  it('should report nothing happened if no criteria was provided', () => {
    expect(translateDisplayNameForK8sAndReport('foobarbaz')).toEqual([
      'foobarbaz',
      { autoGenerated: false, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);
  });

  it('should handle generate name cleanly', () => {
    const GENERATED_STRING = 'iamgenerated';
    jest.spyOn(stringUtils, 'genRandomChars').mockReturnValue(GENERATED_STRING);

    expect(translateDisplayNameForK8sAndReport('-')).toEqual([
      `gen-${GENERATED_STRING}`,
      { autoGenerated: true, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(translateDisplayNameForK8sAndReport('$%*($%()*')).toEqual([
      `gen-${GENERATED_STRING}`,
      { autoGenerated: true, safeK8sPrefix: false, maxLength: false, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(translateDisplayNameForK8sAndReport('*(&(*&(*', { maxLength: 3 })).toEqual([
      `gen`, // known exception to providing a too short maxLength
      { autoGenerated: true, safeK8sPrefix: false, maxLength: true, staticPrefix: false },
    ] satisfies ReturnArrayType);

    expect(
      translateDisplayNameForK8sAndReport('*(&(*&(*', { maxLength: 3, safeK8sPrefix: 'foo-' }),
    ).toEqual([
      `foo`, // known exception to providing a too long safeK8sPrefix
      { autoGenerated: true, safeK8sPrefix: true, maxLength: true, staticPrefix: false },
    ] satisfies ReturnArrayType);
  });
});

describe('isValidK8sName', () => {
  it('identifies invalid names', () => {
    expect(isValidK8sName('')).toBe(false);
    expect(isValidK8sName('Test Project 1')).toBe(false);
    expect(isValidK8sName("John Doe's Cool Project!")).toBe(false);
    expect(isValidK8sName('$ymbols & Capitals and Spaces! (These are invalid!)')).toBe(false);
  });

  it('identifies valid names', () => {
    expect(isValidK8sName(undefined)).toBe(true);
    expect(isValidK8sName('test-project-1')).toBe(true);
    expect(isValidK8sName('john-does-cool-project')).toBe(true);
    expect(isValidK8sName('ymbols--capitals-and-spaces-these-are-invalid')).toBe(true);
  });
});

describe('isValidK8sName for Notebook resource names', () => {
  it('identifies invalid names', () => {
    expect(isValidK8sName('', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(false);
    expect(isValidK8sName('Test Project 1', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(false);
    expect(isValidK8sName("John Doe's Cool Project!", K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(
      false,
    );
    expect(
      isValidK8sName(
        '$ymbols & Capitals and Spaces! (These are invalid!)',
        K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR,
      ),
    ).toBe(false);
    expect(isValidK8sName('--213-workbench-1-tls', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(
      false,
    );
    expect(isValidK8sName('1234', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(false);
    expect(isValidK8sName('213-workbench-1-tls', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(false);
  });

  it('identifies valid names', () => {
    expect(isValidK8sName('test-project-1', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(true);
    expect(isValidK8sName('john-does-cool-project', K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR)).toBe(
      true,
    );
    expect(
      isValidK8sName(
        'ymbols--capitals-and-spaces-these-are-invalid',
        K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR,
      ),
    ).toBe(true);
  });
});
