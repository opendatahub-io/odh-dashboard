#!/usr/bin/env sh

echo "üîç Checking for lint errors in staged files..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Filter staged files by directory and file type
FRONTEND_FILES=$(echo "$STAGED_FILES" | grep "^frontend/" | grep -E "\.(js|ts|jsx|tsx)$" || true)
BACKEND_FILES=$(echo "$STAGED_FILES" | grep "^backend/" | grep -E "\.(js|ts|json)$" || true)

# Exit early if no relevant files are staged
if [ -z "$FRONTEND_FILES" ] && [ -z "$BACKEND_FILES" ]; then
    echo "‚úÖ No frontend or backend files staged for commit, skipping lint checks"
    exit 0
fi

# Track if any linting failed
LINT_FAILED=0

# Run frontend lint on specific staged files
if [ -n "$FRONTEND_FILES" ]; then
    echo "üìù Linting staged frontend files:"
    echo "$FRONTEND_FILES" | sed 's/^/  - /'
    cd frontend
    
    # Convert file paths to be relative to frontend directory
    FRONTEND_FILES_RELATIVE=$(echo "$FRONTEND_FILES" | sed 's|^frontend/||')
    
    if ! echo "$FRONTEND_FILES_RELATIVE" | xargs npx eslint --max-warnings 0; then
        echo "‚ùå Frontend lint failed!"
        LINT_FAILED=1
    else
        echo "‚úÖ Frontend lint passed!"
    fi
    cd ..
fi

# Run backend lint on specific staged files  
if [ -n "$BACKEND_FILES" ]; then
    echo "üìù Linting staged backend files:"
    echo "$BACKEND_FILES" | sed 's/^/  - /'
    cd backend
    
    # Convert file paths to be relative to backend directory
    BACKEND_FILES_RELATIVE=$(echo "$BACKEND_FILES" | sed 's|^backend/||')
    
    if ! echo "$BACKEND_FILES_RELATIVE" | xargs npx eslint --max-warnings 0; then
        echo "‚ùå Backend lint failed!"
        LINT_FAILED=1
    else
        echo "‚úÖ Backend lint passed!"
    fi
    cd ..
fi

# Exit with error if any lint check failed
if [ $LINT_FAILED -eq 1 ]; then
    echo "üí• Commit aborted due to lint errors. Please fix the issues and try again."
    echo "üí° You can run 'npx eslint --fix <file>' to auto-fix some issues."
    exit 1
fi

echo "üéâ All lint checks passed!"
exit 0 