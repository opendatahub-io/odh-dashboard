openapi: '3.0.3'
info:
  title: 'Gen AI REST API'
  version: '1.0.0'
  description: 'REST API for Gen AI Backend for Frontend (BFF) using OpenAI SDK v2.4.0'
  license:
    name: 'Apache 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: 'http://localhost:8080'
    description: 'Local development server'

# Global security requirement - all endpoints require Bearer token by default
security:
  - Bearer: []

paths:
  /healthcheck:
    summary: BFF service health check
    description: >-
      Health check endpoint to verify BFF service availability. This is a local service check
      and does not validate external Llama Stack connectivity.
    get:
      tags:
        - HealthCheck
      responses:
        '200':
          $ref: '#/components/responses/HealthCheckResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: healthcheck
      summary: BFF Health Check
      description: Returns BFF service status and version information.
      security: []

  /gen-ai/api/v1/models:
    summary: List available AI models
    description: >-
      Lists all available AI models from Llama Stack using OpenAI SDK.
      Returns models with their identifiers, creation timestamps, and ownership information.
      Requires namespace parameter for proper multi-tenant isolation.
    get:
      tags:
        - Models
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace to query for AI models
          required: true
          schema:
            type: string
            example: "default"
      responses:
        '200':
          $ref: '#/components/responses/ModelsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: listModels
      summary: List All Models
      description: Gets a list of all available AI models from Llama Stack.

  /gen-ai/api/v1/vectorstores:
    summary: Manage vector stores for RAG
    description: >-
      Vector stores are used for Retrieval-Augmented Generation (RAG).
      They store document embeddings that can be searched during AI response generation.
      Requires namespace parameter for proper multi-tenant isolation.
    get:
      tags:
        - VectorStores
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace to query for vector stores
          required: true
          schema:
            type: string
            example: "default"
        - name: limit
          in: query
          description: Number of vector stores to return (1-100, default 20)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 10
        - name: order
          in: query
          description: Sort order by creation timestamp
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: desc

      responses:
        '200':
          $ref: '#/components/responses/VectorStoresResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: listVectorStores
      summary: List Vector Stores
      description: Gets a list of vector stores with optional pagination and sorting.
    post:
      tags:
        - VectorStores
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace to create vector store in
          required: true
          schema:
            type: string
            example: "default"
      requestBody:
        description: Vector store creation request (only name is required, all other parameters are optional)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreRequest'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/VectorStoreResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createVectorStore
      summary: Create Vector Store
      description: Creates a new vector store for document storage and RAG. Only the name field is required.

  /gen-ai/api/v1/files/upload:
    summary: Upload files to vector stores with chunking control
    description: >-
      Uploads a file and automatically adds it to the specified vector store.
      This is a combined operation that handles both file upload and vector store integration.
      Supports custom chunking strategies for optimal document processing and RAG performance.
      Requires namespace parameter for proper multi-tenant isolation.
    post:
      tags:
        - Files
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace for file upload context
          required: true
          schema:
            type: string
            example: "default"
      requestBody:
        description: Multipart form with file and vector store information
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/FileUploadResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: uploadFile
      summary: Upload File to Vector Store
      description: Uploads a file and adds it to the specified vector store for RAG functionality. Supports custom chunking strategies for optimal document processing.

  /gen-ai/api/v1/responses:
    summary: Create AI responses with clean LlamaStack structure
    description: >-
      Creates AI responses using LlamaStack with comprehensive parameter support.
      Supports RAG via vector stores, conversation context, and advanced generation parameters.
      Returns clean JSON responses preserving LlamaStack's output structure but filtering unnecessary metadata.
      Can return either complete JSON responses or real-time streaming responses based on the stream parameter.

    post:
      tags:
        - Responses
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace for AI response generation context
          required: true
          schema:
            type: string
            example: "default"
      requestBody:
        description: Response creation request with comprehensive parameter support
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponseRequest'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/CreateResponseResponse'
        '200':
          $ref: '#/components/responses/StreamingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createResponse
      summary: Create AI Response
      description: >-
        Creates an AI response with full parameter control including RAG and conversation context.
        When stream=false: Returns a clean JSON response with essential fields (id, model, status, created_at, output).
        When stream=true: Returns Server-Sent Events (SSE) stream with real-time token deltas and completion events.
        The output array preserves LlamaStack's structure but filters out unnecessary metadata for optimal performance.

  /gen-ai/api/v1/code-exporter:
    summary: Generate Python code for Llama Stack integration
    description: >-
      Generates Python code templates for integrating with Llama Stack services.
      Supports custom configuration including model selection, instructions, streaming, and tool configurations.
      Returns executable Python code wrapped in a JSON envelope structure.
      Requires namespace parameter for proper multi-tenant isolation.
    post:
      tags:
        - CodeExporter
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace for code generation context
          required: true
          schema:
            type: string
            example: "default"
      requestBody:
        description: Code generation request with configuration parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeExportRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/CodeExportResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: exportCode
      summary: Export Python Code
      description: Generates Python code based on provided configuration parameters.

  /gen-ai/api/v1/namespaces:
    summary: List Kubernetes cluster namespaces
    description: >-
      Lists all namespaces in the Kubernetes cluster.
      Returns namespace information including name and display name.
      Requires valid Kubernetes authentication token.
    get:
      tags:
        - Kubernetes
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/NamespacesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: listNamespaces
      summary: List All Namespaces
      description: Gets a list of all namespaces in the Kubernetes cluster.

  /gen-ai/api/v1/llamastack-distribution/status:
    summary: Get LlamaStack Distribution status
    description: >-
      Retrieves the status of LlamaStack Distribution (LSD) in the specified namespace.
      Returns LSD information including name, phase, version, and distribution configuration.
      Requires valid Kubernetes authentication token and namespace parameter.
      Returns 400 for missing parameters or other validation errors.
      Returns 401 for missing or invalid authentication tokens.
      Returns 404 if the LSD CRD is not installed, the namespace doesn't exist, or no LSD resources are found.
    get:
      tags:
        - Kubernetes
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace to query for LSD resources
          required: true
          schema:
            type: string
            example: 'default'
      responses:
        '200':
          $ref: '#/components/responses/LlamaStackDistributionStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getLlamaStackDistributionStatus
      summary: Get LSD Status
      description: Gets the status of LlamaStack Distribution in the specified namespace.

  /gen-ai/api/v1/llamastack-distribution/install:
    summary: Install LlamaStack Distribution
    description: >-
      Installs a new LlamaStack Distribution (LSD) in the specified namespace with the provided models.
      Creates both the LSD custom resource and a ConfigMap containing the run.yaml configuration.
      The ConfigMap is configured with the specified models and their endpoints.
      Requires valid Kubernetes authentication token and namespace parameter.
      Returns 400 for missing parameters, invalid JSON, or empty models list.
      Returns 401 for missing or invalid authentication tokens.
      Returns 500 for internal server errors during resource creation.
    post:
      tags:
        - Kubernetes
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace where the LSD will be installed
          required: true
          schema:
            type: string
            example: "default"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LlamaStackDistributionInstallRequest"
            description: Installation request with list of models to include
            example:
              models: ["llama-3-2-3b-instruct", "granite-embedding-125m"]
      responses:
        "200":
          $ref: "#/components/responses/LlamaStackDistributionInstallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: installLlamaStackDistribution
      summary: Install LSD
      description: Installs a new LlamaStack Distribution with the specified models.

  /gen-ai/api/v1/user:
    summary: Get current user information
    description: >-
      Retrieves the current authenticated user information from the Kubernetes cluster.
      Returns the username associated with the provided authentication token.
      Always returns HTTP 200 with user information or empty userId if user cannot be determined.
      Requires valid Kubernetes authentication token.
    get:
      tags:
        - Identity
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getCurrentUser
      summary: Get Current User
      description: Gets the current authenticated user information from the Kubernetes cluster.

  /gen-ai/api/v1/mcp/tools:
    summary: Get tools from MCP server by URL
    description: >-
      Retrieves the available tools from a specific MCP (Model Context Protocol) server by its URL.
      Uses the MCP client to connect to the server specified by the server_url parameter and fetch its tool definitions.
      Returns tool information including names, descriptions, and input schemas.

      The server_url parameter should be the full URL-encoded endpoint for the MCP server.

      Requires valid authentication token for MCP client operations.
      Optionally accepts MCP server authentication via X-MCP-Bearer header.
    get:
      tags:
        - MCP Servers
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace
          required: true
          schema:
            type: string
            example: 'demo'
        - name: server_url
          in: query
          description: Full URL-encoded endpoint for the MCP server
          required: true
          schema:
            type: string
            format: uri
            example: 'http%3A%2F%2Flocalhost%3A9090%2Fsse'
        - name: X-MCP-Bearer
          in: header
          description: Optional Bearer token for MCP server authentication. Must include 'Bearer ' prefix.
          required: false
          schema:
            type: string
            pattern: '^Bearer .+'
            example: 'Bearer mcp_server_token_123'
      responses:
        '200':
          $ref: '#/components/responses/MCPToolsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getMCPTools
      summary: Get MCP Tools by URL
      description: Gets the available tools from the MCP server specified by URL.

  /gen-ai/api/v1/mcp/status:
    summary: Get connection status from MCP server by URL
    description: >-
      Retrieves the connection status of a specific MCP (Model Context Protocol) server by its URL.
      Uses the MCP client to connect to the server specified by the server_url parameter and check its availability.
      Returns connection status information including connectivity state, response message, and last check timestamp.

      The server_url parameter should be the full URL-encoded endpoint for the MCP server.

      Requires valid authentication token for MCP client operations.
      Optionally accepts MCP server authentication via X-MCP-Bearer header.
    get:
      tags:
        - MCP Servers
      security:
        - Bearer: []
      parameters:
        - name: namespace
          in: query
          description: Kubernetes namespace
          required: true
          schema:
            type: string
            example: 'demo'
        - name: server_url
          in: query
          description: Full URL-encoded endpoint for the MCP server
          required: true
          schema:
            type: string
            format: uri
            example: 'http%3A%2F%2Flocalhost%3A9090%2Fsse'
        - name: X-MCP-Bearer
          in: header
          description: Optional Bearer token for MCP server authentication. Must include 'Bearer ' prefix.
          required: false
          schema:
            type: string
            pattern: '^Bearer .+'
            example: 'Bearer mcp_server_token_123'
      responses:
        '200':
          $ref: '#/components/responses/MCPStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getMCPStatus
      summary: Get MCP Server Status by URL
      description: Gets the connection status of the MCP server specified by URL.

  /gen-ai/api/v1/aa/mcps:
    get:
      tags:
        - MCP Servers
      operationId: getMCPServersList
      summary: Get Enhanced List of Available MCP Servers
      description: >-
        Retrieves an enhanced list of available MCP (Model Context Protocol) servers from the ConfigMap.
        Returns a flattened server array with comprehensive metadata.
      parameters:
        - $ref: '#/components/parameters/NamespaceParam'
      responses:
        '200':
          description: Successfully retrieved enhanced list of MCP servers with metadata
          $ref: '#/components/responses/MCPServersListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied to ConfigMap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                config_map_access_denied:
                  summary: ConfigMap Access Denied
                  value:
                    error:
                      code: '403'
                      message: "Access denied to ConfigMap 'gen-ai-aa-mcp-servers-e' in namespace 'mcp-servers'"
                      details:
                        config_map_name: 'gen-ai-aa-mcp-servers-e'
                        namespace: 'mcp-servers'
                        reason: 'Insufficient permissions'
        '404':
          description: ConfigMap not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                config_map_not_found:
                  summary: ConfigMap Not Found
                  value:
                    error:
                      code: '404'
                      message: "ConfigMap 'gen-ai-aa-mcp-servers-e' not found in namespace 'mcp-servers'"
                      details:
                        config_map_name: 'gen-ai-aa-mcp-servers-e'
                        namespace: 'mcp-servers'
                        reason: 'ConfigMap does not exist'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication using OAuth2 JWT tokens
  parameters:
    NamespaceParam:
      name: namespace
      in: query
      description: Kubernetes namespace to operate in.
      required: true
      schema:
        type: string
        example: 'demo'
  schemas:
    HealthCheckModel:
      type: object
      required:
        - status
        - system_info
      properties:
        status:
          type: string
          example: 'available'
          description: BFF service availability status
        system_info:
          $ref: '#/components/schemas/SystemInfo'
        userId:
          type: string
          example: 'user@example.com'
          description: User identifier (optional)

    SystemInfo:
      type: object
      required:
        - version
      properties:
        version:
          type: string
          example: '1.0.0'
          description: BFF service version

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: '400'
          description: HTTP status code
        message:
          type: string
          example: 'Bad request'
          description: Human-readable error message

    ErrorEnvelope:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'

    # Models Schema
    Model:
      type: object
      required:
        - id
        - object
        - created
        - owned_by
      properties:
        id:
          type: string
          example: 'ollama/llama3.2:3b'
          description: Unique model identifier
        object:
          type: string
          example: 'model'
          description: Object type (always "model")
        created:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when model was created
        owned_by:
          type: string
          example: 'llama_stack'
          description: Model owner/provider

    ModelsData:
      type: array
      items:
        $ref: '#/components/schemas/Model'
      description: Array of available models

    # Vector Stores Schema
    VectorStore:
      type: object
      required:
        - id
        - object
        - created_at
        - name
        - usage_bytes
        - file_counts
        - status
        - last_active_at
        - metadata
      properties:
        id:
          type: string
          example: 'vs_abc123-def456'
          description: Unique vector store identifier
        object:
          type: string
          example: 'vector_store'
          description: Object type (always "vector_store")
        created_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when vector store was created
        name:
          type: string
          example: 'Support Documents'
          description: Human-readable name (max 256 characters)
        usage_bytes:
          type: integer
          format: int64
          example: 1024
          description: Storage usage in bytes
        file_counts:
          $ref: '#/components/schemas/FileCounts'
        status:
          type: string
          enum: [pending, completed, failed]
          example: 'completed'
          description: Vector store processing status
        last_active_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp of last activity
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            provider_id: 'milvus'
            provider_vector_db_id: 'vs_abc123-def456'
            description: 'Customer support documents'
          description: Key-value metadata (max 16 pairs, keys ≤64 chars, values ≤512 chars)

    FileCounts:
      type: object
      required:
        - in_progress
        - completed
        - failed
        - cancelled
        - total
      properties:
        in_progress:
          type: integer
          example: 0
          description: Number of files currently being processed
        completed:
          type: integer
          example: 3
          description: Number of successfully processed files
        failed:
          type: integer
          example: 0
          description: Number of files that failed processing
        cancelled:
          type: integer
          example: 0
          description: Number of cancelled file operations
        total:
          type: integer
          example: 3
          description: Total number of files in vector store

    VectorStoresData:
      type: array
      items:
        $ref: '#/components/schemas/VectorStore'
      description: Array of vector stores

    CreateVectorStoreRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          example: 'Customer Support FAQ'
          description: Required name for the vector store (1-256 characters)
        metadata:
          type: object
          additionalProperties:
            type: string
          maxProperties: 16
          example:
            department: 'support'
            category: 'faq'
            provider_id: 'milvus'
          description: Optional key-value metadata (max 16 pairs, keys ≤64 chars, values ≤512 chars)

    # File Upload Schema
    FileUploadRequest:
      type: object
      required:
        - file
        - vector_store_id
      properties:
        file:
          type: string
          format: binary
          description: File to upload (max 512MB, supports PDF, TXT, DOC, etc.)
        vector_store_id:
          type: string
          example: 'vs_abc123-def456'
          description: Vector store ID to add the file to (required)
        purpose:
          type: string
          enum: [assistants, batch, fine-tune, vision, user_data, evals]
          default: 'assistants'
          example: 'assistants'
          description: Intended file purpose (defaults to "assistants" for RAG)
        chunking_type:
          type: string
          enum: [auto, static]
          example: 'static'
          description: Optional chunking strategy ("auto" uses defaults, "static" allows custom configuration)
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          default: 800
          example: 600
          description: Maximum tokens per chunk (only for static chunking, range 100-4096)
        chunk_overlap_tokens:
          type: integer
          minimum: 0
          example: 200
          description: Token overlap between chunks (only for static chunking, must be < half of max_chunk_size_tokens)

    ChunkingStrategyResult:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [auto, static]
          example: 'static'
          description: Type of chunking strategy applied
        static:
          type: object
          properties:
            max_chunk_size_tokens:
              type: integer
              example: 600
              description: Maximum tokens per chunk (actual applied value)
            chunk_overlap_tokens:
              type: integer
              example: 200
              description: Token overlap between chunks (actual applied value)
          description: Static chunking configuration (present for both auto and static types)

    FileError:
      type: object
      properties:
        code:
          type: string
          example: 'server_error'
          description: Error code if file processing failed
        message:
          type: string
          example: 'File processing failed'
          description: Error message if file processing failed

    FileUploadResult:
      type: object
      required:
        - file_id
      properties:
        file_id:
          type: string
          example: 'file-abc123def456'
          description: Unique identifier of uploaded file
        vector_store_file:
          $ref: '#/components/schemas/VectorStoreFile'
          description: Details about the file added to the vector store (only present if vector_store_id was provided)

    VectorStoreFile:
      type: object
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - chunking_strategy
      properties:
        id:
          type: string
          example: 'vsf-abc123'
          description: Unique vector store file identifier
        object:
          type: string
          example: 'vector_store.file'
          description: Object type
        usage_bytes:
          type: integer
          format: int64
          example: 1024
          description: File size in bytes
        created_at:
          type: integer
          format: int64
          example: 1755616759
          description: Unix timestamp when file was added
        vector_store_id:
          type: string
          example: 'vs_abc123'
          description: Parent vector store ID
        status:
          type: string
          enum: [pending, completed, failed]
          example: 'completed'
          description: File processing status
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyResult'
        attributes:
          type: object
          description: File attributes and metadata
        last_error:
          $ref: '#/components/schemas/FileError'

    # Chat Context Schema
    ChatContextMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          example: 'user'
          description: Message role in conversation
        content:
          type: string
          example: 'Hello, how are you?'
          description: Message content
      example:
        role: 'assistant'
        content: "Hello! I'm doing well, thank you for asking. How can I help you today?"

    # Response Creation Schema
    CreateResponseRequest:
      type: object
      required:
        - input
        - model
      properties:
        # === REQUIRED PARAMETERS ===
        input:
          type: string
          minLength: 1
          example: 'Tell me about artificial intelligence'
          description: Text input for AI response generation (required)
        model:
          type: string
          example: 'ollama/llama3.2:3b'
          description: Model ID to use for generation (required, see /gen-ai/api/v1/models)

        # === OPTIONAL PARAMETERS (TESTED & WORKING) ===
        vector_store_ids:
          type: array
          items:
            type: string
          example: ['vs_abc123', 'vs_def456']
          description: Vector store IDs for file search (RAG functionality)
        chat_context:
          type: array
          items:
            $ref: '#/components/schemas/ChatContextMessage'
          example:
            - role: 'user'
              content: 'What is artificial intelligence?'
            - role: 'assistant'
              content: 'Artificial intelligence (AI) is a branch of computer science that aims to create machines capable of intelligent behavior, learning, and decision-making.'
            - role: 'user'
              content: 'Can you give me some examples?'
          description: Full conversation history for multi-turn conversations

        # === GENERATION PARAMETERS ===
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          example: 0.7
          description: Controls randomness (0.0=deterministic, 2.0=very random)
        top_p:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          example: 0.9
          description: Nucleus sampling parameter (alternative to temperature)
        instructions:
          type: string
          example: 'You are a helpful AI assistant that provides detailed explanations.'
          description: System instructions for response generation
        stream:
          type: boolean
          default: false
          example: true
          description: Enable streaming response (SSE format) instead of complete JSON response

    # Clean Response Schema - Preserves LlamaStack Structure
    ResponseData:
      type: object
      required:
        - id
        - model
        - status
        - created_at
        - output
      properties:
        id:
          type: string
          example: 'resp-abc123-def456'
          description: Unique response identifier
        model:
          type: string
          example: 'ollama/llama3.2:3b'
          description: AI model used for generation
        status:
          type: string
          example: 'completed'
          description: Response completion status
        created_at:
          type: integer
          format: int64
          example: 1755695135
          description: Response creation timestamp (Unix timestamp)
        output:
          type: array
          items:
            $ref: '#/components/schemas/OutputItem'
          description: Array of output items (messages, tool calls, etc.)

    OutputItem:
      type: object
      required:
        - id
        - type
        - status
      properties:
        id:
          type: string
          example: 'msg_abc123'
          description: Output item identifier
        type:
          type: string
          enum: [message, file_search_call]
          example: 'message'
          description: Type of output item
        role:
          type: string
          enum: [assistant]
          example: 'assistant'
          description: Role for message outputs
        status:
          type: string
          enum: [completed]
          example: 'completed'
          description: Output item status
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContentItem'
          description: Content array for message outputs
        queries:
          type: array
          items:
            type: string
          example: ['search query']
          description: Search queries for file_search_call outputs
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: Search results for file_search_call outputs

    ContentItem:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum: [output_text]
          example: 'output_text'
          description: Content type
        text:
          type: string
          example: 'Hello! How can I help you today?'
          description: Generated text content

    SearchResult:
      type: object
      required:
        - score
        - text
      properties:
        score:
          type: number
          format: float
          example: 0.95
          description: Relevance score (0.0-1.0)
        text:
          type: string
          example: 'Relevant document content'
          description: Retrieved text content
        filename:
          type: string
          example: 'document.pdf'
          description: Source filename (if available)

    # Streaming Event Schema
    StreamingEvent:
      type: object
      required:
        - sequence_number
        - type
        - output_index
      properties:
        sequence_number:
          type: integer
          format: int64
          example: 3
          description: Strictly monotonic incrementing event number within the stream
        type:
          type: string
          enum:
            [
              response.created,
              response.content_part.added,
              response.output_text.delta,
              response.content_part.done,
              response.completed,
            ]
          example: 'response.output_text.delta'
          description: Event type
        output_index:
          type: integer
          example: 0
          description: Output index within the response
        delta:
          type: string
          nullable: true
          example: 'Hello'
          description: Token delta (only present for response.output_text.delta events)
        item_id:
          type: string
          nullable: true
          example: 'msg_a32fd412-6efb-4621-a378-791b2a39ccc2'
          description: Content part identifier (only present for content/item events)
        response:
          allOf:
            - $ref: '#/components/schemas/ResponseData'
          nullable: true
          description: Response data (only present for response.created and response.completed events)

    # Code Exporter Schema
    Tool:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [file_search]
          example: 'file_search'
          description: Type of tool to include in the generated code
        vector_store_ids:
          type: array
          items:
            type: string
          example: ['vs_abc123', 'vs_def456']
          description: Vector store IDs to use with the tool

    VectorStoreConfig:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          example: 'default_vector_store'
          description: Name of the vector store
        embedding_model:
          type: string
          example: 'all-minilm:l6-v2'
          description: Embedding model to use for the vector store
        embedding_dimension:
          type: integer
          minimum: 1
          example: 384
          description: Dimension of the embedding vectors
        provider_id:
          type: string
          example: 'milvus'
          description: Provider ID for the vector store backend

    FileUpload:
      type: object
      required:
        - file
        - purpose
      properties:
        file:
          type: string
          example: 'document.pdf'
          description: Name of the file to upload
        purpose:
          type: string
          enum: [assistants, batch, fine-tune, vision, user_data, evals]
          default: 'assistants'
          example: 'assistants'
          description: Intended purpose of the file

    CodeExportRequest:
      type: object
      required:
        - input
        - model
      properties:
        input:
          type: string
          minLength: 1
          example: 'What is the capital of Ireland?'
          description: User prompt
        model:
          type: string
          example: 'ollama/llama3.2:3b'
          description: Model ID to use in the generated code
        instructions:
          type: string
          example: 'You are a helpful assistant. Use the RAG tool to answer questions as needed.'
          description: System instructions for code generation
        stream:
          type: boolean
          default: false
          example: false
          description: Whether to enable streaming in the generated code
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          default: 0.7
          example: 0.5
          description: Controls randomness in code generation (0.0=deterministic, 2.0=very random)
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
          example:
            - type: 'file_search'
              vector_store_ids: ['vs_abc123']
          description: Tools to include in the generated code
        vector_store:
          $ref: '#/components/schemas/VectorStoreConfig'
          description: Vector store configuration for RAG functionality
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileUpload'
          description: Files to upload and add to the vector store

    CodeExportData:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Generated Python code
          example: |
            # Llama Stack Quickstart Script
            #
            # README:
            # This example shows how to configure an assistant using the Llama Stack client.
            # Before using this code, make sure of the following:
            #
            # 1. Llama Stack Server:
            #    - Your Llama Stack instance must be running and accessible
            #    - Set the LLAMA_STACK_URL variable to the base URL of your Llama Stack server
            #
            # 2. Model Configuration:
            #    - The selected model (e.g., "llama3.2:3b") must be available in your Llama Stack deployment.
            #
            # 3. Tools (MCP Integration):
            #    - Any tools used must be properly pre-configured in your Llama Stack setup.

            LLAMA_STACK_URL = ""
            FILES_BASE_PATH = ""
            input_text = "What is the capital of Ireland?"
            model_name = "ollama/llama3.2:3b"
            vector_store_name = "default_vector_store"
            temperature = 0.7
            stream_enabled = False
            system_instructions = "You are a helpful assistant. Use the RAG tool to answer questions as needed."
            files_to_upload = [
                { "file": "document.pdf", "purpose": "assistants" },
            ]

            from llama_stack_client import LlamaStackClient
            import os

            client = LlamaStackClient(base_url=LLAMA_STACK_URL)

            # Create vector store
            vector_store = client.vector_stores.create(
                name=vector_store_name,
                embedding_model="text-embedding-3-small",
                embedding_dimension=1536,
                provider_id="milvus"
            )
            tools = [
                {
                    "type": "file_search",
                    "vector_store_ids": [
                        vector_store.id
                    ]
                },
            ]

            for file_info in files_to_upload:
                with open(os.path.join(FILES_BASE_PATH, file_info["file"]), 'rb') as file:
                    uploaded_file = client.files.create(file=file, purpose=file_info["purpose"])
                    client.vector_stores.files.create(
                        vector_store_id=vector_store.id,
                        file_id=uploaded_file.id
                    )

            config = {
                "input": input_text,
                "model": model_name,
                "temperature": temperature,
                "stream": stream_enabled,
                "instructions": system_instructions,
                "tools": tools
            }

            response = client.responses.create(**config)

            print("agent>", response.output_text)

    # Kubernetes Namespace Schema
    NamespaceModel:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'default'
          description: Kubernetes namespace name
        displayName:
          type: string
          nullable: true
          example: 'default'
          description: Human-readable display name for the namespace (optional, defaults to name)

    NamespacesData:
      type: array
      items:
        $ref: '#/components/schemas/NamespaceModel'
      description: Array of Kubernetes namespaces

    # LlamaStack Distribution Schema
    LlamaStackDistributionModel:
      type: object
      required:
        - name
        - phase
        - version
        - distributionConfig
      properties:
        name:
          type: string
          example: 'test-lsd'
          description: Name of the LlamaStack Distribution resource
        phase:
          type: string
          example: 'Ready'
          description: Current phase of the LSD (e.g., Pending, Initializing, Ready, Failed, Terminating)
        version:
          type: string
          example: 'v0.2.0'
          description: Version of the LlamaStack server
        distributionConfig:
          $ref: '#/components/schemas/DistributionConfig'

    LlamaStackDistributionInstallRequest:
      type: object
      required:
        - models
      properties:
        models:
          type: array
          items:
            type: string
          description: List of model names to include in the LSD installation
          example: ["llama-3-2-3b-instruct", "granite-embedding-125m"]
          minItems: 1

    LlamaStackDistributionInstallModel:
      type: object
      required:
        - name
        - httpStatus
      properties:
        name:
          type: string
          example: "lsd-genai-playground"
          description: Name of installed LlamaStack Distribution
        httpStatus:
          type: string
          example: "200"
          description: HTTP status code of the installation operation

    DistributionConfig:
      type: object
      required:
        - activeDistribution
        - availableDistributions
        - providers
      properties:
        activeDistribution:
          type: string
          example: 'ollama'
          description: Currently active distribution type
        availableDistributions:
          type: object
          additionalProperties:
            type: string
          example:
            ollama: 'docker.io/llamastack/distribution-ollama:latest'
            bedrock: 'docker.io/llamastack/distribution-bedrock:latest'
          description: Map of available distribution types to their image references
        providers:
          type: array
          items:
            $ref: '#/components/schemas/ProviderInfo'
          description: List of provider information

    ProviderInfo:
      type: object
      required:
        - api
        - provider_id
        - provider_type
      properties:
        api:
          type: string
          example: 'mock-api'
          description: API endpoint for the provider
        provider_id:
          type: string
          example: 'mock-provider'
          description: Unique identifier for the provider
        provider_type:
          type: string
          example: 'mock-type'
          description: Type of the provider
        config:
          type: object
          nullable: true
          description: Provider-specific configuration
        health:
          $ref: '#/components/schemas/ProviderHealth'

    ProviderHealth:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          example: 'healthy'
          description: Health status of the provider
        message:
          type: string
          example: 'Provider is responding normally'
          description: Additional health information

    # User Schema
    UserModel:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: 'user@example.com'
          description: Current authenticated user identifier from Kubernetes cluster

    # MCP Server Configuration Schema
    MCPServerConfigMap:
      type: object
      required:
        - metadata
        - data
      properties:
        metadata:
          $ref: '#/components/schemas/ConfigMapMetadata'
        data:
          type: object
          additionalProperties:
            type: string
          description: Map of JSON configuration data for MCP servers
          example:
            dev-cluster: |
              {
                "url": "https://mcp-one:8080",
                "description": "Manage resources in a Kubernetes cluster.",
                "logo": "https://mysite.com/logo.png"
              }
            git-hub: |
              {
                "url": "https://mcp-two",
                "description": "Manage a GitHub repository.",
                "logo": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              }

    # MCP Server Status and Tools Schema
    MCPServerConnectionStatus:
      type: object
      required:
        - server_url
        - status
        - last_checked
      properties:
        server_url:
          type: string
          example: 'http://kubectl-mcp-server.mcp-servers.svc.cluster.local:8080'
          description: URL of the MCP server
        status:
          type: string
          enum: [connected, disconnected, error]
          example: 'connected'
          description: Connection status of the MCP server
        message:
          type: string
          example: 'Successfully connected to MCP server'
          description: Optional message providing additional status information
        last_checked:
          type: integer
          format: int64
          example: 1755721435
          description: Unix timestamp when the status was last checked

    MCPTool:
      type: object
      required:
        - name
        - description
        - input_schema
      properties:
        name:
          type: string
          example: 'kubectl_get_pods'
          description: Name of the MCP tool
        description:
          type: string
          example: 'List pods in a Kubernetes namespace'
          description: Human-readable description of what the tool does
        input_schema:
          type: object
          example:
            type: 'object'
            properties:
              namespace:
                type: 'string'
                description: 'Kubernetes namespace to list pods from'
              label_selector:
                type: 'string'
                description: 'Optional label selector to filter pods'
            required: ['namespace']
          description: JSON schema defining the tool's input parameters

    MCPServersMap:
      type: object
      description: MCP server information where each key is the server name and value contains server details
      additionalProperties:
        $ref: '#/components/schemas/MCPServerConfig'
      example:
        brave:
          url: 'http://localhost:9090/sse'
          transport: 'sse'
          description: 'Search the Internet.'
        kubernetes:
          url: 'http://localhost:9091/mcp'
          transport: 'streamable-http'
          description: 'Manage resources in a Kubernetes cluster.'
          logo: 'https://kubernetes.io/_common-resources/images/flower.svg'

    MCPServerConfig:
      type: object
      required:
        - url
        - transport
      properties:
        url:
          type: string
          format: uri
          example: 'http://localhost:9090/sse'
          description: Full URL of the MCP server endpoint
        transport:
          type: string
          enum: ['sse', 'streamable-http']
          example: 'sse'
          description: Transport type used by the MCP server
        description:
          type: string
          example: 'Brave search MCP server'
          description: Optional description of the MCP server functionality
        logo:
          type: string
          format: uri
          example: 'https://kubernetes.io/images/kubernetes-horizontal-color.png'
          description: Optional logo URL for the MCP server

    MCPErrorDetails:
      type: object
      required:
        - code
        - status_code
        - raw_error
      properties:
        code:
          type: string
          enum:
            [
              'connection_error',
              'CONNECTION_FAILED',
              'unauthorized',
              'timeout',
              'bad_request',
              'internal_error',
            ]
          example: 'unauthorized'
          description: Error category for structured error handling
        status_code:
          type: integer
          example: 401
          description: HTTP-equivalent status code for the error
        raw_error:
          type: string
          example: 'failed to connect to MCP server: HTTP 401: Missing credentials'
          description: Original raw error message for debugging purposes

    MCPServerInfo:
      type: object
      required:
        - name
        - version
        - protocol_version
      properties:
        name:
          type: string
          example: 'brave'
          description: MCP server name or ConfigMap key fallback
        version:
          type: string
          example: '1.0.0'
          description: MCP server version or 'N/A' if unavailable
        protocol_version:
          type: string
          example: '2024-11-05'
          description: MCP protocol version or empty string if unavailable

    MCPConnectionStatus:
      type: object
      required:
        - server_url
        - status
        - message
        - last_checked
        - server_info
      properties:
        server_url:
          type: string
          format: uri
          example: 'http://localhost:9090/sse'
          description: URL of the MCP server
        status:
          type: string
          enum: ['connected', 'error']
          example: 'connected'
          description: Connection status of the MCP server
        message:
          type: string
          example: 'Server is responding normally'
          description: Detailed status message or error description
        last_checked:
          type: integer
          format: int64
          example: 1755721435
          description: Unix timestamp when the status was last checked
        server_info:
          $ref: '#/components/schemas/MCPServerInfo'
          description: Nested server information including name, version, and protocol version
        ping_response_time_ms:
          type: integer
          format: int64
          example: 45
          description: Ping response time in milliseconds (only present on successful connection)
        error_details:
          $ref: '#/components/schemas/MCPErrorDetails'
          description: Structured error information (only present when status is 'error')

    MCPToolsStatus:
      type: object
      required:
        - server_url
        - status
        - message
        - last_checked
        - server_info
        - tools
      properties:
        server_url:
          type: string
          format: uri
          example: 'http://localhost:9090/sse'
          description: URL of the MCP server
        status:
          type: string
          enum: ['success', 'error']
          example: 'success'
          description: Status of the tools retrieval operation
        message:
          type: string
          example: 'Successfully retrieved 2 tools'
          description: Success message or clean error message
        last_checked:
          type: integer
          format: int64
          example: 1755721435
          description: Unix timestamp when the tools were last checked
        server_info:
          $ref: '#/components/schemas/MCPServerInfo'
          description: Nested server information including name, version, and protocol version
        tools_count:
          type: integer
          example: 2
          description: Number of available tools (only present on successful connection)
        tools:
          type: array
          items:
            $ref: '#/components/schemas/MCPTool'
          description: List of tools (empty array on error)
        error_details:
          $ref: '#/components/schemas/MCPErrorDetails'
          description: Structured error information (only present when status is 'error')

    MCPListData:
      type: object
      required:
        - servers
        - total_count
        - config_map_info
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/MCPServerSummary'
          description: Array of MCP server summaries for frontend table display
        total_count:
          type: integer
          example: 2
          description: Total number of MCP servers in the ConfigMap
        config_map_info:
          $ref: '#/components/schemas/MCPConfigMapInfo'
          description: Metadata about the source ConfigMap

    MCPServerSummary:
      type: object
      required:
        - name
        - url
        - transport
        - description
        - status
      properties:
        name:
          type: string
          example: 'brave'
          description: MCP server name (ConfigMap key)
        url:
          type: string
          format: uri
          example: 'http://localhost:9090/sse'
          description: Full URL of the MCP server endpoint
        transport:
          type: string
          enum: ['sse', 'streamable-http']
          example: 'sse'
          description: Transport type used by the MCP server
        description:
          type: string
          example: 'Search the Internet.'
          description: Description of the MCP server functionality
        logo:
          type: string
          format: uri
          nullable: true
          example: 'https://kubernetes.io/images/kubernetes-horizontal-color.png'
          description: Optional logo URL for the MCP server (null if not provided)
        status:
          type: string
          enum: ['healthy', 'error', 'unknown']
          example: 'healthy'
          description: Server status based on ConfigMap data only (no MCP calls made)

    MCPConfigMapInfo:
      type: object
      required:
        - name
        - namespace
        - last_updated
      properties:
        name:
          type: string
          example: 'gen-ai-aa-mcp-servers-e'
          description: Name of the ConfigMap containing MCP server configurations
        namespace:
          type: string
          example: 'mcp-servers'
          description: Kubernetes namespace containing the ConfigMap
        last_updated:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
          description: ISO 8601 timestamp when the ConfigMap was last updated

    MCPServerStatus:
      type: object
      required:
        - name
        - config
        - connection_status
      properties:
        name:
          type: string
          example: 'kubectl-server'
          description: Name/identifier of the MCP server
        config:
          $ref: '#/components/schemas/MCPServerConfigLegacy'
        connection_status:
          $ref: '#/components/schemas/MCPConnectionStatus'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/MCPTool'
          description: Available tools from the MCP server (only present when include_tools=true)

    MCPServerConfigLegacy:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          example: 'http://kubectl-mcp-server.mcp-servers.svc.cluster.local:8080'
          description: URL endpoint for the MCP server
        description:
          type: string
          example: 'Manage resources in a Kubernetes cluster'
          description: Human-readable description of the MCP server's capabilities
        logo:
          type: string
          example: 'https://kubernetes.io/images/kubernetes-horizontal-color.png'
          description: Optional logo URL for the MCP server

    MCPServersStatusData:
      type: array
      items:
        $ref: '#/components/schemas/MCPServerStatus'
      description: Array of MCP server status information

    ConfigMapMetadata:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
          example: 'gen-ai-aa-mcp-servers'
          description: Name of the ConfigMap
        namespace:
          type: string
          example: 'mcp-servers'
          description: Kubernetes namespace containing the ConfigMap
        creationTimestamp:
          type: string
          format: date-time
          nullable: true
          example: '2024-01-15T10:30:00Z'
          description: Timestamp when the ConfigMap was created
        labels:
          type: object
          additionalProperties:
            type: string
          nullable: true
          example:
            app: 'mcp-server-registry'
            version: 'v1.0.0'
          description: Labels applied to the ConfigMap
        annotations:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Annotations applied to the ConfigMap

  responses:
    HealthCheckResponse:
      description: BFF service health status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthCheckModel'

    ModelsResponse:
      description: List of available AI models
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/ModelsData'

    VectorStoresResponse:
      description: List of vector stores with pagination support
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/VectorStoresData'

    VectorStoreResponse:
      description: Created vector store
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/VectorStore'

    FileUploadResponse:
      description: File upload and vector store addition result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/FileUploadResult'
            example:
              data:
                file_id: 'file-abc123def456'
                vector_store_file:
                  id: 'vsf-def789ghi012'
                  vector_store_id: 'vs_abc123'
                  status: 'completed'

    CodeExportResponse:
      description: Generated Python code for Llama Stack integration
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/CodeExportData'
            example:
              data:
                code: |
                  # Llama Stack Quickstart Script
                  # Generated Python code for Llama Stack integration
                  # ... rest of the Python code

    NamespacesResponse:
      description: List of Kubernetes namespaces
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/NamespacesData'
            example:
              data:
                - name: 'default'
                  displayName: 'default'
                - name: 'kube-system'
                  displayName: 'kube-system'
                - name: 'llama-stack'
                  displayName: 'llama-stack'
                - name: 'test-namespace'
                  displayName: null

    LlamaStackDistributionStatusResponse:
      description: LlamaStack Distribution status information
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/LlamaStackDistributionModel'
                nullable: true
            example:
              data:
                name: 'test-lsd'
                phase: 'Ready'
                version: 'v0.2.0'
                distributionConfig:
                  activeDistribution: 'ollama'
                  availableDistributions:
                    ollama: 'docker.io/llamastack/distribution-ollama:latest'
                    bedrock: 'docker.io/llamastack/distribution-bedrock:latest'
                  providers:
                    - api: 'mock-api'
                      provider_id: 'mock-provider'
                      provider_type: 'mock-type'
                      config: null
                      health:
                        status: 'healthy'
                        message: 'Provider is responding normally'
                        
    LlamaStackDistributionInstallResponse:
      description: LlamaStack Distribution installation result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: "#/components/schemas/LlamaStackDistributionInstallModel"
                nullable: true
            example:
              data:
                name: "lsd-genai-playground"
                httpStatus: "200"
            examples:
              installation_success:
                summary: Successful installation
                value:
                  data:
                    name: "lsd-genai-playground"
                    httpStatus: "200"
              installation_error:
                summary: Installation failed
                value:
                  data: null

    MCPToolsResponse:
      description: Comprehensive tools information from MCP server specified by URL
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/MCPToolsStatus'
                description: Comprehensive status and tools information from the MCP server
          examples:
            success_response:
              summary: Successful Tools Retrieval
              value:
                data:
                  server_url: 'http://localhost:9090/sse'
                  status: 'success'
                  message: 'Successfully retrieved 2 tools'
                  last_checked: 1755721435
                  server_info:
                    name: 'brave'
                    version: '1.0.0'
                    protocol_version: '2024-11-05'
                  tools_count: 2
                  tools:
                    - name: 'brave_web_search'
                      description: 'Search the web using Brave Search API'
                      input_schema:
                        type: 'object'
                        properties:
                          query:
                            type: 'string'
                            description: 'Search query string'
                          count:
                            type: 'integer'
                            description: 'Number of results to return (1-20)'
                            default: 10
                        required: ['query']
                    - name: 'brave_local_search'
                      description: 'Search for local businesses using Brave Local Search API'
                      input_schema:
                        type: 'object'
                        properties:
                          query:
                            type: 'string'
                            description: "Local search query (e.g. 'pizza near Central Park')"
                          count:
                            type: 'integer'
                            description: 'Number of results to return (1-20)'
                            default: 5
                        required: ['query']
            connection_error:
              summary: Connection Error
              value:
                data:
                  server_url: 'http://localhost:9090/sse'
                  status: 'error'
                  message: 'Server is not reachable'
                  last_checked: 1755721435
                  server_info:
                    name: 'brave'
                    version: 'N/A'
                    protocol_version: ''
                  tools: []
                  error_details:
                    code: 'connection_error'
                    status_code: 503
                    raw_error: 'failed to create SSE transport: dial tcp: connection refused'
            authentication_failure:
              summary: Authentication Failed
              value:
                data:
                  server_url: 'http://localhost:7008/api/mcp-actions/v1/sse'
                  status: 'error'
                  message: 'Authentication failed'
                  last_checked: 1755721435
                  server_info:
                    name: 'brave'
                    version: 'N/A'
                    protocol_version: ''
                  tools: []
                  error_details:
                    code: 'unauthorized'
                    status_code: 401
                    raw_error: 'failed to connect to MCP server: HTTP 401: invalid bearer token'

    MCPStatusResponse:
      description: Connection status from MCP server specified by URL
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/MCPConnectionStatus'
                description: Connection status information for the MCP server
          examples:
            successful_connection:
              summary: Successful Connection
              value:
                data:
                  server_url: 'http://localhost:9090/sse'
                  status: 'connected'
                  message: 'Connection successful'
                  last_checked: 1757090417
                  server_info:
                    name: 'example-servers/brave-search'
                    version: '0.1.0'
                    protocol_version: '2025-06-18'
                  ping_response_time_ms: 2444
            server_unavailable:
              summary: Server Unavailable
              value:
                data:
                  server_url: 'http://localhost:9090/sse'
                  status: 'error'
                  message: 'Server is not reachable'
                  last_checked: 1757090515
                  server_info:
                    name: 'brave'
                    version: 'N/A'
                    protocol_version: ''
                  error_details:
                    code: 'CONNECTION_FAILED'
                    status_code: 503
                    raw_error: 'failed to connect to MCP server: Get "http://localhost:9090/sse": dial tcp [::1]:9090: connect: connection refused'
            authentication_failure:
              summary: Authentication Failed
              value:
                data:
                  server_url: 'http://localhost:7008/api/mcp-actions/v1/sse'
                  status: 'error'
                  message: 'Authentication failed'
                  last_checked: 1757090647
                  server_info:
                    name: 'brave'
                    version: 'N/A'
                    protocol_version: ''
                  error_details:
                    code: 'unauthorized'
                    status_code: 401
                    raw_error: "failed to connect to MCP server: Get \"http://localhost:7008/api/mcp-actions/v1/sse\": HTTP 401: {\n  \"error\": {\n    \"name\": \"AuthenticationError\",\n    \"message\": \"Illegal token\",\n    \"stack\": \"AuthenticationError: Illegal token\\n    at DefaultAuthService.authenticate (/Users/akundu/Desktop/DeveloperHub/learning-projects/my-portal/node_modules/@backstage/backend-defaults/src/entrypoints/auth/DefaultAuthService.ts:102:11)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n    at async DefaultHttpAuthService.#extractCredentialsFromRequest (/Users/akundu/Desktop/DeveloperHub/learning-projects/my-portal/node_modules/@backstage/backend-defaults/src/entrypoints/httpAuth/httpAuthServiceFactory.ts:124:12)\\n    at async DefaultHttpAuthService.credentials (/Users/akundu/Desktop/DeveloperHub/learning-projects/my-portal/node_modules/@backstage/backend-defaults/src/entrypoints/httpAuth/httpAuthServiceFactory.ts:167:9)\"\n  },\n  \"request\": {\n    \"method\": \"GET\",\n    \"url\": \"/v1/sse\"\n  },\n  \"response\": {\n    \"statusCode\": 401\n  }\n}"

    MCPServersListResponse:
      description: Enhanced list of available MCP servers from ConfigMap with metadata
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/MCPListData'
                description: Enhanced MCP servers list with metadata
          examples:
            success_response:
              summary: Successful MCP Servers List
              value:
                data:
                  servers:
                    - name: 'brave'
                      url: 'http://localhost:9090/sse'
                      transport: 'sse'
                      description: 'Search the Internet.'
                      logo: null
                      status: 'healthy'
                    - name: 'kubernetes'
                      url: 'http://localhost:9091/mcp'
                      transport: 'streamable-http'
                      description: 'Manage resources in a Kubernetes cluster.'
                      logo: 'https://kubernetes.io/_common-resources/images/flower.svg'
                      status: 'healthy'
                  total_count: 2
                  config_map_info:
                    name: 'gen-ai-aa-mcp-servers-e'
                    namespace: 'mcp-servers'
                    last_updated: '2024-01-15T10:30:00Z'
            empty_response:
              summary: Empty ConfigMap
              value:
                data:
                  servers: []
                  total_count: 0
                  config_map_info:
                    name: 'gen-ai-aa-mcp-servers-e'
                    namespace: 'mcp-servers'
                    last_updated: '2024-01-15T10:30:00Z'

    CreateResponseResponse:
      description: Created AI response with clean LlamaStack structure
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/ResponseData'
            example:
              data:
                id: 'resp-428905e3-56fb-4a9c-9bd6-ad920a8dade2'
                model: 'ollama/llama3.2:3b'
                status: 'completed'
                created_at: 1757425282.0
                output:
                  - id: 'msg_a04d9524-4cea-4688-bc24-07a36d9339a2'
                    type: 'message'
                    role: 'assistant'
                    status: 'completed'
                    content:
                      - type: 'output_text'
                        text: "I'm just a language model, so I don't have feelings or emotions like humans do, but thank you for asking! How can I assist you today?"

    StreamingResponse:
      description: >-
        Server-Sent Events (SSE) stream for real-time AI response generation.
        Each event contains a JSON object with streaming data including token deltas, completion events, and metadata.
        When RAG (vector stores) are used, file search tool calls appear as separate events in the stream.
        Stream format follows LlamaStack SSE specification with 'data:' prefix for each event.
      content:
        text/event-stream:
          schema:
            type: string
            format: binary
            description: >-
              SSE stream with clean events that match the non-streaming response format:
              - response.created: Initial response with clean structure (id, model, status, created_at)
              - response.content_part.added: New content part started
              - response.output_text.delta: Individual token streaming with delta text
              - response.content_part.done: Content part completion
              - response.completed: Final clean response with complete output array (messages, file searches)
              All events use the same ResponseData structure as non-streaming responses.
          example: |
            data: {"delta":"","sequence_number":0,"type":"response.created","item_id":"","output_index":0,"response":{"id":"resp-689b63a7-9cfa-418d-ace4-d9ed1dd2e27c","model":"ollama/llama3.2:3b","status":"in_progress","created_at":1757424451}}

            data: {"delta":"","sequence_number":1,"type":"response.content_part.added","item_id":"msg_a32fd412-6efb-4621-a378-791b2a39ccc2","output_index":0}

            data: {"delta":"Hello","sequence_number":2,"type":"response.output_text.delta","item_id":"msg_a32fd412-6efb-4621-a378-791b2a39ccc2","output_index":0}

            data: {"delta":"","sequence_number":3,"type":"response.content_part.done","item_id":"msg_a32fd412-6efb-4621-a378-791b2a39ccc2","output_index":0}

            data: {"delta":"","sequence_number":0,"type":"response.completed","item_id":"","output_index":0,"response":{"id":"resp-689b63a7-9cfa-418d-ace4-d9ed1dd2e27c","model":"ollama/llama3.2:3b","status":"completed","created_at":1757424451,"output":[{"id":"msg_bc738425-4c4b-4caf-86a7-c307765cecbd","type":"message","role":"assistant","status":"completed","content":[{"type":"output_text","text":"Hello there"}]}]}}

    BadRequest:
      description: Bad Request - Invalid parameters, missing required fields, or malformed MCP Bearer token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            malformed_mcp_token:
              summary: Malformed MCP Bearer Token
              value:
                error:
                  code: '400'
                  message: "malformed MCP token: expected X-MCP-Bearer header to start with 'Bearer '"
            missing_parameter:
              summary: Missing Required Parameter
              value:
                error:
                  code: '400'
                  message: 'missing required query parameter: namespace'

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'

    NotFound:
      description: Not Found - Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'

    InternalServerError:
      description: Internal Server Error - Server encountered an unexpected condition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'

    UserResponse:
      description: Current user information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserModel'
          example:
            userId: 'user@example.com'

tags:
  - name: HealthCheck
    description: BFF service health check operations
  - name: Models
    description: |
      AI model discovery and management
      
      **LlamaStack Models** (`/models`): Queries LlamaStack service for available models
      **AI Assets Models** (`/aa/models`): Queries Kubernetes InferenceServices with GenAI labels
      
      Both endpoints require namespace parameter for proper multi-tenant isolation.
  - name: VectorStores
    description: |
      Vector store management for RAG functionality
      
      Requires namespace parameter. Uses namespace-specific LlamaStack service discovery.
  - name: Files
    description: |
      File upload and vector store integration
      
      Requires namespace parameter. Uses namespace-specific LlamaStack service discovery.
  - name: Responses
    description: |
      AI response generation with comprehensive parameter support
      
      Requires namespace parameter. Uses namespace-specific LlamaStack service discovery.
  - name: CodeExporter
    description: |
      Code generation for Llama Stack integration
      
      Requires namespace parameter. Generates code templates for client configuration.
  - name: Kubernetes
    description: Kubernetes cluster operations and namespace management
  - name: Identity
    description: User identity and authentication operations
  - name: MCP Servers
    description: Model Context Protocol (MCP) server management and tool discovery
