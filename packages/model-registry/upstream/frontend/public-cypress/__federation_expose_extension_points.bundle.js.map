{"version":3,"file":"__federation_expose_extension_points.bundle.js","mappings":"sIAWO,MAAMA,EACXC,GAEmB,kDAAnBA,EAAUC,I,0CCQL,MAAMC,EACXF,GAEmB,8CAAnBA,EAAUC,KAqBCE,EACXH,GAEmB,qDAAnBA,EAAUC,I,2CCtCL,MAAMG,EACXJ,GAEmB,uCAAnBA,EAAUC,KAWCI,EACXL,GAEmB,+BAAnBA,EAAUC,I,mCCnBL,MAAMK,EACXN,GAEmB,8CAAnBA,EAAUC,I,mCCeL,MAAMM,EACXP,GAEmB,gDAAnBA,EAAUC,I,4fCTL,MAAMO,EACXR,GAEmB,6CAAnBA,EAAUC,I","sources":["webpack://model-registry-ui/./src/odh/extension-points/table.ts","webpack://model-registry-ui/./src/odh/extension-points/deploy.ts","webpack://model-registry-ui/./src/odh/extension-points/details.ts","webpack://model-registry-ui/./src/odh/extension-points/detailsCard.ts","webpack://model-registry-ui/./src/odh/extension-points/connection.ts","webpack://model-registry-ui/./src/odh/extension-points/model-catalog-deploy.ts"],"sourcesContent":["import type { Extension } from '@openshift/dynamic-plugin-sdk';\nimport type { ComponentCodeRef } from '@odh-dashboard/plugin-core';\nimport type { RegisteredModel } from '~/app/types';\n\nexport type ModelRegistryTableColumnExtension = Extension<\n  'model-registry.registered-models/table-column',\n  {\n    component: ComponentCodeRef<{ registeredModel: RegisteredModel }>;\n  }\n>;\n\nexport const isModelRegistryTableColumnExtension = (\n  extension: Extension,\n): extension is ModelRegistryTableColumnExtension =>\n  extension.type === 'model-registry.registered-models/table-column';\n","import { ProjectKind } from '@odh-dashboard/internal/k8sTypes.js';\nimport type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type { ModelDeployPrefillInfo } from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\n\nexport type ModelRegistryDeployModalExtension = Extension<\n  'model-registry.model-version/deploy-modal',\n  {\n    useAvailablePlatformIds: CodeRef<() => string[]>;\n    modalComponent: CodeRef<\n      React.ComponentType<{\n        modelDeployPrefill: {\n          data: ModelDeployPrefillInfo;\n          loaded: boolean;\n          error: Error | undefined;\n        };\n        onSubmit: () => void;\n        onClose: () => void;\n      }>\n    >;\n  }\n>;\n\nexport const isModelRegistryDeployModalExtension = (\n  extension: Extension,\n): extension is ModelRegistryDeployModalExtension =>\n  extension.type === 'model-registry.model-version/deploy-modal';\n\nexport type ModelRegistryVersionDeploymentsContextExtension = Extension<\n  'model-registry.model-version/deployments-context',\n  {\n    DeploymentsProvider: CodeRef<\n      React.ComponentType<{\n        children: ({\n          deployments,\n          loaded,\n        }: {\n          deployments?: any[];\n          loaded: boolean;\n        }) => React.ReactNode;\n        labelSelectors?: { [key: string]: string };\n        mrName?: string;\n      }>\n    >;\n  }\n>;\n\nexport const isModelRegistryVersionDeploymentsContextExtension = (\n  extension: Extension,\n): extension is ModelRegistryVersionDeploymentsContextExtension =>\n  extension.type === 'model-registry.model-version/deployments-context';","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\n\nexport type ModelRegistryVersionDetailsTabExtension = Extension<\n  'model-registry.version-details/tab',\n  {\n    id: string;\n    title: string;\n    component: CodeRef<React.ComponentType<{ rmId?: string; mvId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelRegistryVersionDetailsTabExtension = (\n  extension: Extension,\n): extension is ModelRegistryVersionDetailsTabExtension =>\n  extension.type === 'model-registry.version-details/tab';\n\nexport type ModelRegistryDetailsTabExtension = Extension<\n  'model-registry.details/tab',\n  {\n    id: string;\n    title: string;\n    component: CodeRef<React.ComponentType<{ rmId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelRegistryDetailsTabExtension = (\n  extension: Extension,\n): extension is ModelRegistryDetailsTabExtension =>\n  extension.type === 'model-registry.details/tab';\n","import type { CodeRef, Extension } from '@openshift/dynamic-plugin-sdk';\n\nexport type ModelDetailsDeploymentCardExtension = Extension<\n  'model-registry.model-details/details-card',\n  {\n    component: CodeRef<React.ComponentType<{ rmId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelDetailsDeploymentCardExtension = (\n  extension: Extension,\n): extension is ModelDetailsDeploymentCardExtension =>\n  extension.type === 'model-registry.model-details/details-card';\n","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type {\n  ModelLocationType,\n  RegistrationCommonFormData,\n} from '~/app/pages/modelRegistry/screens/RegisterModel/useRegisterModelData';\n\nexport type AutofillConnectionButtonExtension = Extension<\n  'model-registry.register/autofill-connection',\n  {\n    component: CodeRef<{\n      default: React.ComponentType<{\n        modelLocationType: ModelLocationType;\n        setData: (\n          propKey: keyof Pick<\n            RegistrationCommonFormData,\n            | 'modelLocationEndpoint'\n            | 'modelLocationBucket'\n            | 'modelLocationRegion'\n            | 'modelLocationURI'\n          >,\n          propValue: string,\n        ) => void;\n      }>;\n    }>;\n  }\n>;\n\nexport const isAutofillConnectionButtonExtension = (\n  extension: Extension,\n): extension is AutofillConnectionButtonExtension =>\n  extension.type === 'model-registry.register/autofill-connection';\n","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type { ModelDeployPrefillInfo } from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\n\nexport type ModelCatalogDeployModalExtension = Extension<\n  'model-catalog.model-details/deploy-modal',\n  {\n    useAvailablePlatformIds: CodeRef<() => string[]>;\n    modalComponent: CodeRef<\n      React.ComponentType<{\n        modelDeployPrefill: {\n          data: ModelDeployPrefillInfo;\n          loaded: boolean;\n          error: Error | undefined;\n        };\n        onSubmit: () => void;\n        onClose: () => void;\n      }>\n    >;\n  }\n>;\n\nexport const isModelCatalogDeployModalExtension = (\n  extension: Extension,\n): extension is ModelCatalogDeployModalExtension =>\n  extension.type === 'model-catalog.model-details/deploy-modal';\n"],"names":["isModelRegistryTableColumnExtension","extension","type","isModelRegistryDeployModalExtension","isModelRegistryVersionDeploymentsContextExtension","isModelRegistryVersionDetailsTabExtension","isModelRegistryDetailsTabExtension","isModelDetailsDeploymentCardExtension","isAutofillConnectionButtonExtension","isModelCatalogDeployModalExtension"],"sourceRoot":""}