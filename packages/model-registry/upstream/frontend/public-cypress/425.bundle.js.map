{"version":3,"file":"425.bundle.js","mappings":"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","sources":["webpack://model-registry-ui/./src/app/hooks/useModelVersions.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelRegistrySelectorNavigator.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/EmptyModelRegistryState.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/const.ts","webpack://model-registry-ui/./src/app/shared/components/FilterToolbar.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelsTableColumns.ts","webpack://model-registry-ui/./src/app/hooks/useNotification.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ArchiveRegisteredModelModal.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ModelLabels.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/RestoreRegisteredModel.tsx","webpack://model-registry-ui/./src/odh/components/ExtendedRegisteredModelTableRow.tsx","webpack://model-registry-ui/./src/odh/components/ExtendedRegisteredModelTable.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelsTableToolbar.tsx","webpack://model-registry-ui/./src/odh/components/ExtendedRegisteredModelListView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelRegistry.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/InvalidModelRegistry.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/ModelRegistryCoreLoader.tsx","webpack://model-registry-ui/./src/app/hooks/useModelArtifactsByVersionId.ts","webpack://model-registry-ui/./src/app/hooks/useRegisteredModelById.ts","webpack://model-registry-ui/./src/odh/hooks/useRegisteredModelDeployPrefillInfo.ts","webpack://model-registry-ui/./src/odh/components/MRDeployFormDataLoader.tsx","webpack://model-registry-ui/./src/odh/components/DeployModalExtension.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelTableRow.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModelsArchive/RegisteredModelsArchiveTable.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModelsArchive/RegisteredModelsArchiveListView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModelsArchive/RegisteredModelsArchive.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/const.ts","webpack://model-registry-ui/./src/app/hooks/useModelVersionsByRegisteredModel.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsHeaderActions.tsx","webpack://model-registry-ui/./src/app/hooks/useDeletePropertiesModalAvailability.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/DeletePropertiesModal.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ModelPropertiesTableRow.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ModelPropertiesExpandableSection.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelDetailsCard.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ViewAllVersionsButton.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsCard.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelDetailsView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ArchiveModelVersionModal.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/RestoreModelVersionModal.tsx","webpack://model-registry-ui/./src/odh/components/MRVersionRowActionColumns.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableRow.tsx","webpack://model-registry-ui/./src/odh/hooks/useDeploymentsState.tsx","webpack://model-registry-ui/./src/odh/k8sTypes.ts","webpack://model-registry-ui/./src/odh/components/MRDeploymentsContextProvider.tsx","webpack://model-registry-ui/./src/odh/components/OdhModelVersionsTable.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableColumns.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTable.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionListView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTabs.tsx","webpack://model-registry-ui/./src/odh/components/OdhModelVersions.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionDetails/const.ts","webpack://model-registry-ui/./src/app/hooks/useModelVersionById.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionSelector.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelPropertiesDescriptionListGroup.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ModelVersionRegisteredFromLink.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsTabs.tsx","webpack://model-registry-ui/./src/odh/utils/deploymentUtils.ts","webpack://model-registry-ui/./src/odh/components/ArchiveButtonDropdownItem.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsHeaderActions.tsx","webpack://model-registry-ui/./src/odh/components/MRDeployButton.tsx","webpack://model-registry-ui/./src/odh/components/OdhModelVersionDetails.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionsArchiveTable.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionsArchiveListView.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionsArchive.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionArchiveDetailsBreadcrumb.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionArchiveDetails.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ArchiveModelVersionDetailsBreadcrumb.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelVersionsArchive/ArchiveModelVersionDetails.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModelsArchive/RegisteredModelArchiveDetailsBreadcrumb.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisteredModelsArchive/RegisteredModelArchiveDetails.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/PrefilledModelRegistryField.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegisterModel.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegisteredModelSelector.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegisterVersion.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/usePrefillRegisterVersionFields.ts","webpack://model-registry-ui/./src/odh/VersionDetailsTabExtensionRoutes.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/ModelRegistryRoutes.tsx","webpack://model-registry-ui/./src/odh/DetailsTabExtensionRoutes.tsx","webpack://model-registry-ui/./src/odh/extension-points/table.ts","webpack://model-registry-ui/./src/odh/extension-points/deploy.ts","webpack://model-registry-ui/./src/odh/extension-points/details.ts","webpack://model-registry-ui/./src/odh/extension-points/detailsCard.ts"],"sourcesContent":["import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise } from 'mod-arch-core';\nimport { ModelVersionList } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useModelVersions = (): FetchState<ModelVersionList> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n  const callback = React.useCallback<FetchStateCallbackPromise<ModelVersionList>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      return api.listModelVersions(opts).then((r) => r);\n    },\n    [api, apiAvailable],\n  );\n  return useFetchState(\n    callback,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    { initialPromisePurity: true },\n  );\n};\n\nexport default useModelVersions;\n","import * as React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ModelRegistrySelector from './ModelRegistrySelector';\n\ntype ModelRegistrySelectorNavigatorProps = {\n  getRedirectPath: (namespace: string) => string;\n} & Omit<React.ComponentProps<typeof ModelRegistrySelector>, 'onSelection' | 'modelRegistry'>;\n\nconst ModelRegistrySelectorNavigator: React.FC<ModelRegistrySelectorNavigatorProps> = ({\n  getRedirectPath,\n  ...modelRegistrySelectorProps\n}) => {\n  const navigate = useNavigate();\n  const { modelRegistry: currentModelRegistry } = useParams<{ modelRegistry: string }>();\n\n  return (\n    <ModelRegistrySelector\n      {...modelRegistrySelectorProps}\n      onSelection={(modelRegistryName) => {\n        if (modelRegistryName !== currentModelRegistry) {\n          navigate(getRedirectPath(modelRegistryName));\n        }\n      }}\n      modelRegistry={currentModelRegistry ?? ''}\n    />\n  );\n};\n\nexport default ModelRegistrySelectorNavigator;\n","import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyModelRegistryStateType = {\n  testid?: string;\n  title: string;\n  description: string;\n  primaryActionText?: string;\n  primaryActionOnClick?: () => void;\n  secondaryActionText?: string;\n  secondaryActionOnClick?: () => void;\n  headerIcon?: React.ComponentType;\n  customAction?: React.ReactNode;\n};\n\nconst EmptyModelRegistryState: React.FC<EmptyModelRegistryStateType> = ({\n  testid,\n  title,\n  description,\n  primaryActionText,\n  secondaryActionText,\n  primaryActionOnClick,\n  secondaryActionOnClick,\n  headerIcon,\n  customAction,\n}) => (\n  <EmptyState\n    icon={headerIcon ?? PlusCircleIcon}\n    titleText={title}\n    variant={EmptyStateVariant.sm}\n    data-testid={testid}\n  >\n    <EmptyStateBody>{description}</EmptyStateBody>\n    <EmptyStateFooter>\n      {primaryActionText && (\n        <EmptyStateActions>\n          <Button\n            data-testid=\"empty-model-registry-primary-action\"\n            variant={ButtonVariant.primary}\n            onClick={primaryActionOnClick}\n          >\n            {primaryActionText}\n          </Button>\n        </EmptyStateActions>\n      )}\n\n      {secondaryActionText && (\n        <EmptyStateActions>\n          <Button\n            data-testid=\"empty-model-registry-secondary-action\"\n            variant=\"link\"\n            onClick={secondaryActionOnClick}\n          >\n            {secondaryActionText}\n          </Button>\n        </EmptyStateActions>\n      )}\n\n      {customAction && <EmptyStateActions>{customAction}</EmptyStateActions>}\n    </EmptyStateFooter>\n  </EmptyState>\n);\n\nexport default EmptyModelRegistryState;\n","export enum ModelRegistryFilterOptions {\n  keyword = 'Keyword',\n  owner = 'Owner',\n}\n\nexport const modelRegistryFilterOptions = {\n  [ModelRegistryFilterOptions.keyword]: 'Keyword',\n  [ModelRegistryFilterOptions.owner]: 'Owner',\n};\n\nexport type ModelRegistryFilterDataType = Record<ModelRegistryFilterOptions, string | undefined>;\n\nexport const initialModelRegistryFilterData: ModelRegistryFilterDataType = {\n  [ModelRegistryFilterOptions.keyword]: '',\n  [ModelRegistryFilterOptions.owner]: '',\n};\n\nexport enum ModelRegistryVersionsFilterOptions {\n  keyword = 'Keyword',\n  author = 'Author',\n}\n\nexport const modelRegistryVersionsFilterOptions = {\n  [ModelRegistryVersionsFilterOptions.keyword]: 'Keyword',\n  [ModelRegistryVersionsFilterOptions.author]: 'Author',\n};\n\nexport type ModelRegistryVersionsFilterDataType = Record<\n  ModelRegistryVersionsFilterOptions,\n  string | undefined\n>;\n\nexport const initialModelRegistryVersionsFilterData: ModelRegistryVersionsFilterDataType = {\n  [ModelRegistryVersionsFilterOptions.keyword]: '',\n  [ModelRegistryVersionsFilterOptions.author]: '',\n};\n","import * as React from 'react';\nimport {\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Dropdown,\n  DropdownItem,\n  MenuToggle,\n  DropdownList,\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\ntype FilterOptionRenders = {\n  onChange: (value?: string, label?: string) => void;\n  value?: string;\n  label?: string;\n};\n\nexport type ToolbarFilterProps<T extends string> = React.ComponentProps<typeof ToolbarGroup> & {\n  children?: React.ReactNode;\n  filterOptions: { [key in T]?: string };\n  filterOptionRenders: Record<T, (props: FilterOptionRenders) => React.ReactNode>;\n  filterData: Record<T, string | { label: string; value: string } | undefined>;\n  onFilterUpdate: (filterType: T, value?: string | { label: string; value: string }) => void;\n  testId?: string;\n};\n\nfunction FilterToolbar<T extends string>({\n  filterOptions,\n  filterOptionRenders,\n  filterData,\n  onFilterUpdate,\n  children,\n  testId = 'filter-toolbar',\n  ...toolbarGroupProps\n}: ToolbarFilterProps<T>): React.JSX.Element {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  const keys = Object.keys(filterOptions) as Array<T>;\n  const [open, setOpen] = React.useState(false);\n  const [currentFilterType, setCurrentFilterType] = React.useState<T>(keys[0]);\n  const filterItem = filterData[currentFilterType];\n\n  return (\n    <>\n      <ToolbarToggleGroup breakpoint=\"md\" toggleIcon={<FilterIcon />}>\n        <ToolbarGroup variant=\"filter-group\" data-testid={testId} {...toolbarGroupProps}>\n          <ToolbarItem>\n            <Dropdown\n              onOpenChange={(isOpenChange) => setOpen(isOpenChange)}\n              shouldFocusToggleOnSelect\n              toggle={(toggleRef) => (\n                <MenuToggle\n                  data-testid={`${testId}-dropdown`}\n                  id={`${testId}-toggle-button`}\n                  ref={toggleRef}\n                  aria-label=\"Filter toggle\"\n                  onClick={() => setOpen(!open)}\n                  isExpanded={open}\n                  icon={<FilterIcon />}\n                >\n                  {filterOptions[currentFilterType]}\n                </MenuToggle>\n              )}\n              isOpen={open}\n              popperProps={{ appendTo: 'inline' }}\n            >\n              <DropdownList>\n                {keys.map((filterKey) => (\n                  <DropdownItem\n                    key={filterKey}\n                    id={filterKey}\n                    onClick={() => {\n                      setOpen(false);\n                      setCurrentFilterType(filterKey);\n                    }}\n                  >\n                    {filterOptions[filterKey]}\n                  </DropdownItem>\n                ))}\n              </DropdownList>\n            </Dropdown>\n          </ToolbarItem>\n          {keys.map((filterKey) => {\n            const optionValue = filterOptions[filterKey];\n            const data = filterData[filterKey];\n            const dataValue: { label: string; value: string } | undefined =\n              typeof data === 'string' ? { label: data, value: data } : data;\n            return optionValue ? (\n              <ToolbarFilter\n                key={filterKey}\n                categoryName={optionValue}\n                data-testid={`${testId}-text-field`}\n                labels={\n                  data && dataValue\n                    ? [\n                        {\n                          key: filterKey,\n                          node: (\n                            <span data-testid={`${filterKey}-filter-chip`}>{dataValue.label}</span>\n                          ),\n                        },\n                      ]\n                    : []\n                }\n                deleteLabel={() => {\n                  onFilterUpdate(filterKey, '');\n                }}\n                showToolbarItem={currentFilterType === filterKey}\n              >\n                {filterOptionRenders[filterKey]({\n                  onChange: (value, label) =>\n                    onFilterUpdate(filterKey, label && value ? { label, value } : value),\n                  ...(typeof filterItem === 'string' ? { value: filterItem } : filterItem),\n                })}\n              </ToolbarFilter>\n            ) : null;\n          })}\n        </ToolbarGroup>\n      </ToolbarToggleGroup>\n      {children}\n    </>\n  );\n}\n\nexport default FilterToolbar;\n","import { SortableData } from 'mod-arch-shared';\nimport { RegisteredModel } from '~/app/types';\n\nexport const rmColumns: SortableData<RegisteredModel>[] = [\n  {\n    field: 'model name',\n    label: 'Model name',\n    sortable: (a, b) => a.name.localeCompare(b.name),\n    width: 35,\n  },\n  {\n    field: 'latest version',\n    label: 'Latest version',\n    sortable: false,\n    width: 15,\n  },\n  {\n    field: 'labels',\n    label: 'Labels',\n    sortable: false,\n    width: 35,\n  },\n  {\n    field: 'last_modified',\n    label: 'Last modified',\n    sortable: (a: RegisteredModel, b: RegisteredModel): number => {\n      const first = parseInt(a.lastUpdateTimeSinceEpoch);\n      const second = parseInt(b.lastUpdateTimeSinceEpoch);\n      return new Date(second).getTime() - new Date(first).getTime();\n    },\n  },\n  {\n    field: 'owner',\n    label: 'Owner',\n    sortable: true,\n    info: {\n      popover: 'The owner is the user who registered the model.',\n      popoverProps: {\n        position: 'left',\n      },\n    },\n  },\n  {\n    field: 'kebab',\n    label: '',\n    sortable: false,\n  },\n];\n","import React, { useContext } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { NotificationContext, NotificationActionTypes } from 'mod-arch-core';\n\nenum NotificationTypes {\n  SUCCESS = 'success',\n  ERROR = 'error',\n  INFO = 'info',\n  WARNING = 'warning',\n}\n\ntype NotificationProps = (title: string, message?: React.ReactNode) => void;\n\ntype NotificationRemoveProps = (id: number | undefined) => void;\n\ntype NotificationTypeFunc = {\n  [key in NotificationTypes]: NotificationProps;\n};\n\ninterface NotificationFunc extends NotificationTypeFunc {\n  remove: NotificationRemoveProps;\n}\n\nexport const useNotification = (): NotificationFunc => {\n  const { notificationCount, updateNotificationCount, dispatch } = useContext(NotificationContext);\n\n  const success: NotificationProps = React.useCallback(\n    (title, message?) => {\n      updateNotificationCount(notificationCount + 1);\n      dispatch({\n        type: NotificationActionTypes.ADD_NOTIFICATION,\n        payload: {\n          status: AlertVariant.success,\n          title,\n          timestamp: new Date(),\n          message,\n          id: notificationCount,\n        },\n      });\n    },\n    [dispatch, notificationCount, updateNotificationCount],\n  );\n\n  const warning: NotificationProps = React.useCallback(\n    (title, message?) => {\n      updateNotificationCount(notificationCount + 1);\n      dispatch({\n        type: NotificationActionTypes.ADD_NOTIFICATION,\n        payload: {\n          status: AlertVariant.warning,\n          title,\n          timestamp: new Date(),\n          message,\n          id: notificationCount,\n        },\n      });\n    },\n    [dispatch, notificationCount, updateNotificationCount],\n  );\n\n  const error: NotificationProps = React.useCallback(\n    (title, message?) => {\n      updateNotificationCount(notificationCount + 1);\n      dispatch({\n        type: NotificationActionTypes.ADD_NOTIFICATION,\n        payload: {\n          status: AlertVariant.danger,\n          title,\n          timestamp: new Date(),\n          message,\n          id: notificationCount,\n        },\n      });\n    },\n    [dispatch, notificationCount, updateNotificationCount],\n  );\n\n  const info: NotificationProps = React.useCallback(\n    (title, message?) => {\n      updateNotificationCount(notificationCount + 1);\n      dispatch({\n        type: NotificationActionTypes.ADD_NOTIFICATION,\n        payload: {\n          status: AlertVariant.info,\n          title,\n          timestamp: new Date(),\n          message,\n          id: notificationCount,\n        },\n      });\n    },\n    [dispatch, notificationCount, updateNotificationCount],\n  );\n\n  const remove: NotificationRemoveProps = React.useCallback(\n    (id) => {\n      dispatch({\n        type: NotificationActionTypes.DELETE_NOTIFICATION,\n        payload: { id },\n      });\n    },\n    [dispatch],\n  );\n\n  const notification = React.useMemo(\n    () => ({ success, error, info, warning, remove }),\n    [success, error, info, warning, remove],\n  );\n\n  return notification;\n};\n","import * as React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DashboardModalFooter } from 'mod-arch-shared';\nimport { useNotification } from '~/app/hooks/useNotification';\n\ninterface ArchiveRegisteredModelModalProps {\n  onCancel: () => void;\n  onSubmit: () => void;\n  registeredModelName: string;\n}\n\nexport const ArchiveRegisteredModelModal: React.FC<ArchiveRegisteredModelModalProps> = ({\n  onCancel,\n  onSubmit,\n  registeredModelName,\n}) => {\n  const notification = useNotification();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n  const [confirmInputValue, setConfirmInputValue] = React.useState('');\n  const isDisabled = confirmInputValue.trim() !== registeredModelName || isSubmitting;\n\n  const onClose = React.useCallback(() => {\n    setConfirmInputValue('');\n    onCancel();\n  }, [onCancel]);\n\n  const onConfirm = React.useCallback(async () => {\n    setIsSubmitting(true);\n\n    try {\n      await onSubmit();\n      onClose();\n      notification.success(`${registeredModelName} and all its versions archived.`);\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [onSubmit, onClose, notification, registeredModelName]);\n\n  return (\n    <Modal isOpen variant=\"small\" onClose={onClose} data-testid=\"archive-registered-model-modal\">\n      <ModalHeader title=\"Archive model?\" titleIconVariant=\"warning\" />\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>\n            <b>{registeredModelName}</b> and all of its versions will be archived and unavailable\n            for use unless it is restored.\n          </StackItem>\n          <StackItem>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsSm' }}>\n              <FlexItem>\n                Type <strong>{registeredModelName}</strong> to confirm archiving:\n              </FlexItem>\n              <TextInput\n                id=\"confirm-archive-input\"\n                data-testid=\"confirm-archive-input\"\n                aria-label=\"confirm archive input\"\n                value={confirmInputValue}\n                onChange={(_e, newValue) => setConfirmInputValue(newValue)}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter' && !isDisabled) {\n                    onConfirm();\n                  }\n                }}\n              />\n            </Flex>\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <DashboardModalFooter\n          onCancel={onClose}\n          onSubmit={onConfirm}\n          submitLabel=\"Archive\"\n          isSubmitLoading={isSubmitting}\n          isSubmitDisabled={isDisabled}\n          error={error}\n          alertTitle=\"Error\"\n        />\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import {\n  Button,\n  Label,\n  LabelGroup,\n  Popover,\n  SearchInput,\n  Content,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Modal,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { useDebounceCallback } from 'mod-arch-shared';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { getLabels } from '~/app/pages/modelRegistry/screens/utils';\n\n// Threshold count to decide whether to choose modal or popover\nconst MODAL_THRESHOLD = 4;\n\ntype ModelLabelsProps = {\n  name: string;\n  customProperties: RegisteredModel['customProperties'] | ModelVersion['customProperties'];\n};\n\nconst ModelLabels: React.FC<ModelLabelsProps> = ({ name, customProperties }) => {\n  const [isLabelModalOpen, setIsLabelModalOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const allLabels = getLabels(customProperties);\n  const filteredLabels = allLabels.filter(\n    (label) => label && label.toLowerCase().includes(searchValue.toLowerCase()),\n  );\n\n  const doSetSearchDebounced = useDebounceCallback(setSearchValue);\n\n  const labelsComponent = (labels: string[], textMaxWidth?: string) =>\n    labels.map((label, index) => (\n      <Label\n        variant=\"outline\"\n        data-testid=\"label\"\n        textMaxWidth={textMaxWidth || '40ch'}\n        key={index}\n      >\n        {label}\n      </Label>\n    ));\n\n  const getLabelComponent = (labels: JSX.Element[]) => {\n    const labelCount = labels.length;\n    if (labelCount) {\n      return labelCount > MODAL_THRESHOLD\n        ? getLabelModal(labelCount)\n        : getLabelPopover(labelCount, labels);\n    }\n    return null;\n  };\n\n  const getLabelPopover = (labelCount: number, labels: JSX.Element[]) => (\n    <Popover\n      bodyContent={\n        <LabelGroup data-testid=\"popover-label-group\" numLabels={labelCount}>\n          {labels}\n        </LabelGroup>\n      }\n    >\n      <Label data-testid=\"popover-label-text\" variant=\"overflow\">\n        {labelCount} more\n      </Label>\n    </Popover>\n  );\n\n  const getLabelModal = (labelCount: number) => (\n    <Label\n      data-testid=\"modal-label-text\"\n      variant=\"overflow\"\n      onClick={() => setIsLabelModalOpen(true)}\n    >\n      {labelCount} more\n    </Label>\n  );\n\n  const labelModal = isLabelModalOpen ? (\n    <Modal variant=\"small\" isOpen onClose={() => setIsLabelModalOpen(false)}>\n      <ModalHeader\n        title=\"Labels\"\n        description={\n          <Content component=\"p\">\n            The following are all the labels of <strong>{name}</strong>\n          </Content>\n        }\n      />\n      <ModalBody>\n        <SearchInput\n          aria-label=\"Label modal search\"\n          data-testid=\"label-modal-search\"\n          placeholder=\"Find a label\"\n          value={searchValue}\n          onChange={(_event, value) => doSetSearchDebounced(value)}\n          onClear={() => setSearchValue('')}\n        />\n        <br />\n        <LabelGroup data-testid=\"modal-label-group\" numLabels={allLabels.length}>\n          {labelsComponent(filteredLabels, '50ch')}\n        </LabelGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          data-testid=\"close-modal\"\n          key=\"close\"\n          variant=\"primary\"\n          onClick={() => setIsLabelModalOpen(false)}\n        >\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  ) : null;\n\n  if (Object.keys(customProperties).length === 0) {\n    return '-';\n  }\n\n  return (\n    <>\n      <LabelGroup numLabels={MODAL_THRESHOLD}>\n        {labelsComponent(allLabels.slice(0, 3))}\n        {getLabelComponent(labelsComponent(allLabels.slice(3)))}\n      </LabelGroup>\n      {labelModal}\n    </>\n  );\n};\n\nexport default ModelLabels;\n","import * as React from 'react';\nimport { DashboardModalFooter } from 'mod-arch-shared';\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from '@patternfly/react-core';\nimport { useNotification } from '~/app/hooks/useNotification';\n\ninterface RestoreRegisteredModelModalProps {\n  onCancel: () => void;\n  onSubmit: () => void;\n  registeredModelName: string;\n}\n\nexport const RestoreRegisteredModelModal: React.FC<RestoreRegisteredModelModalProps> = ({\n  onCancel,\n  onSubmit,\n  registeredModelName,\n}) => {\n  const notification = useNotification();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n\n  const onClose = React.useCallback(() => {\n    onCancel();\n  }, [onCancel]);\n\n  const onConfirm = React.useCallback(async () => {\n    setIsSubmitting(true);\n\n    try {\n      await onSubmit();\n      onClose();\n      notification.success(`${registeredModelName} and all its versions restored.`);\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [onSubmit, onClose, notification, registeredModelName]);\n\n  return (\n    <Modal isOpen variant=\"small\" onClose={onClose} data-testid=\"restore-registered-model-modal\">\n      <ModalHeader title=\"Restore model?\" titleIconVariant=\"warning\" />\n      <ModalBody>\n        <b>{registeredModelName}</b> and all of its versions will be restored and returned to the\n        registered models list.\n      </ModalBody>\n      <ModalFooter>\n        <DashboardModalFooter\n          onCancel={onClose}\n          onSubmit={onConfirm}\n          submitLabel=\"Restore\"\n          isSubmitLoading={isSubmitting}\n          error={error}\n          alertTitle=\"Error\"\n          isSubmitDisabled={isSubmitting}\n        />\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import { Button, Content, ContentVariants, FlexItem, Truncate } from '@patternfly/react-core';\nimport { ActionsColumn, IAction, Td, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useExtensions, LazyCodeRefComponent } from '@odh-dashboard/plugin-core';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ArchiveRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/ArchiveRegisteredModelModal';\nimport ModelLabels from '~/app/pages/modelRegistry/screens/components/ModelLabels';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\nimport { RestoreRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/RestoreRegisteredModel';\nimport {\n  archiveModelVersionDetailsUrl,\n  archiveModelVersionListUrl,\n  modelVersionListUrl,\n  modelVersionUrl,\n  registeredModelArchiveDetailsUrl,\n  registeredModelUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { ModelState, ModelVersion, RegisteredModel } from '~/app/types';\nimport { isModelRegistryTableColumnExtension } from '~/odh/extension-points/table';\n\ntype ExtendedRegisteredModelTableRowProps = {\n  registeredModel: RegisteredModel;\n  latestModelVersion: ModelVersion | undefined;\n  isArchiveRow?: boolean;\n  hasDeploys?: boolean;\n  refresh: () => void;\n};\n\nconst ExtendedRegisteredModelTableRow: React.FC<ExtendedRegisteredModelTableRowProps> = ({\n  registeredModel: rm,\n  latestModelVersion,\n  isArchiveRow,\n  hasDeploys = false,\n  refresh,\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [isArchiveModalOpen, setIsArchiveModalOpen] = React.useState(false);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = React.useState(false);\n  const rmUrl = registeredModelUrl(rm.id, preferredModelRegistry?.name);\n\n  const columnExtensions = useExtensions(isModelRegistryTableColumnExtension);\n\n  const actions: IAction[] = [\n    {\n      title: 'Overview',\n      onClick: () => {\n        navigate(\n          isArchiveRow\n            ? registeredModelArchiveDetailsUrl(rm.id, preferredModelRegistry?.name)\n            : rmUrl,\n        );\n      },\n    },\n    {\n      title: 'Versions',\n      onClick: () => {\n        navigate(\n          isArchiveRow\n            ? archiveModelVersionListUrl(rm.id, preferredModelRegistry?.name)\n            : modelVersionListUrl(rm.id, preferredModelRegistry?.name),\n        );\n      },\n    },\n\n    { isSeparator: true },\n    ...(isArchiveRow\n      ? [\n          {\n            title: 'Restore model',\n            onClick: () => setIsRestoreModalOpen(true),\n          },\n        ]\n      : [\n          {\n            title: 'Archive model',\n            onClick: () => {\n                            if (!hasDeploys) {\n                              setIsArchiveModalOpen(true);\n                            }\n                          },\n            isAriaDisabled: hasDeploys,\n            tooltipProps: hasDeploys\n              ? { content: 'Models with deployed versions cannot be archived.' }\n              : undefined,\n          },\n        ]),\n  ];\n\n  const handleModelNameNavigation = (rmId: string) =>\n    isArchiveRow\n      ? navigate(registeredModelArchiveDetailsUrl(rmId, preferredModelRegistry?.name))\n      : navigate(rmUrl);\n\n  const handleVersionNameNavigation = (mv: ModelVersion) =>\n    isArchiveRow\n      ? navigate(\n          archiveModelVersionDetailsUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name),\n        )\n      : navigate(modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name));\n\n  const renderExtensionColumns = () => {\n    if (columnExtensions.length === 0) {\n      return null;\n    }\n\n    return columnExtensions.map((extension, index) => (\n      <Td key={`extension-${index}`}>\n        <LazyCodeRefComponent\n          component={extension.properties.component}\n          props={{ registeredModel: rm }}\n        />\n      </Td>\n    ));\n  };\n\n  return (\n    <Tr>\n      <Td dataLabel=\"Model name\">\n        <div id=\"model-name\" data-testid=\"model-name\">\n          <FlexItem>\n            <Button variant=\"link\" isInline onClick={() => handleModelNameNavigation(rm.id)}>\n              <Truncate content={rm.name} />\n            </Button>\n          </FlexItem>\n        </div>\n        {rm.description && (\n          <Content data-testid=\"description\" component={ContentVariants.small}>\n            <Truncate content={rm.description} />\n          </Content>\n        )}\n      </Td>\n      <Td dataLabel=\"Latest version\">\n        {latestModelVersion ? (\n          <div id=\"latest-version\" data-testid=\"latest-version\">\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => handleVersionNameNavigation(latestModelVersion)}\n              >\n                <Truncate content={latestModelVersion.name} />\n              </Button>\n            </FlexItem>\n          </div>\n        ) : (\n          '-'\n        )}\n      </Td>\n      {renderExtensionColumns()}\n      <Td dataLabel=\"Labels\">\n        <ModelLabels customProperties={rm.customProperties} name={rm.name} />\n      </Td>\n      <Td dataLabel=\"Last modified\">\n        <ModelTimestamp timeSinceEpoch={rm.lastUpdateTimeSinceEpoch} />\n      </Td>\n      <Td dataLabel=\"Owner\">\n        <Content component=\"p\" data-testid=\"registered-model-owner\">\n          {rm.owner || '-'}\n        </Content>\n      </Td>\n      <Td isActionCell>\n        <ActionsColumn items={actions} />\n        {isArchiveModalOpen ? (\n          <ArchiveRegisteredModelModal\n            onCancel={() => setIsArchiveModalOpen(false)}\n            onSubmit={() =>\n              apiState.api\n                .patchRegisteredModel(\n                  {},\n                  {\n                    state: ModelState.ARCHIVED,\n                  },\n                  rm.id,\n                )\n                .then(refresh)\n            }\n            registeredModelName={rm.name}\n          />\n        ) : null}\n        {isRestoreModalOpen ? (\n          <RestoreRegisteredModelModal\n            onCancel={() => setIsRestoreModalOpen(false)}\n            onSubmit={() =>\n              apiState.api\n                .patchRegisteredModel(\n                  {},\n                  {\n                    state: ModelState.LIVE,\n                  },\n                  rm.id,\n                )\n                .then(() => navigate(registeredModelUrl(rm.id, preferredModelRegistry?.name)))\n            }\n            registeredModelName={rm.name}\n          />\n        ) : null}\n      </Td>\n    </Tr>\n  );\n};\n\nexport default ExtendedRegisteredModelTableRow;\n","import * as React from 'react';\nimport { Table, DashboardEmptyTableView } from 'mod-arch-shared';\nimport { useResolvedExtensions } from '@odh-dashboard/plugin-core';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { getLatestVersionForRegisteredModel } from '~/app/pages/modelRegistry/screens/utils';\nimport { rmColumns } from '~/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelsTableColumns';\nimport { isModelRegistryTableColumnExtension } from '~/odh/extension-points/table';\nimport ExtendedRegisteredModelTableRow from './ExtendedRegisteredModelTableRow';\n\ntype ExtendedRegisteredModelTableProps = {\n  clearFilters: () => void;\n  registeredModels: RegisteredModel[];\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n} & Partial<Pick<React.ComponentProps<typeof Table>, 'toolbarContent'>>;\n\nconst ExtendedRegisteredModelTable: React.FC<ExtendedRegisteredModelTableProps> = ({\n  clearFilters,\n  registeredModels,\n  modelVersions,\n  toolbarContent,\n  refresh,\n}) => {\n  const [columnExtensions, columnExtensionsLoaded] = useResolvedExtensions(\n    isModelRegistryTableColumnExtension,\n  );\n\n  const extendedColumns = React.useMemo(() => {\n    const columns = [...rmColumns];\n\n    if (columnExtensionsLoaded && columnExtensions.length > 0) {\n      // Insert placeholder columns for extension components\n      // The actual rendering is handled in ExtendedRegisteredModelTableRow\n      const labelsIndex = columns.findIndex((col) => col.field === 'labels');\n      const insertIndex = labelsIndex >= 0 ? labelsIndex : 2; // Default to index 2 if labels not found\n\n      columnExtensions.forEach((extension, index) => {\n        columns.splice(insertIndex + index, 0, {\n          field: `extension-${index}`,\n          label: 'Deployments',\n          sortable: false,\n        });\n      });\n    }\n\n    return columns;\n  }, [columnExtensions, columnExtensionsLoaded]);\n\n  return (\n    <Table\n      data-testid=\"registered-model-table\"\n      data={registeredModels}\n      columns={extendedColumns}\n      toolbarContent={toolbarContent}\n      defaultSortColumn={2}\n      onClearFilters={clearFilters}\n      enablePagination\n      emptyTableView={<DashboardEmptyTableView onClearFilters={clearFilters} />}\n      rowRenderer={(rm: RegisteredModel) => (\n        <ExtendedRegisteredModelTableRow\n          key={rm.name}\n          hasDeploys={false}\n          registeredModel={rm}\n          latestModelVersion={getLatestVersionForRegisteredModel(modelVersions, rm.id)}\n          refresh={refresh}\n        />\n      )}\n    />\n  );\n};\n\nexport default ExtendedRegisteredModelTable;\n","import * as React from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  MenuToggle,\n  MenuToggleAction,\n  MenuToggleElement,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { EllipsisVIcon, FilterIcon } from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport {\n  registeredModelArchiveUrl,\n  registerModelUrl,\n  registerVersionUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\n\ntype RegisteredModelsTableToolbarProps = {\n  toggleGroupItems?: React.ReactNode;\n  onClearAllFilters?: () => void;\n};\n\nconst RegisteredModelsTableToolbar: React.FC<RegisteredModelsTableToolbarProps> = ({\n  toggleGroupItems: tableToggleGroupItems,\n  onClearAllFilters,\n}) => {\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [isRegisterNewVersionOpen, setIsRegisterNewVersionOpen] = React.useState(false);\n  const [isArchivedModelKebabOpen, setIsArchivedModelKebabOpen] = React.useState(false);\n\n  const tooltipRef = React.useRef<HTMLButtonElement>(null);\n\n  return (\n    <Toolbar data-testid=\"registered-models-table-toolbar\" clearAllFilters={onClearAllFilters}>\n      <ToolbarContent>\n        {/* TODO: Remove this Flex after the ToolbarContent can center the children elements */}\n        <Flex>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n            {tableToggleGroupItems}\n          </ToolbarToggleGroup>\n          <ToolbarItem>\n            <Dropdown\n              isOpen={isRegisterNewVersionOpen}\n              onSelect={() => setIsRegisterNewVersionOpen(false)}\n              onOpenChange={(isOpen) => setIsRegisterNewVersionOpen(isOpen)}\n              toggle={(toggleRef) => (\n                <MenuToggle\n                  isFullWidth\n                  variant=\"primary\"\n                  ref={toggleRef}\n                  onClick={() => setIsRegisterNewVersionOpen(!isRegisterNewVersionOpen)}\n                  isExpanded={isRegisterNewVersionOpen}\n                  splitButtonItems={[\n                    <MenuToggleAction\n                      id=\"register-model-button\"\n                      key=\"register-model-button\"\n                      data-testid=\"register-model-button\"\n                      aria-label=\"Register model\"\n                      onClick={() => navigate(registerModelUrl(preferredModelRegistry?.name))}\n                    >\n                      Register model\n                    </MenuToggleAction>,\n                  ]}\n                  aria-label=\"Register model toggle\"\n                  data-testid=\"register-model-split-button\"\n                />\n              )}\n            >\n              <DropdownList>\n                <DropdownItem\n                  id=\"register-new-version-button\"\n                  aria-label=\"Register new version\"\n                  key=\"register-new-version-button\"\n                  onClick={() => {\n                    navigate(registerVersionUrl(preferredModelRegistry?.name));\n                  }}\n                  ref={tooltipRef}\n                >\n                  Register new version\n                </DropdownItem>\n              </DropdownList>\n            </Dropdown>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Dropdown\n              isOpen={isArchivedModelKebabOpen}\n              onSelect={() => setIsArchivedModelKebabOpen(false)}\n              onOpenChange={(isOpen: boolean) => setIsArchivedModelKebabOpen(isOpen)}\n              toggle={(tr: React.Ref<MenuToggleElement>) => (\n                <MenuToggle\n                  data-testid=\"registered-models-table-kebab-action\"\n                  ref={tr}\n                  variant=\"plain\"\n                  onClick={() => setIsArchivedModelKebabOpen(!isArchivedModelKebabOpen)}\n                  isExpanded={isArchivedModelKebabOpen}\n                  aria-label=\"View archived models\"\n                >\n                  <EllipsisVIcon />\n                </MenuToggle>\n              )}\n              shouldFocusToggleOnSelect\n            >\n              <DropdownList>\n                <DropdownItem\n                  onClick={() => navigate(registeredModelArchiveUrl(preferredModelRegistry?.name))}\n                >\n                  View archived models\n                </DropdownItem>\n              </DropdownList>\n            </Dropdown>\n          </ToolbarItem>\n        </Flex>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default RegisteredModelsTableToolbar;\n","import * as React from 'react';\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { useNavigate } from 'react-router-dom';\nimport { ProjectObjectType, typedEmptyImage } from '@odh-dashboard/internal/concepts/design/utils';\nimport { useResolvedExtensions } from '@odh-dashboard/plugin-core';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { isModelRegistryVersionDeploymentsContextExtension } from '~/odh/extension-points/deploy';\nimport {\n  registeredModelArchiveUrl,\n  registerModelUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport EmptyModelRegistryState from '~/app/pages/modelRegistry/screens/components/EmptyModelRegistryState';\nimport { filterRegisteredModels } from '~/app/pages/modelRegistry/screens/utils';\nimport { filterArchiveModels, filterLiveModels } from '~/app/utils';\nimport {\n  initialModelRegistryFilterData,\n  ModelRegistryFilterDataType,\n  modelRegistryFilterOptions,\n  ModelRegistryFilterOptions,\n} from '~/app/pages/modelRegistry/screens/const';\nimport FilterToolbar from '~/app/shared/components/FilterToolbar';\nimport ThemeAwareSearchInput from '~/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput';\nimport ExtendedRegisteredModelTable from './ExtendedRegisteredModelTable';\nimport RegisteredModelsTableToolbar from '~/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelsTableToolbar';\n\ntype ExtendedRegisteredModelListViewProps = {\n  registeredModels: RegisteredModel[];\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n};\n\nconst ExtendedRegisteredModelListView: React.FC<ExtendedRegisteredModelListViewProps> = ({\n  registeredModels,\n  modelVersions,\n  refresh,\n}) => {\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [filterData, setFilterData] = React.useState<ModelRegistryFilterDataType>(\n    initialModelRegistryFilterData,\n  );\n  const unfilteredRegisteredModels = filterLiveModels(registeredModels);\n  const archiveRegisteredModels = filterArchiveModels(registeredModels);\n\n  const [deploymentsContextExtensions, deploymentsContextLoaded] = useResolvedExtensions(\n    isModelRegistryVersionDeploymentsContextExtension,\n  );\n\n  const onFilterUpdate = React.useCallback(\n    (key: string, value: string | { label: string; value: string } | undefined) =>\n      setFilterData((prevValues) => ({ ...prevValues, [key]: value })),\n    [setFilterData],\n  );\n\n  const onClearFilters = React.useCallback(\n    () => setFilterData(initialModelRegistryFilterData),\n    [setFilterData],\n  );\n\n  if (unfilteredRegisteredModels.length === 0) {\n    return (\n      <EmptyModelRegistryState\n        testid=\"empty-registered-models\"\n        title=\"No models in selected registry\"\n        headerIcon={() => (\n          <img\n            src={typedEmptyImage(ProjectObjectType.registeredModels, 'MissingModel')}\n            alt=\"missing model\"\n          />\n        )}\n        description={`${\n          preferredModelRegistry?.name ?? ''\n        } has no active registered models. Register a model in this registry, or select a different registry.`}\n        primaryActionText=\"Register model\"\n        secondaryActionText={\n          archiveRegisteredModels.length !== 0 ? 'View archived models' : undefined\n        }\n        primaryActionOnClick={() => {\n          navigate(registerModelUrl(preferredModelRegistry?.name));\n        }}\n        secondaryActionOnClick={() => {\n          navigate(registeredModelArchiveUrl(preferredModelRegistry?.name));\n        }}\n      />\n    );\n  }\n\n  const filteredRegisteredModels = filterRegisteredModels(\n    unfilteredRegisteredModels,\n    modelVersions,\n    filterData,\n  );\n\n  const toggleGroupItems = (\n    <ToolbarGroup variant=\"filter-group\">\n      <FilterToolbar\n        filterOptions={modelRegistryFilterOptions}\n        filterOptionRenders={{\n          [ModelRegistryFilterOptions.keyword]: ({ onChange, ...props }) => (\n            <ThemeAwareSearchInput\n              {...props}\n              fieldLabel=\"Filter by keyword\"\n              placeholder=\"Filter by keyword\"\n              className=\"toolbar-fieldset-wrapper\"\n              style={{ minWidth: '270px' }}\n              onChange={(value) => onChange(value)}\n            />\n          ),\n          [ModelRegistryFilterOptions.owner]: ({ onChange, ...props }) => (\n            <ThemeAwareSearchInput\n              {...props}\n              fieldLabel=\"Filter by owner\"\n              placeholder=\"Filter by owner\"\n              className=\"toolbar-fieldset-wrapper\"\n              style={{ minWidth: '270px' }}\n              onChange={(value) => onChange(value)}\n            />\n          ),\n        }}\n        filterData={filterData}\n        onFilterUpdate={onFilterUpdate}\n      />\n    </ToolbarGroup>\n  );\n\n  const tableContent = (\n    <ExtendedRegisteredModelTable\n      refresh={refresh}\n      clearFilters={onClearFilters}\n      registeredModels={filteredRegisteredModels}\n      modelVersions={modelVersions}\n      toolbarContent={\n        <RegisteredModelsTableToolbar\n          toggleGroupItems={toggleGroupItems}\n          onClearAllFilters={onClearFilters}\n        />\n      }\n    />\n  );\n\n  // Wrap with deployments context providers if available\n  if (deploymentsContextLoaded && deploymentsContextExtensions.length > 0) {\n    return deploymentsContextExtensions.reduce(\n      (content, extension) => {\n        const DeploymentsProvider = extension.properties.DeploymentsProvider;\n        return (\n          <DeploymentsProvider\n            key={extension.properties.DeploymentsProvider.toString()}\n            mrName={preferredModelRegistry?.name}\n          >\n          {() => tableContent}\n          </DeploymentsProvider>\n        );\n      },\n      tableContent\n    );\n  }\n\n  return tableContent;\n};\n\nexport default ExtendedRegisteredModelListView;\n","import React from 'react';\nimport { Divider, Stack, StackItem } from '@patternfly/react-core';\nimport { ProjectObjectType, ApplicationsPage, TitleWithIcon } from 'mod-arch-shared';\nimport useRegisteredModels from '~/app/hooks/useRegisteredModels';\nimport useModelVersions from '~/app/hooks/useModelVersions';\nimport ModelRegistrySelectorNavigator from './ModelRegistrySelectorNavigator';\nimport ExtendedRegisteredModelListView from '~/odh/components/ExtendedRegisteredModelListView';\nimport { modelRegistryUrl } from './routeUtils';\n\ntype ModelRegistryProps = Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  | 'title'\n  | 'description'\n  | 'loadError'\n  | 'loaded'\n  | 'provideChildrenPadding'\n  | 'removeChildrenTopPadding'\n  | 'headerContent'\n>;\n\nconst ModelRegistry: React.FC<ModelRegistryProps> = ({ ...pageProps }) => {\n  const [registeredModels, modelsLoaded, modelsLoadError, refreshModels] = useRegisteredModels();\n  const [modelVersions, versionsLoaded, versionsLoadError, refreshVersions] = useModelVersions();\n\n  const loaded = modelsLoaded && versionsLoaded;\n  const loadError = modelsLoadError || versionsLoadError;\n\n  const refresh = React.useCallback(() => {\n    refreshModels();\n    refreshVersions();\n  }, [refreshModels, refreshVersions]);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      title={\n        <TitleWithIcon title=\"Model Registry\" objectType={ProjectObjectType.registeredModels} />\n      }\n      description={\n        <Stack hasGutter>\n          <StackItem>\n            Select a model registry to view and manage your registered models. Model registries\n            provide a structured and organized way to store, share, version, deploy, and track\n            models.\n          </StackItem>\n          <StackItem>\n            <Divider />\n          </StackItem>\n        </Stack>\n      }\n      headerContent={\n        <ModelRegistrySelectorNavigator\n          getRedirectPath={(modelRegistryName) => modelRegistryUrl(modelRegistryName)}\n        />\n      }\n      loadError={loadError}\n      loaded={loaded}\n      provideChildrenPadding\n      removeChildrenTopPadding\n    >\n      <ExtendedRegisteredModelListView\n        registeredModels={registeredModels.items}\n        modelVersions={modelVersions.items}\n        refresh={refresh}\n      />\n    </ApplicationsPage>\n  );\n};\n\nexport default ModelRegistry;\n","import * as React from 'react';\nimport { EmptyStateErrorMessage } from 'mod-arch-shared';\nimport { modelRegistryUrl } from './routeUtils';\nimport ModelRegistrySelectorNavigator from './ModelRegistrySelectorNavigator';\n\ntype InvalidModelRegistryProps = {\n  title?: string;\n  modelRegistry?: string;\n};\n\nconst InvalidModelRegistry: React.FC<InvalidModelRegistryProps> = ({ title, modelRegistry }) => (\n  <EmptyStateErrorMessage\n    title={title || 'Model Registry not found'}\n    bodyText={`${\n      modelRegistry ? `Model Registry ${modelRegistry}` : 'The Model Registry'\n    } was not found.`}\n  >\n    <ModelRegistrySelectorNavigator\n      getRedirectPath={(modelRegistryName) => modelRegistryUrl(modelRegistryName)}\n      primary\n    />\n  </EmptyStateErrorMessage>\n);\n\nexport default InvalidModelRegistry;\n","import * as React from 'react';\nimport { Navigate, Outlet, useParams } from 'react-router-dom';\nimport { Bullseye, Alert, Divider, Stack, StackItem } from '@patternfly/react-core';\nimport {\n  ProjectObjectType,\n  typedEmptyImage,\n  TitleWithIcon,\n  WhosMyAdministrator,\n  KubeflowDocs,\n  ApplicationsPage,\n} from 'mod-arch-shared';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ModelRegistryContextProvider } from '~/app/context/ModelRegistryContext';\nimport EmptyModelRegistryState from './screens/components/EmptyModelRegistryState';\nimport InvalidModelRegistry from './screens/InvalidModelRegistry';\nimport ModelRegistrySelectorNavigator from './screens/ModelRegistrySelectorNavigator';\nimport { modelRegistryUrl } from './screens/routeUtils';\n\ntype ApplicationPageProps = React.ComponentProps<typeof ApplicationsPage>;\n\ntype ModelRegistryCoreLoaderProps = {\n  getInvalidRedirectPath: (modelRegistry: string) => string;\n};\n\ntype ApplicationPageRenderState = Pick<\n  ApplicationPageProps,\n  'emptyStatePage' | 'empty' | 'headerContent'\n>;\n\nconst ModelRegistryCoreLoader: React.FC<ModelRegistryCoreLoaderProps> = ({\n  getInvalidRedirectPath,\n}) => {\n  const { modelRegistry } = useParams<{ modelRegistry: string }>();\n  const {\n    modelRegistriesLoaded,\n    modelRegistriesLoadError,\n    modelRegistries,\n    preferredModelRegistry,\n    updatePreferredModelRegistry,\n  } = React.useContext(ModelRegistrySelectorContext);\n  const { isMUITheme } = useThemeContext();\n\n  const modelRegistryFromRoute = modelRegistries.find((mr) => mr.name === modelRegistry);\n\n  React.useEffect(() => {\n    if (modelRegistryFromRoute && preferredModelRegistry?.name !== modelRegistryFromRoute.name) {\n      updatePreferredModelRegistry(modelRegistryFromRoute);\n    }\n  }, [modelRegistryFromRoute, updatePreferredModelRegistry, preferredModelRegistry?.name]);\n\n  if (modelRegistriesLoadError) {\n    return (\n      <Bullseye>\n        <Alert title=\"Model registry load error\" variant=\"danger\" isInline>\n          {modelRegistriesLoadError.message}\n        </Alert>\n      </Bullseye>\n    );\n  }\n  if (!modelRegistriesLoaded) {\n    return <Bullseye>Loading model registries...</Bullseye>;\n  }\n\n  let renderStateProps: ApplicationPageRenderState & { children?: React.ReactNode };\n  if (modelRegistries.length === 0) {\n    renderStateProps = {\n      empty: true,\n      emptyStatePage: (\n        <EmptyModelRegistryState\n          testid=\"empty-model-registries-state\"\n          title={isMUITheme ? 'Deploy a model registry' : 'Request access to model registries'}\n          description={\n            isMUITheme\n              ? 'To deploy a new model registry, follow the instructions in the docs below.'\n              : 'To request a new model registry, or to request permission to access an existing model registry, contact your administrator.'\n          }\n          headerIcon={() => (\n            <img src={typedEmptyImage(ProjectObjectType.registeredModels)} alt=\"\" />\n          )}\n          customAction={isMUITheme ? <KubeflowDocs /> : <WhosMyAdministrator />}\n        />\n      ),\n      headerContent: null,\n    };\n  } else if (modelRegistry) {\n    const foundModelRegistry = modelRegistries.find((mr) => mr.name === modelRegistry);\n    if (foundModelRegistry) {\n      // Render the content\n      return (\n        <ModelRegistryContextProvider modelRegistryName={modelRegistry}>\n          <Outlet />\n        </ModelRegistryContextProvider>\n      );\n    }\n    // They ended up on a non-valid project path\n    renderStateProps = {\n      empty: true,\n      emptyStatePage: <InvalidModelRegistry modelRegistry={modelRegistry} />,\n    };\n  } else {\n    // Redirect the namespace suffix into the URL\n    const redirectModelRegistry = preferredModelRegistry ?? modelRegistries[0];\n    return <Navigate to={getInvalidRedirectPath(redirectModelRegistry.name)} replace />;\n  }\n\n  return (\n    <ApplicationsPage\n      title={\n        <TitleWithIcon title=\"Model Registry\" objectType={ProjectObjectType.registeredModels} />\n      }\n      description={\n        <Stack hasGutter>\n          <StackItem>\n            Select a model registry to view and manage your registered models. Model registries\n            provide a structured and organized way to store, share, version, deploy, and track\n            models.\n          </StackItem>\n          <StackItem>\n            <Divider />\n          </StackItem>\n        </Stack>\n      }\n      headerContent={\n        <ModelRegistrySelectorNavigator\n          getRedirectPath={(modelRegistryName) => modelRegistryUrl(modelRegistryName)}\n        />\n      }\n      {...renderStateProps}\n      loaded\n      provideChildrenPadding\n    />\n  );\n};\n\nexport default ModelRegistryCoreLoader;\n","import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise, NotReadyError } from 'mod-arch-core';\nimport { ModelArtifactList } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useModelArtifactsByVersionId = (modelVersionId?: string): FetchState<ModelArtifactList> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n  const callback = React.useCallback<FetchStateCallbackPromise<ModelArtifactList>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!modelVersionId) {\n        return Promise.reject(new NotReadyError('No model registeredModel id'));\n      }\n      return api.getModelArtifactsByModelVersion(opts, modelVersionId);\n    },\n    [api, apiAvailable, modelVersionId],\n  );\n  return useFetchState(\n    callback,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    { initialPromisePurity: true },\n  );\n};\n\nexport default useModelArtifactsByVersionId;\n","import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise, NotReadyError } from 'mod-arch-core';\nimport { RegisteredModel } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useRegisteredModelById = (registeredModel?: string): FetchState<RegisteredModel | null> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n\n  const call = React.useCallback<FetchStateCallbackPromise<RegisteredModel | null>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!registeredModel) {\n        return Promise.reject(new NotReadyError('No registered model id'));\n      }\n\n      return api.getRegisteredModel(opts, registeredModel);\n    },\n    [api, apiAvailable, registeredModel],\n  );\n\n  return useFetchState(call, null);\n};\n\nexport default useRegisteredModelById;\n","import React from 'react';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { useModelArtifactsByVersionId, useRegisteredModelById } from '~/odh/api';\nimport { uriToConnectionTypeName } from '~/odh/utils';\n\nexport type ModelDeployPrefillInfo = {\n  modelName: string;\n  modelFormat?: string;\n  modelArtifactUri?: string;\n  connectionTypeName?: string;\n  initialConnectionName?: string;\n  modelRegistryInfo?: {\n    modelVersionId?: string;\n    registeredModelId?: string;\n    mrName?: string;\n  };\n};\n\nconst useRegisteredModelDeployPrefillInfo = (\n  modelVersion: ModelVersion,\n  mrName?: string,\n): {\n  modelDeployPrefillInfo: ModelDeployPrefillInfo;\n  registeredModel: RegisteredModel | null;\n  loaded: boolean;\n  error: Error | undefined;\n} => {\n  const [registeredModel, registeredModelLoaded, registeredModelError] = useRegisteredModelById(\n    modelVersion.registeredModelId,\n  );\n  const [modelArtifactList, modelArtifactListLoaded, modelArtifactListError] =\n    useModelArtifactsByVersionId(modelVersion.id);\n\n  return React.useMemo(() => {\n    const modelName = `${registeredModel?.name ?? ''} - ${modelVersion.name}`.slice(0, 63);\n\n    if (modelArtifactList.size === 0) {\n      return {\n        modelDeployPrefillInfo: {\n          modelName,\n        },\n        registeredModel: null,\n        loaded: registeredModelLoaded && modelArtifactListLoaded,\n        error: registeredModelError || modelArtifactListError,\n      };\n    }\n    const modelArtifact = modelArtifactList.items[0];\n    const connectionTypeName = uriToConnectionTypeName(modelArtifact.uri);\n    return {\n      modelDeployPrefillInfo: {\n        modelName,\n        modelFormat: modelArtifact.modelFormatName\n          ? `${modelArtifact.modelFormatName} - ${modelArtifact.modelFormatVersion ?? ''}`\n          : undefined,\n        modelArtifactUri: modelArtifact.uri,\n        connectionTypeName,\n        initialConnectionName: modelArtifact.storageKey,\n        modelRegistryInfo: {\n          modelVersionId: modelVersion.id,\n          registeredModelId: modelVersion.registeredModelId,\n          mrName,\n        },\n      } satisfies ModelDeployPrefillInfo,\n      registeredModel,\n      loaded: registeredModelLoaded && modelArtifactListLoaded,\n      error: registeredModelError || modelArtifactListError,\n    };\n  }, [\n    modelArtifactList.items,\n    modelArtifactList.size,\n    modelArtifactListError,\n    modelArtifactListLoaded,\n    modelVersion.id,\n    modelVersion.name,\n    modelVersion.registeredModelId,\n    registeredModel?.name,\n    registeredModelError,\n    registeredModelLoaded,\n    mrName,\n  ]);\n};\n\nexport default useRegisteredModelDeployPrefillInfo;\n","import React from 'react';\nimport { ModelVersion } from '~/app/types';\nimport { ModelRegistryContext } from '~/odh/api';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { bumpBothTimestamps } from '~/app/api/updateTimestamps';\nimport { ModelDeployPrefillInfo } from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\nimport useRegisteredModelDeployPrefillInfo from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\n\nconst MRDeployFormDataLoader = ({\n  mv,\n  renderData,\n}: {\n  mv: ModelVersion;\n  renderData: (\n    modelDeployPrefill: {\n      data: ModelDeployPrefillInfo;\n      loaded: boolean;\n      error: Error | undefined;\n    },\n    onSubmit: () => void,\n  ) => React.ReactNode;\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const prefillInfo = useRegisteredModelDeployPrefillInfo(mv, preferredModelRegistry?.name);\n  const { modelDeployPrefillInfo, registeredModel, loaded, error } = prefillInfo;\n\n  const onSubmit = React.useCallback(async () => {\n    if (!registeredModel) {\n      return;\n    }\n    try {\n      await bumpBothTimestamps(apiState.api, registeredModel, mv);\n    } catch (submitError) {\n      throw new Error('Failed to update timestamps after deployment');\n    }\n  }, [apiState.api, mv, registeredModel]);\n\n  const modelDeployPrefill: {\n    data: ModelDeployPrefillInfo;\n    loaded: boolean;\n    error: Error | undefined;\n  } | null = loaded && !error ? { data: modelDeployPrefillInfo, loaded, error } : null;\n\n  return modelDeployPrefill ? renderData(modelDeployPrefill, onSubmit) : null;\n};\n\nexport default MRDeployFormDataLoader;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { HookNotify, useResolvedExtensions } from '@odh-dashboard/plugin-core';\nimport { isModelRegistryDeployModalExtension } from '~/odh/extension-points';\nimport MRDeployFormDataLoader from '~/odh/components/MRDeployFormDataLoader';\nimport { ModelVersion } from '~/app/types';\nimport { getDeployButtonState } from '~/odh/utils';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { modelVersionDeploymentsUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\n\ntype DeployModalExtensionProps = {\n  mv: ModelVersion;\n  render: (\n    buttonState: { enabled?: boolean; tooltip?: string },\n    onOpenModal: () => void,\n    isModalAvailable: boolean,\n  ) => React.ReactNode;\n};\n\nconst DeployModalExtension: React.FC<DeployModalExtensionProps> = ({ mv, render }) => {\n  const navigate = useNavigate();\n  const [extensions, extensionsLoaded] = useResolvedExtensions(isModelRegistryDeployModalExtension);\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n\n  const [openModal, setOpenModal] = React.useState(false);\n\n  const [availablePlatformIds, setAvailablePlatformIds] = React.useState<string[]>([]);\n  const buttonState = getDeployButtonState(availablePlatformIds);\n\n  const onOpenModal = React.useCallback(() => {\n    setOpenModal(true);\n  }, [setOpenModal]);\n\n  const isModalAvailable = React.useMemo(\n    () => extensionsLoaded && extensions.length > 0,\n    [extensionsLoaded, extensions],\n  );\n\n  const handleSubmit = React.useCallback(() => {\n    setOpenModal(false);\n    // Redirect to deployments tab of the model version page after successful deployment\n    const modelVersionId = mv.id;\n    const registeredModelId = mv.registeredModelId;\n    const modelRegistryName = preferredModelRegistry?.name;\n    \n    navigate(modelVersionDeploymentsUrl(modelVersionId, registeredModelId, modelRegistryName));\n  }, [navigate, mv, preferredModelRegistry]);\n\n  return (\n    <>\n      {extensions.map((extension) => {\n        return extension.properties.useAvailablePlatformIds && (\n          <HookNotify\n            key={extension.uid}\n            useHook={extension.properties.useAvailablePlatformIds}\n            onNotify={(value) => setAvailablePlatformIds(value ?? [])}\n          />\n        )\n      })}\n      {render(buttonState, onOpenModal, isModalAvailable)}\n      {openModal && extensions.map((extension) => {\n        return extension.properties.modalComponent && (\n          <MRDeployFormDataLoader\n            key={extension.uid}\n            mv={mv}\n            renderData={(modelDeployPrefill, onSubmit) => (\n              <extension.properties.modalComponent\n                modelDeployPrefill={modelDeployPrefill}\n                onSubmit={() => {\n                  onSubmit();\n                  handleSubmit();\n                }}\n                onClose={() => setOpenModal(false)}\n              />\n            )}\n          />\n        )\n      })}\n    </>\n  );\n};\n\nexport default DeployModalExtension;\n","import { Button, Content, ContentVariants, FlexItem, Truncate } from '@patternfly/react-core';\nimport { ActionsColumn, IAction, Td, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ArchiveRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/ArchiveRegisteredModelModal';\nimport ModelLabels from '~/app/pages/modelRegistry/screens/components/ModelLabels';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\nimport { RestoreRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/RestoreRegisteredModel';\nimport {\n  archiveModelVersionDetailsUrl,\n  archiveModelVersionListUrl,\n  modelVersionListUrl,\n  modelVersionUrl,\n  registeredModelArchiveDetailsUrl,\n  registeredModelUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { ModelState, ModelVersion, RegisteredModel } from '~/app/types';\nimport DeployModalExtension from '~/odh/components/DeployModalExtension';\n\ntype RegisteredModelTableRowProps = {\n  registeredModel: RegisteredModel;\n  latestModelVersion: ModelVersion | undefined;\n  isArchiveRow?: boolean;\n  hasDeploys?: boolean;\n  loaded?: boolean;\n  refresh: () => void;\n};\n\nconst RegisteredModelTableRow: React.FC<RegisteredModelTableRowProps> = ({\n  registeredModel: rm,\n  latestModelVersion,\n  isArchiveRow,\n  hasDeploys = false,\n  loaded = true,\n  refresh,\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [isArchiveModalOpen, setIsArchiveModalOpen] = React.useState(false);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = React.useState(false);\n  const rmUrl = registeredModelUrl(rm.id, preferredModelRegistry?.name);\n\n  const baseActions: IAction[] = [\n    {\n      title: 'View model information',\n      isDisabled: true,\n      className: 'pf-v6-u-font-size-sm pf-v6-u-color-200 pf-v6-u-text-transform-uppercase pf-v6-u-p-xs',\n    },\n    {\n      title: 'Overview',\n      onClick: () => {\n        navigate(\n          isArchiveRow\n            ? registeredModelArchiveDetailsUrl(rm.id, preferredModelRegistry?.name)\n            : rmUrl,\n        );\n      },\n    },\n    {\n      title: 'Versions',\n      onClick: () => {\n        navigate(\n          isArchiveRow\n            ? archiveModelVersionListUrl(rm.id, preferredModelRegistry?.name)\n            : modelVersionListUrl(rm.id, preferredModelRegistry?.name),\n        );\n      },\n    },\n    {\n      title: 'Deployments',\n      onClick: () => {\n        navigate(`${rmUrl}/deployments`);\n      },\n    },\n  ];\n\n  const latestVersionActionsHeader: IAction[] = [\n    { isSeparator: true },\n    {\n      title: 'Latest version actions',\n      isDisabled: true,\n      className: 'pf-v6-u-font-size-sm pf-v6-u-color-200 pf-v6-u-text-transform-uppercase pf-v6-u-p-xs',\n    },\n  ];\n\n  const archiveRestoreActions: IAction[] = [\n    { isSeparator: true },\n    ...(isArchiveRow\n      ? [\n          {\n            title: 'Restore model',\n            onClick: () => setIsRestoreModalOpen(true),\n          },\n        ]\n      : [\n          {\n            title: 'Archive model',\n            onClick: () => setIsArchiveModalOpen(true),\n            isAriaDisabled: !loaded || hasDeploys,\n            tooltipProps: loaded && hasDeploys\n              ? { content: 'Models with deployed versions cannot be archived.' }\n              : undefined,\n          },\n        ]),\n  ];\n\n  const handleModelNameNavigation = (rmId: string) =>\n    isArchiveRow\n      ? navigate(registeredModelArchiveDetailsUrl(rmId, preferredModelRegistry?.name))\n      : navigate(rmUrl);\n\n  const handleVersionNameNavigation = (mv: ModelVersion) =>\n    isArchiveRow\n      ? navigate(\n          archiveModelVersionDetailsUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name),\n        )\n      : navigate(modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name));\n\n  return (\n    <Tr>\n      <Td dataLabel=\"Model name\">\n        <div id=\"model-name\" data-testid=\"model-name\">\n          <FlexItem>\n            <Button variant=\"link\" isInline onClick={() => handleModelNameNavigation(rm.id)}>\n              <Truncate content={rm.name} />\n            </Button>\n          </FlexItem>\n        </div>\n        {rm.description && (\n          <Content data-testid=\"description\" component={ContentVariants.small}>\n            <Truncate content={rm.description} />\n          </Content>\n        )}\n      </Td>\n      <Td dataLabel=\"Latest version\">\n        {latestModelVersion ? (\n          <div id=\"latest-version\" data-testid=\"latest-version\">\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => handleVersionNameNavigation(latestModelVersion)}\n              >\n                <Truncate content={latestModelVersion.name} />\n              </Button>\n            </FlexItem>\n          </div>\n        ) : (\n          '-'\n        )}\n      </Td>\n      <Td dataLabel=\"Labels\">\n        <ModelLabels customProperties={rm.customProperties} name={rm.name} />\n      </Td>\n      <Td dataLabel=\"Last modified\">\n        <ModelTimestamp timeSinceEpoch={rm.lastUpdateTimeSinceEpoch} />\n      </Td>\n      <Td dataLabel=\"Owner\">\n        <Content component=\"p\" data-testid=\"registered-model-owner\">\n          {rm.owner || '-'}\n        </Content>\n      </Td>\n      <Td isActionCell>\n        {latestModelVersion && !isArchiveRow ? (\n          <DeployModalExtension\n            mv={latestModelVersion}\n            render={(buttonState, onOpenModal, isModalAvailable) =>\n              isModalAvailable ? (\n                <ActionsColumn\n                  items={[\n                    ...baseActions,\n                    ...latestVersionActionsHeader,\n                    {\n                      title: (\n                        <>\n                          Deploy <strong>{latestModelVersion.name}</strong>\n                        </>\n                      ),\n                      onClick: onOpenModal,\n                      isAriaDisabled: !buttonState.enabled,\n                      tooltipProps: buttonState.tooltip ? { content: buttonState.tooltip } : undefined,\n                    },\n                    ...archiveRestoreActions,\n                  ]}\n                />\n              ) : (\n                <ActionsColumn items={[...baseActions, ...archiveRestoreActions]} />\n              )\n            }\n          />\n        ) : (\n          <ActionsColumn items={[...baseActions, ...archiveRestoreActions]} />\n        )}\n        {isArchiveModalOpen ? (\n          <ArchiveRegisteredModelModal\n            onCancel={() => setIsArchiveModalOpen(false)}\n            onSubmit={() =>\n              apiState.api\n                .patchRegisteredModel(\n                  {},\n                  {\n                    state: ModelState.ARCHIVED,\n                  },\n                  rm.id,\n                )\n                .then(refresh)\n            }\n            registeredModelName={rm.name}\n          />\n        ) : null}\n        {isRestoreModalOpen ? (\n          <RestoreRegisteredModelModal\n            onCancel={() => setIsRestoreModalOpen(false)}\n            onSubmit={() =>\n              apiState.api\n                .patchRegisteredModel(\n                  {},\n                  {\n                    state: ModelState.LIVE,\n                  },\n                  rm.id,\n                )\n                .then(() => navigate(registeredModelUrl(rm.id, preferredModelRegistry?.name)))\n            }\n            registeredModelName={rm.name}\n          />\n        ) : null}\n      </Td>\n    </Tr>\n  );\n};\n\nexport default RegisteredModelTableRow;\n","import * as React from 'react';\nimport { Table, DashboardEmptyTableView } from 'mod-arch-shared';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { rmColumns } from '~/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelsTableColumns';\nimport RegisteredModelTableRow from '~/app/pages/modelRegistry/screens/RegisteredModels/RegisteredModelTableRow';\nimport { getLatestVersionForRegisteredModel } from '~/app/pages/modelRegistry/screens/utils';\n\ntype RegisteredModelsArchiveTableProps = {\n  clearFilters: () => void;\n  registeredModels: RegisteredModel[];\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n} & Partial<Pick<React.ComponentProps<typeof Table>, 'toolbarContent'>>;\n\nconst RegisteredModelsArchiveTable: React.FC<RegisteredModelsArchiveTableProps> = ({\n  clearFilters,\n  registeredModels,\n  modelVersions,\n  toolbarContent,\n  refresh,\n}) => (\n  <Table\n    data-testid=\"registered-models-archive-table\"\n    data={registeredModels}\n    columns={rmColumns}\n    toolbarContent={toolbarContent}\n    defaultSortColumn={2}\n    onClearFilters={clearFilters}\n    enablePagination\n    emptyTableView={<DashboardEmptyTableView onClearFilters={clearFilters} />}\n    rowRenderer={(rm: RegisteredModel) => (\n      <RegisteredModelTableRow\n        key={rm.name}\n        registeredModel={rm}\n        latestModelVersion={getLatestVersionForRegisteredModel(modelVersions, rm.id)}\n        isArchiveRow\n        refresh={refresh}\n      />\n    )}\n  />\n);\n\nexport default RegisteredModelsArchiveTable;\n","import * as React from 'react';\nimport { Toolbar, ToolbarContent, ToolbarGroup, ToolbarToggleGroup } from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { filterRegisteredModels } from '~/app/pages/modelRegistry/screens/utils';\nimport EmptyModelRegistryState from '~/app/pages/modelRegistry/screens/components/EmptyModelRegistryState';\nimport {\n  ModelRegistryFilterDataType,\n  ModelRegistryFilterOptions,\n  initialModelRegistryFilterData,\n  modelRegistryFilterOptions,\n} from '~/app/pages/modelRegistry/screens/const';\nimport FilterToolbar from '~/app/shared/components/FilterToolbar';\nimport ThemeAwareSearchInput from '~/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput';\nimport RegisteredModelsArchiveTable from './RegisteredModelsArchiveTable';\n\ntype RegisteredModelsArchiveListViewProps = {\n  registeredModels: RegisteredModel[];\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n};\n\nconst RegisteredModelsArchiveListView: React.FC<RegisteredModelsArchiveListViewProps> = ({\n  registeredModels: unfilteredRegisteredModels,\n  modelVersions,\n  refresh,\n}) => {\n  const [filterData, setFilterData] = React.useState<ModelRegistryFilterDataType>(\n    initialModelRegistryFilterData,\n  );\n\n  const onFilterUpdate = React.useCallback(\n    (key: string, value: string | { label: string; value: string } | undefined) =>\n      setFilterData((prevValues) => ({ ...prevValues, [key]: value })),\n    [setFilterData],\n  );\n\n  const onClearFilters = React.useCallback(\n    () => setFilterData(initialModelRegistryFilterData),\n    [setFilterData],\n  );\n\n  const filteredRegisteredModels = filterRegisteredModels(\n    unfilteredRegisteredModels,\n    modelVersions,\n    filterData,\n  );\n\n  if (unfilteredRegisteredModels.length === 0) {\n    return (\n      <EmptyModelRegistryState\n        headerIcon={SearchIcon}\n        testid=\"empty-archive-model-state\"\n        title=\"No archived models\"\n        description=\"You can archive the active models that you no longer use. You can restore an archived\n      model to make it active.\"\n      />\n    );\n  }\n\n  return (\n    <RegisteredModelsArchiveTable\n      refresh={refresh}\n      clearFilters={onClearFilters}\n      registeredModels={filteredRegisteredModels}\n      modelVersions={modelVersions}\n      toolbarContent={\n        <Toolbar\n          data-testid=\"registered-models-archive-table-toolbar\"\n          clearAllFilters={onClearFilters}\n        >\n          <ToolbarContent>\n            <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n              <ToolbarGroup variant=\"filter-group\">\n                <FilterToolbar\n                  filterOptions={modelRegistryFilterOptions}\n                  filterOptionRenders={{\n                    [ModelRegistryFilterOptions.keyword]: ({ onChange, ...props }) => (\n                      <ThemeAwareSearchInput\n                        {...props}\n                        fieldLabel=\"Filter by keyword\"\n                        placeholder=\"Filter by keyword\"\n                        className=\"toolbar-fieldset-wrapper\"\n                        style={{ minWidth: '270px' }}\n                        onChange={(value) => onChange(value)}\n                      />\n                    ),\n                    [ModelRegistryFilterOptions.owner]: ({ onChange, ...props }) => (\n                      <ThemeAwareSearchInput\n                        {...props}\n                        fieldLabel=\"Filter by owner\"\n                        placeholder=\"Filter by owner\"\n                        className=\"toolbar-fieldset-wrapper\"\n                        style={{ minWidth: '270px' }}\n                        onChange={(value) => onChange(value)}\n                      />\n                    ),\n                  }}\n                  filterData={filterData}\n                  onFilterUpdate={onFilterUpdate}\n                />\n              </ToolbarGroup>\n            </ToolbarToggleGroup>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nexport default RegisteredModelsArchiveListView;\n","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { filterArchiveModels } from '~/app/utils';\nimport useRegisteredModels from '~/app/hooks/useRegisteredModels';\nimport useModelVersions from '~/app/hooks/useModelVersions';\nimport RegisteredModelsArchiveListView from './RegisteredModelsArchiveListView';\n\ntype RegisteredModelsArchiveProps = Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst RegisteredModelsArchive: React.FC<RegisteredModelsArchiveProps> = ({ ...pageProps }) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [registeredModels, modelsLoaded, modelsLoadError, refreshModels] = useRegisteredModels();\n  const [modelVersions, versionsLoaded, versionsLoadError, refreshVersions] = useModelVersions();\n\n  const loaded = modelsLoaded && versionsLoaded;\n  const loadError = modelsLoadError || versionsLoadError;\n\n  const refresh = React.useCallback(() => {\n    refreshModels();\n    refreshVersions();\n  }, [refreshModels, refreshVersions]);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to=\"/model-registry\">Model registry - {preferredModelRegistry?.name}</Link>\n            )}\n          />\n          <BreadcrumbItem data-testid=\"archive-model-page-breadcrumb\" isActive>\n            Archived models\n          </BreadcrumbItem>\n        </Breadcrumb>\n      }\n      title={`Archived models of ${preferredModelRegistry?.name ?? ''}`}\n      loadError={loadError}\n      loaded={loaded}\n      provideChildrenPadding\n    >\n      <RegisteredModelsArchiveListView\n        registeredModels={filterArchiveModels(registeredModels.items)}\n        modelVersions={modelVersions.items}\n        refresh={refresh}\n      />\n    </ApplicationsPage>\n  );\n};\n\nexport default RegisteredModelsArchive;\n","export enum ModelVersionsTab {\n  OVERVIEW = 'overview',\n  VERSIONS = 'versions',\n}\n\nexport enum ModelVersionsTabTitle {\n  OVERVIEW = 'Overview',\n  VERSIONS = 'Versions',\n}\n","import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise, NotReadyError } from 'mod-arch-core';\nimport { ModelVersionList } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useModelVersionsByRegisteredModel = (\n  registeredModelId?: string,\n): FetchState<ModelVersionList> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n\n  const call = React.useCallback<FetchStateCallbackPromise<ModelVersionList>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!registeredModelId) {\n        return Promise.reject(new NotReadyError('No model registeredModel id'));\n      }\n\n      return api.getModelVersionsByRegisteredModel(opts, registeredModelId);\n    },\n    [api, apiAvailable, registeredModelId],\n  );\n\n  return useFetchState(\n    call,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    { initialPromisePurity: true },\n  );\n};\n\nexport default useModelVersionsByRegisteredModel;\n","import * as React from 'react';\nimport {\n  Dropdown,\n  DropdownGroup,\n  DropdownList,\n  MenuToggle,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  Divider,\n} from '@patternfly/react-core';\nimport { useNavigate } from 'react-router-dom';\nimport { ModelState, RegisteredModel, ModelVersion } from '~/app/types';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ArchiveRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/ArchiveRegisteredModelModal';\nimport { registeredModelsUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport DeployModalExtension from '~/odh/components/DeployModalExtension';\n\ninterface ModelVersionsHeaderActionsProps {\n  rm: RegisteredModel;\n  latestModelVersion?: ModelVersion;\n}\n\nconst ModelVersionsHeaderActions: React.FC<ModelVersionsHeaderActionsProps> = ({\n  rm,\n  latestModelVersion,\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n\n  const navigate = useNavigate();\n  const [isOpen, setOpen] = React.useState(false);\n  const [isArchiveModalOpen, setIsArchiveModalOpen] = React.useState(false);\n\n  return (\n    <>\n      <Flex>\n        <FlexItem>\n          {latestModelVersion ? (\n            <DeployModalExtension\n              mv={latestModelVersion}\n              render={(buttonState, onOpenModal, isModalAvailable) => (\n                <Dropdown\n                  isOpen={isOpen}\n                  onSelect={() => setOpen(false)}\n                  onOpenChange={(open) => setOpen(open)}\n                  popperProps={{ position: 'end', appendTo: 'inline' }}\n                  toggle={(toggleRef) => (\n                    <MenuToggle\n                      variant=\"secondary\"\n                      ref={toggleRef}\n                      onClick={() => setOpen(!isOpen)}\n                      isExpanded={isOpen}\n                      aria-label=\"Model action toggle\"\n                      data-testid=\"model-action-toggle\"\n                    >\n                      Actions\n                    </MenuToggle>\n                  )}\n                >\n                  <DropdownList>\n                  {isModalAvailable && (<DropdownGroup label=\"Latest version actions\">\n                      <DropdownItem\n                        onClick={() => {\n                          setOpen(false);\n                          onOpenModal();\n                        }}\n                        isAriaDisabled={!buttonState?.enabled}\n                        tooltipProps={buttonState?.tooltip ? { content: buttonState.tooltip } : undefined}\n                      >\n                        Deploy <strong>{latestModelVersion.name}</strong>\n                      </DropdownItem>\n                    {isModalAvailable && <Divider />}\n                    </DropdownGroup>)}\n                    <DropdownItem onClick={() => setIsArchiveModalOpen(true)}>Archive model</DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              )}\n            />\n          ) : (\n            <Dropdown\n              isOpen={isOpen}\n              onSelect={() => setOpen(false)}\n              onOpenChange={(open) => setOpen(open)}\n              popperProps={{ position: 'end', appendTo: 'inline' }}\n              toggle={(toggleRef) => (\n                <MenuToggle\n                  variant=\"secondary\"\n                  ref={toggleRef}\n                  onClick={() => setOpen(!isOpen)}\n                  isExpanded={isOpen}\n                  aria-label=\"Model version action toggle\"\n                  data-testid=\"model-version-action-toggle\"\n                >\n                  Actions\n                </MenuToggle>\n              )}\n            >\n              <DropdownList>\n                <DropdownGroup>\n                  <DropdownItem onClick={() => setIsArchiveModalOpen(true)}>Archive model</DropdownItem>\n                </DropdownGroup>\n              </DropdownList>\n            </Dropdown>\n          )}\n        </FlexItem>\n      </Flex>\n      {isArchiveModalOpen ? (\n        <ArchiveRegisteredModelModal\n          onCancel={() => setIsArchiveModalOpen(false)}\n          onSubmit={() =>\n            apiState.api\n              .patchRegisteredModel(\n                {},\n                {\n                  state: ModelState.ARCHIVED,\n                },\n                rm.id,\n              )\n              .then(() => navigate(registeredModelsUrl(preferredModelRegistry?.name)))\n          }\n          registeredModelName={rm.name}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default ModelVersionsHeaderActions;\n","import { useBrowserStorage } from 'mod-arch-core';\n\nconst useDeletePropertiesModalAvailability = (): [boolean, (v: boolean) => void] =>\n  useBrowserStorage<boolean>('delete.properties.modal.preference', false);\n\nexport default useDeletePropertiesModalAvailability;\n","import {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Checkbox,\n  ModalVariant,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport useDeletePropertiesModalAvailability from '~/app/hooks/useDeletePropertiesModalAvailability';\n\ntype DeletePropertiesModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  deleteProperty: () => Promise<unknown>;\n  modelName?: string;\n};\n\nconst DeletePropertiesModal: React.FC<DeletePropertiesModalProps> = ({\n  modelName,\n  isOpen,\n  setIsOpen,\n  deleteProperty,\n}) => {\n  const [dontShowModalValue, setDontShowModalValue] = useDeletePropertiesModalAvailability();\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => setIsOpen(false)}\n      variant={ModalVariant.small}\n      ouiaId=\"DeletePropertyModal\"\n      aria-labelledby=\"delete-property-modal-title\"\n      aria-describedby=\"delete-property-modal-body\"\n      data-testid=\"delete-property-modal\"\n    >\n      <ModalHeader\n        title=\"Delete property from all model versions?\"\n        labelId=\"delete-property-modal-title\"\n      />\n      <ModalBody id=\"delete-property-modal-body\">\n        <Stack hasGutter>\n          <StackItem>\n            Editing the model details will apply changes to all versions of the{' '}\n            {modelName ? (\n              <>\n                <b>{modelName}</b> model.\n              </>\n            ) : (\n              <>model.</>\n            )}\n          </StackItem>\n          <StackItem>\n            <Checkbox\n              id=\"dont-show-again\"\n              label=\"Don't show this again\"\n              isChecked={dontShowModalValue}\n              onChange={(_, checked) => setDontShowModalValue(checked)}\n            />\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => {\n            deleteProperty();\n            setIsOpen(false);\n          }}\n          data-testid=\"delete-property-modal-confirm\"\n        >\n          Confirm\n        </Button>\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => setIsOpen(false)}\n          data-testid=\"delete-property-modal-cancel\"\n        >\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default DeletePropertiesModal;\n","import * as React from 'react';\nimport { ActionsColumn, Td, Tr } from '@patternfly/react-table';\nimport {\n  ActionList,\n  ActionListItem,\n  Button,\n  ExpandableSection,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n  Truncate,\n} from '@patternfly/react-core';\nimport { CheckIcon, ExternalLinkAltIcon, TimesIcon } from '@patternfly/react-icons';\nimport { KeyValuePair, EitherNotBoth } from 'mod-arch-core';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\nimport { isValidHttpUrl } from '~/app/pages/modelRegistry/screens/utils';\nimport useDeletePropertiesModalAvailability from '~/app/hooks/useDeletePropertiesModalAvailability';\nimport DeletePropertiesModal from './DeletePropertiesModal';\n\ntype ModelPropertiesTableRowProps = {\n  allExistingKeys: string[];\n  setIsEditing: (isEditing: boolean) => void;\n  isSavingEdits: boolean;\n  modelName?: string;\n  isArchive?: boolean;\n  showDeleteModal?: boolean;\n  setIsSavingEdits: (isSaving: boolean) => void;\n  saveEditedProperty: (oldKey: string, newPair: KeyValuePair) => Promise<unknown>;\n} & EitherNotBoth<\n  { isAddRow: true },\n  {\n    isEditing: boolean;\n    keyValuePair: KeyValuePair;\n    deleteProperty: (key: string) => Promise<unknown>;\n  }\n>;\n\nconst ModelPropertiesTableRow: React.FC<ModelPropertiesTableRowProps> = ({\n  isAddRow,\n  isEditing = isAddRow,\n  keyValuePair = { key: '', value: '' },\n  deleteProperty = () => Promise.resolve(),\n  allExistingKeys,\n  setIsEditing,\n  isSavingEdits,\n  setIsSavingEdits,\n  isArchive,\n  saveEditedProperty,\n  modelName,\n  showDeleteModal,\n}) => {\n  const { key, value } = keyValuePair;\n\n  const [unsavedKey, setUnsavedKey] = React.useState(key);\n  const [unsavedValue, setUnsavedValue] = React.useState(value);\n\n  const [isValueExpanded, setIsValueExpanded] = React.useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = React.useState(false);\n  const [dontShowModalValue] = useDeletePropertiesModalAvailability();\n\n  let keyValidationError: string | null = null;\n  if (unsavedKey !== key && allExistingKeys.includes(unsavedKey)) {\n    keyValidationError = 'Key must not match an existing property key or label';\n  } else if (unsavedKey.length > 63) {\n    keyValidationError = \"Key text can't exceed 63 characters\";\n  }\n\n  const clearUnsavedInputs = () => {\n    setUnsavedKey(key);\n    setUnsavedValue(value);\n  };\n\n  const onEditClick = () => {\n    clearUnsavedInputs();\n    setIsEditing(true);\n  };\n\n  const onDeleteClick = async () => {\n    if (dontShowModalValue || !showDeleteModal) {\n      await handleDeleteProperty();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n  };\n\n  const handleDeleteProperty = async () => {\n    setIsSavingEdits(true);\n    try {\n      await deleteProperty(key);\n    } finally {\n      setIsSavingEdits(false);\n    }\n  };\n\n  const onSaveEditsClick = async () => {\n    setIsSavingEdits(true);\n    try {\n      await saveEditedProperty(key, { key: unsavedKey, value: unsavedValue });\n    } finally {\n      setIsSavingEdits(false);\n    }\n    setIsEditing(false);\n  };\n\n  const onDiscardEditsClick = () => {\n    clearUnsavedInputs();\n    setIsEditing(false);\n  };\n\n  const propertyKeyInput = (\n    <TextInput\n      data-testid={isAddRow ? `add-property-key-input` : `edit-property-key-input ${key}`}\n      aria-label={\n        isAddRow ? 'Key input for new property' : `Key input for editing property with key ${key}`\n      }\n      isRequired\n      type=\"text\"\n      autoFocus\n      value={unsavedKey}\n      onChange={(_event, str) => setUnsavedKey(str)}\n      validated={keyValidationError ? 'error' : 'default'}\n    />\n  );\n\n  const propertyValueInput = (\n    <TextInput\n      data-testid={isAddRow ? `add-property-value-input` : `edit-property-value-input ${value}`}\n      aria-label={\n        isAddRow\n          ? 'Value input for new property'\n          : `Value input for editing property with key ${key}`\n      }\n      isRequired\n      type=\"text\"\n      value={unsavedValue}\n      onChange={(_event, str) => setUnsavedValue(str)}\n    />\n  );\n\n  return (\n    <Tr>\n      <Td dataLabel=\"Key\" width={45} modifier=\"breakWord\">\n        {isEditing ? (\n          <>\n            <FormFieldset className=\"tr-fieldset-wrapper\" component={propertyKeyInput} />\n\n            {keyValidationError && (\n              <FormHelperText>\n                <HelperText>\n                  <HelperTextItem variant=\"error\">{keyValidationError}</HelperTextItem>\n                </HelperText>\n              </FormHelperText>\n            )}\n          </>\n        ) : (\n          key\n        )}\n      </Td>\n      <Td dataLabel=\"Value\" width={45} modifier=\"breakWord\">\n        {isEditing ? (\n          <FormFieldset className=\"tr-fieldset-wrapper\" component={propertyValueInput} />\n        ) : (\n          <ExpandableSection\n            variant=\"truncate\"\n            truncateMaxLines={3}\n            toggleText={isValueExpanded ? 'Show less' : 'Show more'}\n            onToggle={(_event, isExpanded) => setIsValueExpanded(isExpanded)}\n            isExpanded={isValueExpanded}\n          >\n            {isValidHttpUrl(value) ? (\n              <Button\n                variant=\"link\"\n                icon={<ExternalLinkAltIcon />}\n                iconPosition=\"end\"\n                component=\"a\"\n                href={value}\n                target=\"_blank\"\n                isInline\n              >\n                <Truncate content={value} />\n              </Button>\n            ) : (\n              value\n            )}\n          </ExpandableSection>\n        )}\n      </Td>\n      {!isArchive && (\n        <Td isActionCell width={10}>\n          {isEditing ? (\n            <ActionList isIconList>\n              <ActionListItem>\n                <Button\n                  data-testid=\"save-edit-button-property\"\n                  icon={<CheckIcon />}\n                  aria-label={`Save edits to property with key ${key}`}\n                  variant=\"link\"\n                  onClick={onSaveEditsClick}\n                  isDisabled={isSavingEdits || !unsavedKey || !unsavedValue || !!keyValidationError}\n                />\n              </ActionListItem>\n              <ActionListItem>\n                <Button\n                  data-testid=\"discard-edit-button-property\"\n                  icon={<TimesIcon />}\n                  aria-label={`Discard edits to property with key ${key}`}\n                  variant=\"plain\"\n                  onClick={onDiscardEditsClick}\n                  isDisabled={isSavingEdits}\n                />\n              </ActionListItem>\n            </ActionList>\n          ) : (\n            <ActionsColumn\n              isDisabled={isSavingEdits}\n              popperProps={{ direction: 'up' }}\n              items={[\n                { title: 'Edit', onClick: onEditClick, isDisabled: isSavingEdits },\n                { isSeparator: true },\n                { title: 'Delete', onClick: onDeleteClick, isDisabled: isSavingEdits },\n              ]}\n            />\n          )}\n        </Td>\n      )}\n      <DeletePropertiesModal\n        modelName={modelName}\n        isOpen={isDeleteModalOpen}\n        setIsOpen={setIsDeleteModalOpen}\n        deleteProperty={handleDeleteProperty}\n      />\n    </Tr>\n  );\n};\n\nexport default ModelPropertiesTableRow;\n","import React from 'react';\nimport { Badge, Button, ExpandableSection } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { Table, Tbody, Th, Thead, Tr } from '@patternfly/react-table';\nimport spacing from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport text from '@patternfly/react-styles/css/utilities/Text/text';\nimport ModelPropertiesTableRow from '~/app/pages/modelRegistry/screens/components/ModelPropertiesTableRow';\nimport { getProperties, mergeUpdatedProperty } from '~/app/pages/modelRegistry/screens/utils';\nimport { ModelRegistryCustomProperties } from '~/app/types';\n\ntype ModelPropertiesExpandableSectionProps = {\n  customProperties?: ModelRegistryCustomProperties;\n  isArchive?: boolean;\n  saveEditedCustomProperties: (properties: ModelRegistryCustomProperties) => Promise<unknown>;\n  isExpandedByDefault?: boolean;\n  onEditingChange?: (isEditing: boolean) => void;\n  modelName?: string;\n};\n\nconst ModelPropertiesExpandableSection: React.FC<ModelPropertiesExpandableSectionProps> = ({\n  customProperties = {},\n  isArchive,\n  saveEditedCustomProperties,\n  isExpandedByDefault = false,\n  onEditingChange,\n  modelName,\n}) => {\n  const [editingPropertyKeys, setEditingPropertyKeys] = React.useState<string[]>([]);\n  const setIsEditingKey = (key: string, isEditing: boolean) =>\n    setEditingPropertyKeys([\n      ...editingPropertyKeys.filter((k) => k !== key),\n      ...(isEditing ? [key] : []),\n    ]);\n  const [isAdding, setIsAdding] = React.useState(false);\n  const isEditingSomeRow = isAdding || editingPropertyKeys.length > 0;\n\n  const [isSavingEdits, setIsSavingEdits] = React.useState(false);\n\n  // We only show string properties with a defined value (no labels or other property types)\n  const filteredProperties = getProperties(customProperties);\n\n  const [isShowingMoreProperties, setIsShowingMoreProperties] = React.useState(false);\n  const keys = Object.keys(filteredProperties);\n  const needExpandControl = keys.length > 5;\n  const shownKeys = isShowingMoreProperties ? keys : keys.slice(0, 5);\n  const numHiddenKeys = keys.length - shownKeys.length;\n\n  // Includes keys reserved by non-string properties and labels\n  const allExistingKeys = Object.keys(customProperties);\n\n  const requiredAsterisk = (\n    <span aria-hidden=\"true\" className={text.textColorStatusDanger}>\n      {' *'}\n    </span>\n  );\n\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedByDefault);\n\n  React.useEffect(() => {\n    onEditingChange?.(isEditingSomeRow);\n  }, [isEditingSomeRow, onEditingChange]);\n\n  return (\n    <ExpandableSection\n      isExpanded={isExpanded}\n      onToggle={() => setIsExpanded(!isExpanded)}\n      data-testid=\"properties-expandable-section\"\n      toggleContent={\n        <>\n          Properties <Badge isRead>{keys.length}</Badge>\n        </>\n      }\n    >\n      {keys.length > 0 && (\n        <Table aria-label=\"Properties table\" data-testid=\"properties-table\" variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>Key {isEditingSomeRow && requiredAsterisk}</Th>\n              <Th>Value {isEditingSomeRow && requiredAsterisk}</Th>\n              <Th screenReaderText=\"Actions\" />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {shownKeys.map((key) => (\n              <ModelPropertiesTableRow\n                key={key}\n                modelName={modelName}\n                isArchive={isArchive}\n                keyValuePair={{ key, value: filteredProperties[key].string_value || '' }}\n                allExistingKeys={allExistingKeys}\n                isEditing={editingPropertyKeys.includes(key)}\n                setIsEditing={(isEditing) => setIsEditingKey(key, isEditing)}\n                isSavingEdits={isSavingEdits}\n                setIsSavingEdits={setIsSavingEdits}\n                showDeleteModal={!!onEditingChange}\n                saveEditedProperty={(oldKey, newPair) =>\n                  saveEditedCustomProperties(\n                    mergeUpdatedProperty({ customProperties, op: 'update', oldKey, newPair }),\n                  )\n                }\n                deleteProperty={(oldKey) =>\n                  saveEditedCustomProperties(\n                    mergeUpdatedProperty({ customProperties, op: 'delete', oldKey }),\n                  )\n                }\n              />\n            ))}\n            {isAdding && (\n              <ModelPropertiesTableRow\n                isAddRow\n                allExistingKeys={allExistingKeys}\n                setIsEditing={setIsAdding}\n                isSavingEdits={isSavingEdits}\n                setIsSavingEdits={setIsSavingEdits}\n                saveEditedProperty={(_oldKey, newPair) =>\n                  saveEditedCustomProperties(\n                    mergeUpdatedProperty({ customProperties, op: 'create', newPair }),\n                  )\n                }\n              />\n            )}\n          </Tbody>\n        </Table>\n      )}\n      {!isArchive && (\n        <Button\n          variant=\"link\"\n          data-testid=\"add-property-button\"\n          icon={<AddCircleOIcon />}\n          isDisabled={isAdding || isSavingEdits}\n          onClick={() => {\n            setIsShowingMoreProperties(true);\n            setIsAdding(true);\n          }}\n        >\n          Add property\n        </Button>\n      )}\n      {needExpandControl && (\n        <Button\n          variant=\"link\"\n          className={spacing.mtSm}\n          data-testid=\"expand-control-button\"\n          onClick={() => setIsShowingMoreProperties(!isShowingMoreProperties)}\n        >\n          {isShowingMoreProperties\n            ? 'Show fewer properties'\n            : `Show ${numHiddenKeys} more ${numHiddenKeys === 1 ? 'property' : 'properties'}`}\n        </Button>\n      )}\n    </ExpandableSection>\n  );\n};\n\nexport default ModelPropertiesExpandableSection;\n","import React from 'react';\nimport {\n  Card,\n  DescriptionList,\n  StackItem,\n  Stack,\n  CardBody,\n  CardTitle,\n  ClipboardCopy,\n  Content,\n  CardHeader,\n  CardExpandableContent,\n  Sidebar,\n  SidebarPanel,\n  SidebarContent,\n  Alert,\n} from '@patternfly/react-core';\nimport {\n  EditableTextDescriptionListGroup,\n  DashboardDescriptionListGroup,\n  EditableLabelsDescriptionListGroup,\n} from 'mod-arch-shared';\nimport { RegisteredModel } from '~/app/types';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\nimport ModelPropertiesExpandableSection from '~/app/pages/modelRegistry/screens/components/ModelPropertiesExpandableSection';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { getLabels, mergeUpdatedLabels } from '~/app/pages/modelRegistry/screens/utils';\n\ntype ModelDetailsCardProps = {\n  registeredModel: RegisteredModel;\n  refresh: () => void;\n  isArchiveModel?: boolean;\n  isExpandable?: boolean;\n};\n\nconst ModelDetailsCard: React.FC<ModelDetailsCardProps> = ({\n  registeredModel: rm,\n  refresh,\n  isArchiveModel,\n  isExpandable,\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const [isEditingProperties, setIsEditingProperties] = React.useState({\n    labels: false,\n    description: false,\n    properties: false,\n  });\n\n  const showEditingAlert = Object.values(isEditingProperties).some((value) => value);\n\n  const handleLabelsEditingChange = React.useCallback((isEditing: boolean) => {\n    setIsEditingProperties((prev) => ({ ...prev, labels: isEditing }));\n  }, []);\n\n  const handleDescriptionEditingChange = React.useCallback((isEditing: boolean) => {\n    setIsEditingProperties((prev) => ({ ...prev, description: isEditing }));\n  }, []);\n\n  const handlePropertiesEditingChange = React.useCallback((isEditing: boolean) => {\n    setIsEditingProperties((prev) => ({ ...prev, properties: isEditing }));\n  }, []);\n\n  const labelsSection = (\n    <EditableLabelsDescriptionListGroup\n      labels={getLabels(rm.customProperties)}\n      isArchive={isArchiveModel}\n      allExistingKeys={Object.keys(rm.customProperties)}\n      title=\"Labels\"\n      contentWhenEmpty=\"No labels\"\n      onLabelsChange={(editedLabels) =>\n        apiState.api\n          .patchRegisteredModel(\n            {},\n            {\n              customProperties: mergeUpdatedLabels(rm.customProperties, editedLabels),\n            },\n            rm.id,\n          )\n          .then(refresh)\n      }\n      isCollapsible={false}\n      labelProps={{ variant: 'outline' }}\n      onEditingChange={isExpandable ? handleLabelsEditingChange : undefined}\n    />\n  );\n\n  const descriptionSection = (\n    <EditableTextDescriptionListGroup\n      truncateMaxLines={3}\n      editableVariant=\"TextArea\"\n      baseTestId=\"model-description\"\n      title=\"Description\"\n      isArchive={isArchiveModel}\n      contentWhenEmpty=\"No description\"\n      value={rm.description || ''}\n      saveEditedValue={(value) =>\n        apiState.api\n          .patchRegisteredModel(\n            {},\n            {\n              description: value,\n            },\n            rm.id,\n          )\n          .then(refresh)\n      }\n      onEditingChange={isExpandable ? handleDescriptionEditingChange : undefined}\n    />\n  );\n\n  const infoSection = (\n    <>\n      <DashboardDescriptionListGroup\n        title=\"Owner\"\n        popover=\"The owner is the user who registered the model.\"\n      >\n        <Content component=\"p\" data-testid=\"registered-model-owner\">\n          {rm.owner || '-'}\n        </Content>\n      </DashboardDescriptionListGroup>\n      <DashboardDescriptionListGroup title=\"Model ID\">\n        <ClipboardCopy\n          hoverTip=\"Copy\"\n          clickTip=\"Copied\"\n          variant=\"inline-compact\"\n          data-testid=\"registered-model-id-clipboard-copy\"\n        >\n          {rm.id}\n        </ClipboardCopy>\n      </DashboardDescriptionListGroup>\n      <DashboardDescriptionListGroup\n        isEmpty={!rm.lastUpdateTimeSinceEpoch}\n        contentWhenEmpty=\"Unknown\"\n        title=\"Last modified\"\n      >\n        <ModelTimestamp timeSinceEpoch={rm.lastUpdateTimeSinceEpoch} />\n      </DashboardDescriptionListGroup>\n      <DashboardDescriptionListGroup\n        isEmpty={!rm.createTimeSinceEpoch}\n        contentWhenEmpty=\"Unknown\"\n        title=\"Created\"\n      >\n        <ModelTimestamp timeSinceEpoch={rm.createTimeSinceEpoch} />\n      </DashboardDescriptionListGroup>\n    </>\n  );\n\n  const propertiesSection = (\n    <ModelPropertiesExpandableSection\n      modelName={rm.name}\n      isArchive={isArchiveModel}\n      customProperties={rm.customProperties}\n      saveEditedCustomProperties={(editedProperties) =>\n        apiState.api\n          .patchRegisteredModel({}, { customProperties: editedProperties }, rm.id)\n          .then(refresh)\n      }\n      onEditingChange={isExpandable ? handlePropertiesEditingChange : undefined}\n    />\n  );\n\n  const cardBody = (\n    <>\n      {isExpandable && showEditingAlert && (\n        <CardBody>\n          <Alert\n            variant=\"info\"\n            title=\"Changes affect all model versions\"\n            ouiaId=\"InfoAlert\"\n            data-testid=\"edit-alert\"\n          >\n            <p>\n              Editing the model details will apply changes to all versions of the <b>{rm.name}</b>{' '}\n              model.\n            </p>\n          </Alert>\n        </CardBody>\n      )}\n      <CardBody>\n        {isExpandable ? (\n          <Sidebar hasBorder hasGutter isPanelRight>\n            <SidebarContent>\n              <DescriptionList>\n                {labelsSection}\n                {descriptionSection}\n                {propertiesSection}\n              </DescriptionList>\n              {/* TODO: Add model card markdown here  */}\n            </SidebarContent>\n            <SidebarPanel width={{ default: 'width_33' }}>\n              <DescriptionList>{infoSection}</DescriptionList>\n            </SidebarPanel>\n          </Sidebar>\n        ) : (\n          <Stack hasGutter>\n            <StackItem>\n              <DescriptionList>\n                {labelsSection}\n                {descriptionSection}\n              </DescriptionList>\n            </StackItem>\n            <StackItem>\n              <DescriptionList columnModifier={{ default: '1Col', md: '2Col' }}>\n                {infoSection}\n              </DescriptionList>\n            </StackItem>\n            <StackItem>{propertiesSection}</StackItem>\n            {/* TODO: Add model card markdown here  */}\n          </Stack>\n        )}\n      </CardBody>\n    </>\n  );\n\n  return (\n    <Card isExpanded={isExpanded} style={{ overflow: 'visible' }}>\n      {isExpandable ? (\n        <>\n          <CardHeader\n            onExpand={() => setIsExpanded(!isExpanded)}\n            toggleButtonProps={{\n              id: 'toggle-button1',\n              'data-testid': 'model-details-card-toggle-button',\n              'aria-label': 'Details',\n              'aria-expanded': isExpanded,\n            }}\n          >\n            <CardTitle>Model details</CardTitle>\n          </CardHeader>\n          <CardExpandableContent data-testid=\"model-details-card-expandable-content\">\n            {cardBody}\n          </CardExpandableContent>\n        </>\n      ) : (\n        <>\n          <CardTitle>Model details</CardTitle>\n          {cardBody}\n        </>\n      )}\n    </Card>\n  );\n};\n\nexport default ModelDetailsCard;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport {\n  modelVersionListUrl,\n  archiveModelVersionListUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\n\ntype ViewAllVersionsButtonProps = {\n  rmId?: string;\n  totalVersions: number;\n  isArchiveModel?: boolean;\n  showIcon?: boolean;\n};\n\nconst ViewAllVersionsButton: React.FC<ViewAllVersionsButtonProps> = ({\n  rmId,\n  totalVersions,\n  isArchiveModel,\n  showIcon = false,\n}) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n\n  return (\n    <Link\n      to={\n        isArchiveModel\n          ? archiveModelVersionListUrl(rmId, preferredModelRegistry?.name)\n          : modelVersionListUrl(rmId, preferredModelRegistry?.name)\n      }\n      style={{ textDecoration: 'none' }}\n    >\n      <Button\n        isInline\n        data-testid=\"versions-route-link\"\n        variant=\"link\"\n        icon={showIcon ? <ArrowRightIcon /> : undefined}\n        iconPosition={showIcon ? 'right' : undefined}\n      >\n        {`View all ${totalVersions} versions`}\n      </Button>\n    </Link>\n  );\n};\n\nexport default ViewAllVersionsButton;\n","import * as React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  List,\n  ListItem,\n  Label,\n  LabelGroup,\n  Button,\n  Flex,\n  FlexItem,\n  Divider,\n  Truncate,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { TruncatedText } from 'mod-arch-shared';\nimport { RegisteredModel } from '~/app/types';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { filterLiveVersions } from '~/app/utils';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport {\n  archiveModelVersionDetailsUrl,\n  modelVersionUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { getLabels } from '~/app/pages/modelRegistry/screens/utils';\nimport ViewAllVersionsButton from '~/app/pages/modelRegistry/screens/components/ViewAllVersionsButton';\n\ntype ModelVersionsCardProps = {\n  rm: RegisteredModel;\n  isArchiveModel?: boolean;\n};\n\nconst ModelVersionsCard: React.FC<ModelVersionsCardProps> = ({ rm, isArchiveModel }) => {\n  const [modelVersions] = useModelVersionsByRegisteredModel(rm.id);\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const filteredVersions = isArchiveModel\n    ? modelVersions.items\n    : filterLiveVersions(modelVersions.items);\n  const latestModelVersions = filteredVersions\n    .toSorted((a, b) => Number(b.createTimeSinceEpoch) - Number(a.createTimeSinceEpoch))\n    .slice(0, 3);\n\n  return (\n    <Card>\n      <CardTitle>Latest versions</CardTitle>\n      <CardBody>\n        <Divider />\n        {latestModelVersions.length > 0 ? (\n          <List isPlain isBordered>\n            {latestModelVersions.map((mv) => (\n              <ListItem\n                key={mv.id}\n                className=\"pf-v6-u-py-md\"\n                data-testid={`model-version-${mv.id}`}\n              >\n                <Flex spaceItems={{ default: 'spaceItemsXs' }} direction={{ default: 'column' }}>\n                  <FlexItem>\n                    <Link\n                      to={\n                        isArchiveModel\n                          ? archiveModelVersionDetailsUrl(\n                              mv.id,\n                              rm.id,\n                              preferredModelRegistry?.name,\n                            )\n                          : modelVersionUrl(mv.id, rm.id, preferredModelRegistry?.name)\n                      }\n                      style={{ textDecoration: 'none' }}\n                    >\n                      <Button isInline data-testid={`model-version-${mv.id}-link`} variant=\"link\">\n                        <Truncate content={mv.name} />\n                      </Button>\n                    </Link>\n                  </FlexItem>\n                  <FlexItem>\n                    <TruncatedText content={mv.description} maxLines={1} />\n                  </FlexItem>\n                  <FlexItem>\n                    <LabelGroup>\n                      {getLabels(mv.customProperties).map((label) => (\n                        <Label\n                          variant=\"outline\"\n                          key={label}\n                          data-testid={`model-version-${mv.id}-property-${label}`}\n                        >\n                          {label}\n                        </Label>\n                      ))}\n                    </LabelGroup>\n                  </FlexItem>\n                </Flex>\n              </ListItem>\n            ))}\n            <ListItem className=\"pf-v6-u-pt-md\">\n              <ViewAllVersionsButton\n                rmId={rm.id}\n                totalVersions={filteredVersions.length}\n                isArchiveModel={isArchiveModel}\n                showIcon\n              />\n            </ListItem>\n          </List>\n        ) : (\n          <div className=\"pf-v6-u-pt-md\" data-testid=\"no-versions-text\">\n            No versions\n          </div>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ModelVersionsCard;\n","import * as React from 'react';\nimport { Grid, GridItem, Stack } from '@patternfly/react-core';\nimport { RegisteredModel } from '~/app/types';\nimport ModelDetailsCard from './ModelDetailsCard';\nimport ModelVersionsCard from './ModelVersionsCard';\nimport { useExtensions } from '@odh-dashboard/plugin-core';\nimport { isModelDetailsDeploymentCardExtension } from '~/odh/extension-points';\nimport { LazyCodeRefComponent } from '@odh-dashboard/plugin-core';\nimport { useParams } from 'react-router';\n\ntype ModelDetailsViewProps = {\n  registeredModel: RegisteredModel;\n  refresh: () => void;\n  isArchiveModel?: boolean;\n};\n\nconst ModelDetailsView: React.FC<ModelDetailsViewProps> = ({\n  registeredModel: rm,\n  refresh,\n  isArchiveModel,\n}) => {\n  const { modelRegistry } = useParams<{ modelRegistry: string }>();\n  const modelDetailsDeploymentCardExtention = useExtensions(isModelDetailsDeploymentCardExtension);\n  const deploymentCard = modelDetailsDeploymentCardExtention.map((extension) => (\n    <LazyCodeRefComponent\n      key={extension.uid}\n      component={extension.properties.component}\n      props={{ mrName: modelRegistry, rmId: rm.id }}\n    />\n  ));\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={12} lg={8}>\n        <ModelDetailsCard registeredModel={rm} refresh={refresh} isArchiveModel={isArchiveModel} />\n      </GridItem>\n      <GridItem span={12} lg={4}>\n        <Stack hasGutter>\n          <ModelVersionsCard rm={rm} isArchiveModel={isArchiveModel} />\n          {deploymentCard}\n        </Stack>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default ModelDetailsView;\n","import * as React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DashboardModalFooter } from 'mod-arch-shared';\nimport { useNotification } from '~/app/hooks/useNotification';\n\ninterface ArchiveModelVersionModalProps {\n  onCancel: () => void;\n  onSubmit: () => void;\n  modelVersionName: string;\n}\n\nexport const ArchiveModelVersionModal: React.FC<ArchiveModelVersionModalProps> = ({\n  onCancel,\n  onSubmit,\n  modelVersionName,\n}) => {\n  const notification = useNotification();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n  const [confirmInputValue, setConfirmInputValue] = React.useState('');\n  const isDisabled = confirmInputValue.trim() !== modelVersionName || isSubmitting;\n\n  const onClose = React.useCallback(() => {\n    setConfirmInputValue('');\n    onCancel();\n  }, [onCancel]);\n\n  const onConfirm = React.useCallback(async () => {\n    setIsSubmitting(true);\n\n    try {\n      await onSubmit();\n      onClose();\n      notification.success(`${modelVersionName} archived.`);\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [onSubmit, onClose, notification, modelVersionName]);\n\n  return (\n    <Modal isOpen variant=\"small\" onClose={onClose} data-testid=\"archive-model-version-modal\">\n      <ModalHeader title=\"Archive model version?\" titleIconVariant=\"warning\" />\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>\n            <b>{modelVersionName}</b> will be archived and unavailable for use unless it is\n            restored.\n          </StackItem>\n          <StackItem>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsSm' }}>\n              <FlexItem>\n                Type <strong>{modelVersionName}</strong> to confirm archiving:\n              </FlexItem>\n              <TextInput\n                id=\"confirm-archive-input\"\n                data-testid=\"confirm-archive-input\"\n                aria-label=\"confirm archive input\"\n                value={confirmInputValue}\n                onChange={(_e, newValue) => setConfirmInputValue(newValue)}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter' && !isDisabled) {\n                    onConfirm();\n                  }\n                }}\n              />\n            </Flex>\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <DashboardModalFooter\n          onCancel={onClose}\n          onSubmit={onConfirm}\n          submitLabel=\"Archive\"\n          isSubmitLoading={isSubmitting}\n          isSubmitDisabled={isDisabled}\n          error={error}\n          alertTitle=\"Error\"\n        />\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import * as React from 'react';\nimport { DashboardModalFooter } from 'mod-arch-shared';\nimport { ModalBody, ModalFooter, ModalHeader, Modal } from '@patternfly/react-core';\nimport { useNotification } from '~/app/hooks/useNotification';\n\ninterface RestoreModelVersionModalProps {\n  onCancel: () => void;\n  onSubmit: () => void;\n  modelVersionName: string;\n}\n\nexport const RestoreModelVersionModal: React.FC<RestoreModelVersionModalProps> = ({\n  onCancel,\n  onSubmit,\n  modelVersionName,\n}) => {\n  const notification = useNotification();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n\n  const onClose = React.useCallback(() => {\n    onCancel();\n  }, [onCancel]);\n\n  const onConfirm = React.useCallback(async () => {\n    setIsSubmitting(true);\n\n    try {\n      await onSubmit();\n      onClose();\n      notification.success(`${modelVersionName} restored.`);\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [onSubmit, onClose, notification, modelVersionName]);\n\n  return (\n    <Modal isOpen variant=\"small\" onClose={onClose} data-testid=\"restore-model-version-modal\">\n      <ModalHeader title=\"Restore model version?\" titleIconVariant=\"warning\" />\n      <ModalBody>\n        <b>{modelVersionName}</b> will be restored and returned to the versions list.\n      </ModalBody>\n      <ModalFooter>\n        <DashboardModalFooter\n          onCancel={onClose}\n          onSubmit={onConfirm}\n          submitLabel=\"Restore\"\n          isSubmitLoading={isSubmitting}\n          error={error}\n          alertTitle=\"Error\"\n          isSubmitDisabled={isSubmitting}\n        />\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { ActionsColumn, IAction } from '@patternfly/react-table';\nimport { ModelVersion } from '~/app/types';\nimport DeployModalExtension from '~/odh/components/DeployModalExtension';\n\ntype MRVersionRowActionColumnsProps = {\n  mv: ModelVersion;\n  actions: IAction[];\n};\n\nconst MRVersionRowActionColumns: React.FC<MRVersionRowActionColumnsProps> = ({ mv, actions }) => (\n  <DeployModalExtension\n    mv={mv}\n    render={(buttonState, onOpenModal, isModalAvailable) =>\n      isModalAvailable ? (\n        <ActionsColumn\n          items={[\n            {\n              title: 'Deploy',\n              onClick: onOpenModal,\n              isAriaDisabled: !buttonState.enabled,\n              tooltipProps: !buttonState.tooltip ? { content: buttonState.tooltip } : undefined,\n            },\n            ...actions,\n          ]}\n        />\n      ) : (\n        <ActionsColumn items={actions} />\n      )\n    }\n  />\n);\n\nexport default MRVersionRowActionColumns;\n","import * as React from 'react';\nimport { IAction, Td, Tr } from '@patternfly/react-table';\nimport { Content, ContentVariants, Truncate, FlexItem } from '@patternfly/react-core';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ModelState, ModelVersion } from '~/app/types';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport {\n  archiveModelVersionDetailsUrl,\n  modelVersionArchiveDetailsUrl,\n  modelVersionUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\nimport ModelLabels from '~/app/pages/modelRegistry/screens/components/ModelLabels';\nimport { ArchiveModelVersionModal } from '~/app/pages/modelRegistry/screens/components/ArchiveModelVersionModal';\nimport { RestoreModelVersionModal } from '~/app/pages/modelRegistry/screens/components/RestoreModelVersionModal';\nimport MRVersionRowActionColumns from '~/odh/components/MRVersionRowActionColumns';\n\ntype ModelVersionsTableRowProps = {\n  modelVersion: ModelVersion;\n  isArchiveRow?: boolean;\n  isArchiveModel?: boolean;\n  hasDeployment?: boolean;\n  loaded?: boolean;\n  refresh: () => void;\n};\n\nconst ModelVersionsTableRow: React.FC<ModelVersionsTableRowProps> = ({\n  modelVersion: mv,\n  isArchiveRow,\n  isArchiveModel,\n  hasDeployment,\n  loaded = true,\n  refresh,\n}) => {\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { apiState } = React.useContext(ModelRegistryContext);\n\n  // TODO: Fetch model artifacts for when deploy functionality is enabled\n  // const [modelArtifacts, modelArtifactsLoaded, modelArtifactsLoadError] =\n  //   useModelArtifactsByVersionId(mv.id);\n\n  const [isArchiveModalOpen, setIsArchiveModalOpen] = React.useState(false);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = React.useState(false);\n\n  if (!preferredModelRegistry) {\n    return null;\n  }\n\n  const actions: IAction[] = isArchiveRow\n    ? [\n        {\n          title: 'Restore model version',\n          onClick: () => setIsRestoreModalOpen(true),\n        },\n      ]\n    : [\n        { isSeparator: true },\n        {\n          title: 'Archive model version',\n          onClick: () => setIsArchiveModalOpen(true),\n          isAriaDisabled: !loaded || hasDeployment,\n          tooltipProps: loaded && hasDeployment\n            ? { content: 'Deployed model versions cannot be archived' }\n            : undefined,\n        },\n      ];\n\n  return (\n    <Tr>\n      <Td dataLabel=\"Version name\">\n        <div id=\"model-version-name\" data-testid=\"model-version-name\">\n          <FlexItem>\n            <Link\n              to={\n                isArchiveModel\n                  ? archiveModelVersionDetailsUrl(\n                      mv.id,\n                      mv.registeredModelId,\n                      preferredModelRegistry.name,\n                    )\n                  : isArchiveRow\n                    ? modelVersionArchiveDetailsUrl(\n                        mv.id,\n                        mv.registeredModelId,\n                        preferredModelRegistry.name,\n                      )\n                    : modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry.name)\n              }\n            >\n              <Truncate content={mv.name} />\n            </Link>\n          </FlexItem>\n        </div>\n        {mv.description && (\n          <Content data-testid=\"model-version-description\" component={ContentVariants.small}>\n            <Truncate content={mv.description} />\n          </Content>\n        )}\n      </Td>\n      <Td dataLabel=\"Last modified\">\n        <ModelTimestamp timeSinceEpoch={mv.lastUpdateTimeSinceEpoch} />\n      </Td>\n      <Td dataLabel=\"Author\">{mv.author}</Td>\n      <Td dataLabel=\"Labels\">\n        <ModelLabels customProperties={mv.customProperties} name={mv.name} />\n      </Td>\n      {!isArchiveModel && (\n        <Td isActionCell>\n          <MRVersionRowActionColumns mv={mv} actions={actions} />\n          {isArchiveModalOpen ? (\n            <ArchiveModelVersionModal\n              onCancel={() => setIsArchiveModalOpen(false)}\n              onSubmit={() =>\n                apiState.api\n                  .patchModelVersion(\n                    {},\n                    {\n                      state: ModelState.ARCHIVED,\n                    },\n                    mv.id,\n                  )\n                  .then(refresh)\n              }\n              modelVersionName={mv.name}\n            />\n          ) : null}\n          {/* TODO: [Model Serving] Uncomment when model serving is available */}\n          {/* NOTE: When uncommenting, pass modelArtifacts prop to avoid duplicate fetching */}\n          {/* {isDeployModalOpen ? (\n            <DeployRegisteredModelModal\n              onSubmit={() => {\n                navigate(\n                  modelVersionDeploymentsUrl(\n                    mv.id,\n                    mv.registeredModelId,\n                    preferredModelRegistry.metadata.name,\n                  ),\n                );\n              }}\n              onCancel={() => setIsDeployModalOpen(false)}\n              modelVersion={mv}\n            />\n          ) : null} */}\n          {isRestoreModalOpen ? (\n            <RestoreModelVersionModal\n              onCancel={() => setIsRestoreModalOpen(false)}\n              onSubmit={() =>\n                apiState.api\n                  .patchModelVersion(\n                    {},\n                    {\n                      state: ModelState.LIVE,\n                    },\n                    mv.id,\n                  )\n                  .then(() =>\n                    navigate(\n                      modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry.name),\n                    ),\n                  )\n              }\n              modelVersionName={mv.name}\n            />\n          ) : null}\n        </Td>\n      )}\n    </Tr>\n  );\n};\n\nexport default ModelVersionsTableRow;\n","import React from 'react';\n\n// Context for sharing deployments state\ntype DeploymentsStateContextType = {\n  deployments?: any[];\n  loaded: boolean;\n};\n\nexport const DeploymentsStateContext = React.createContext<DeploymentsStateContextType>({\n  deployments: undefined,\n  loaded: false,\n});\n\n/**\n * Hook to access deployments state from shared context.\n * Must be used within MRDeploymentsContextProvider.\n */\nexport const useDeploymentsState = () => {\n  const context = React.useContext(DeploymentsStateContext);\n\n  return context;\n};\n","export enum KnownLabels {\n  DASHBOARD_RESOURCE = 'opendatahub.io/dashboard',\n  PROJECT_SHARING = 'opendatahub.io/project-sharing',\n  MODEL_SERVING_PROJECT = 'modelmesh-enabled',\n  DATA_CONNECTION_AWS = 'opendatahub.io/managed',\n  LABEL_SELECTOR_MODEL_REGISTRY = 'component=model-registry',\n  LABEL_SELECTOR_DATA_SCIENCE_PIPELINES = 'data-science-pipelines',\n  PROJECT_SUBJECT = 'opendatahub.io/rb-project-subject',\n  REGISTERED_MODEL_ID = 'modelregistry.opendatahub.io/registered-model-id',\n  MODEL_VERSION_ID = 'modelregistry.opendatahub.io/model-version-id',\n  MODEL_REGISTRY_NAME = 'modelregistry.opendatahub.io/name',\n  KUEUE_MANAGED = 'kueue.openshift.io/managed',\n}","import React from 'react';\nimport { DeploymentsStateContext } from '~/odh/hooks/useDeploymentsState';\nimport { useResolvedExtensions } from '@odh-dashboard/plugin-core';\nimport { isModelRegistryVersionDeploymentsContextExtension } from '~/odh/extension-points/deploy';\n\ninterface MRDeploymentsContextProviderProps {\n  children: React.ReactNode;\n  labelSelectors?: { [key: string]: string };\n  mrName?: string;\n}\n\n/**\n * Provider component that automatically wraps children with deployments context if available.\n * Uses extensions to provide the deployments provider.\n */\nexport const MRDeploymentsContextProvider: React.FC<MRDeploymentsContextProviderProps> = ({\n  children,\n  labelSelectors,\n  mrName,\n}) => {\n  const [deploymentsContextExtensions, deploymentsContextLoaded] = useResolvedExtensions(\n    isModelRegistryVersionDeploymentsContextExtension,\n  );\n\n  const DeploymentsProviderComponent = React.useMemo(\n    () =>\n      deploymentsContextLoaded && deploymentsContextExtensions?.[0]?.properties.DeploymentsProvider,\n    [deploymentsContextLoaded, deploymentsContextExtensions],\n  );\n\n  if (deploymentsContextLoaded && DeploymentsProviderComponent) {\n    return (\n      <DeploymentsProviderComponent labelSelectors={labelSelectors} mrName={mrName}>\n        {\n          (deploymentsContextValue) => (\n              <DeploymentsStateContext.Provider value={deploymentsContextValue}>\n                {children}\n              </DeploymentsStateContext.Provider>\n          )\n        }\n      </DeploymentsProviderComponent>\n    );\n  }\n\n  return children;\n};\n","import * as React from 'react';\nimport { DashboardEmptyTableView, SortableData, Table } from 'mod-arch-shared';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { mvColumns } from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableColumns';\nimport ModelVersionsTableRow from '../../app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableRow';\nimport { useDeploymentsState } from '~/odh/hooks/useDeploymentsState';\nimport { KnownLabels } from '~/odh/k8sTypes';\nimport { MRDeploymentsContextProvider } from './MRDeploymentsContextProvider';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\n\ntype OdhModelVersionsTableProps = {\n    data: ModelVersion[];\n    columns: SortableData<ModelVersion>[];\n    defaultSortColumn: number;\n    enablePagination: boolean;\n    onClearFilters: () => void;\n    emptyTableView: React.ReactNode;\n    isArchiveModel?: boolean;\n    refresh: () => void;\n    rm: RegisteredModel;\n} & Partial<Pick<React.ComponentProps<typeof Table>, 'toolbarContent'>>;\n\nconst OdhModelVersionsTableContent: React.FC<Omit<OdhModelVersionsTableProps, 'rm'>> = ({\n  data,\n  columns,\n  defaultSortColumn,\n  enablePagination,\n  onClearFilters,\n  emptyTableView,\n  toolbarContent,\n  isArchiveModel,\n  refresh,\n  ...props\n}) => {\n    const { deployments, loaded } = useDeploymentsState();\n    const hasDeploys = (mvId: string) =>\n        !!deployments?.some(\n            (s) => s.model.kind === 'InferenceService' && s.model.metadata.labels?.[KnownLabels.MODEL_VERSION_ID] === mvId,\n        );\n    return (\n        <Table\n            data={data}\n            columns={columns}\n            toolbarContent={toolbarContent}\n            defaultSortColumn={defaultSortColumn}\n            enablePagination={enablePagination}\n            onClearFilters={onClearFilters}\n            emptyTableView={emptyTableView}\n            rowRenderer={(mv: ModelVersion) => (\n                <ModelVersionsTableRow\n                    key={mv.name}\n                    modelVersion={mv}\n                    isArchiveModel={isArchiveModel}\n                    refresh={refresh}\n                    hasDeployment={hasDeploys(mv.id) && loaded}\n                />\n            )}\n            {...props}\n        />\n    );\n}\n\nconst OdhModelVersionsTable: React.FC<OdhModelVersionsTableProps> = ({\n  data,\n  columns,\n  toolbarContent,\n  defaultSortColumn,\n  enablePagination,\n  onClearFilters,\n  emptyTableView,\n  isArchiveModel,\n  refresh,\n  rm,\n  ...props\n}) => {\n    const labelSelectors = {\n        [KnownLabels.REGISTERED_MODEL_ID]: rm.id,\n    }\n    const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n    return (\n        <MRDeploymentsContextProvider labelSelectors={labelSelectors} mrName={preferredModelRegistry?.name}>\n            <OdhModelVersionsTableContent\n                data={data}\n                columns={columns}\n                defaultSortColumn={defaultSortColumn}\n                enablePagination={enablePagination}\n                onClearFilters={onClearFilters}\n                emptyTableView={emptyTableView}\n                toolbarContent={toolbarContent}\n                isArchiveModel={isArchiveModel}\n                refresh={refresh}\n                {...props}\n            />\n        </MRDeploymentsContextProvider>\n    )\n};\n\n\nexport default OdhModelVersionsTable;","import { SortableData } from 'mod-arch-shared';\nimport { ModelVersion } from '~/app/types';\n\nexport const mvColumns: SortableData<ModelVersion>[] = [\n  {\n    field: 'version name',\n    label: 'Version name',\n    sortable: (a, b) => a.name.localeCompare(b.name),\n    width: 40,\n  },\n  {\n    field: 'last_modified',\n    label: 'Last modified',\n    sortable: (a: ModelVersion, b: ModelVersion): number => {\n      const first = parseInt(a.lastUpdateTimeSinceEpoch);\n      const second = parseInt(b.lastUpdateTimeSinceEpoch);\n      return new Date(second).getTime() - new Date(first).getTime();\n    },\n  },\n  {\n    field: 'author',\n    label: 'Author',\n    sortable: (a: ModelVersion, b: ModelVersion): number => {\n      const first = a.author || '';\n      const second = b.author || '';\n      return first.localeCompare(second);\n    },\n    info: {\n      popover: 'The author is the user who registered the model version.',\n    },\n  },\n  {\n    field: 'labels',\n    label: 'Labels',\n    sortable: false,\n    width: 35,\n  },\n  {\n    field: 'kebab',\n    label: '',\n    sortable: false,\n  },\n];\n","import * as React from 'react';\nimport { DashboardEmptyTableView, Table } from 'mod-arch-shared';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport OdhModelVersionsTable from '~/odh/components/OdhModelVersionsTable';\nimport { mvColumns } from './ModelVersionsTableColumns';\n\ntype ModelVersionsTableProps = {\n  clearFilters: () => void;\n  modelVersions: ModelVersion[];\n  isArchiveModel?: boolean;\n  refresh: () => void;\n  rm: RegisteredModel;\n} & Partial<Pick<React.ComponentProps<typeof Table>, 'toolbarContent'>>;\n\nconst ModelVersionsTable: React.FC<ModelVersionsTableProps> = ({\n  clearFilters,\n  modelVersions,\n  toolbarContent,\n  isArchiveModel,\n  refresh,\n  rm,\n}) => (\n  <OdhModelVersionsTable\n    data-testid=\"model-versions-table\"\n    data={modelVersions}\n    columns={mvColumns}\n    toolbarContent={toolbarContent}\n    defaultSortColumn={3}\n    enablePagination\n    onClearFilters={clearFilters}\n    emptyTableView={<DashboardEmptyTableView onClearFilters={clearFilters} />}\n    isArchiveModel={isArchiveModel}\n    refresh={refresh}\n    rm={rm}\n  />\n);\n\nexport default ModelVersionsTable;\n","import * as React from 'react';\nimport {\n  Alert,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  MenuToggle,\n  MenuToggleElement,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { EllipsisVIcon, FilterIcon } from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { ProjectObjectType, typedEmptyImage } from 'mod-arch-shared';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport EmptyModelRegistryState from '~/app/pages/modelRegistry/screens/components/EmptyModelRegistryState';\nimport {\n  modelVersionArchiveUrl,\n  registerVersionForModelUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport {\n  filterModelVersions,\n  sortModelVersionsByCreateTime,\n} from '~/app/pages/modelRegistry/screens/utils';\nimport ModelVersionsTable from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTable';\nimport { filterArchiveVersions, filterLiveVersions } from '~/app/utils';\nimport {\n  initialModelRegistryVersionsFilterData,\n  ModelRegistryVersionsFilterDataType,\n  modelRegistryVersionsFilterOptions,\n  ModelRegistryVersionsFilterOptions,\n} from '~/app/pages/modelRegistry/screens/const';\nimport FilterToolbar from '~/app/shared/components/FilterToolbar';\nimport ThemeAwareSearchInput from '~/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput';\n\ntype ModelVersionListViewProps = {\n  modelVersions: ModelVersion[];\n  registeredModel: RegisteredModel;\n  isArchiveModel?: boolean;\n  refresh: () => void;\n};\n\nconst ModelVersionListView: React.FC<ModelVersionListViewProps> = ({\n  modelVersions,\n  registeredModel: rm,\n  isArchiveModel,\n  refresh,\n}) => {\n  const unfilteredModelVersions = isArchiveModel\n    ? modelVersions\n    : filterLiveVersions(modelVersions);\n\n  const archiveModelVersions = filterArchiveVersions(modelVersions);\n  const navigate = useNavigate();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const [filterData, setFilterData] = React.useState<ModelRegistryVersionsFilterDataType>(\n    initialModelRegistryVersionsFilterData,\n  );\n\n  const onFilterUpdate = React.useCallback(\n    (key: string, value: string | { label: string; value: string } | undefined) =>\n      setFilterData((prevValues) => ({ ...prevValues, [key]: value })),\n    [setFilterData],\n  );\n\n  const onClearFilters = React.useCallback(\n    () => setFilterData(initialModelRegistryVersionsFilterData),\n    [setFilterData],\n  );\n\n  const [isArchivedModelVersionKebabOpen, setIsArchivedModelVersionKebabOpen] =\n    React.useState(false);\n\n  const filteredModelVersions = filterModelVersions(unfilteredModelVersions, filterData);\n  const date = rm.lastUpdateTimeSinceEpoch && new Date(parseInt(rm.lastUpdateTimeSinceEpoch));\n\n  if (unfilteredModelVersions.length === 0) {\n    if (isArchiveModel) {\n      return (\n        <EmptyModelRegistryState\n          testid=\"empty-archive-model-versions\"\n          title=\"No versions\"\n          headerIcon={() => (\n            <img\n              src={typedEmptyImage(ProjectObjectType.registeredModels, 'MissingVersion')}\n              alt=\"missing version\"\n            />\n          )}\n          description={`${rm.name} has no registered versions.`}\n        />\n      );\n    }\n    return (\n      <EmptyModelRegistryState\n        testid=\"empty-model-versions\"\n        title=\"No versions\"\n        headerIcon={() => (\n          <img\n            src={typedEmptyImage(ProjectObjectType.registeredModels, 'MissingVersion')}\n            alt=\"missing version\"\n          />\n        )}\n        description={`${rm.name} has no registered versions. Register a version to this model.`}\n        primaryActionText=\"Register new version\"\n        primaryActionOnClick={() => {\n          navigate(registerVersionForModelUrl(rm.id, preferredModelRegistry?.name));\n        }}\n        secondaryActionText={\n          archiveModelVersions.length !== 0 ? 'View archived versions' : undefined\n        }\n        secondaryActionOnClick={() => {\n          navigate(modelVersionArchiveUrl(rm.id, preferredModelRegistry?.name));\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      {isArchiveModel && (\n        <Alert\n          variant=\"warning\"\n          isInline\n          title={`All the versions have been archived along with the model on ${\n            date\n              ? `${date.toLocaleString('en-US', {\n                  month: 'long',\n                  timeZone: 'UTC',\n                })} ${date.getUTCDate()}, ${date.getUTCFullYear()}`\n              : '--'\n          }. They are now read-only and can only be restored together with the model.`}\n        />\n      )}\n      <ModelVersionsTable\n        refresh={refresh}\n        isArchiveModel={isArchiveModel}\n        clearFilters={onClearFilters}\n        modelVersions={sortModelVersionsByCreateTime(filteredModelVersions)}\n        rm={rm}\n        toolbarContent={\n          <Toolbar data-testid=\"model-versions-table-toolbar\" clearAllFilters={onClearFilters}>\n            <ToolbarContent>\n              {/* TODO: Remove this Flex after the ToolbarContent can center the children elements */}\n              <Flex>\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n                  <ToolbarGroup variant=\"filter-group\">\n                    <FilterToolbar\n                      filterOptions={modelRegistryVersionsFilterOptions}\n                      filterOptionRenders={{\n                        [ModelRegistryVersionsFilterOptions.keyword]: ({ onChange, ...props }) => (\n                          <ThemeAwareSearchInput\n                            {...props}\n                            fieldLabel=\"Filter by keyword\"\n                            placeholder=\"Filter by keyword\"\n                            className=\"toolbar-fieldset-wrapper\"\n                            style={{ minWidth: '270px' }}\n                            onChange={(value) => onChange(value)}\n                          />\n                        ),\n                        [ModelRegistryVersionsFilterOptions.author]: ({ onChange, ...props }) => (\n                          <ThemeAwareSearchInput\n                            {...props}\n                            fieldLabel=\"Filter by author\"\n                            placeholder=\"Filter by author\"\n                            className=\"toolbar-fieldset-wrapper\"\n                            style={{ minWidth: '270px' }}\n                            onChange={(value) => onChange(value)}\n                          />\n                        ),\n                      }}\n                      filterData={filterData}\n                      onFilterUpdate={onFilterUpdate}\n                    />\n                  </ToolbarGroup>\n                </ToolbarToggleGroup>\n\n                {!isArchiveModel && (\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <Button\n                        variant=\"primary\"\n                        onClick={() => {\n                          navigate(registerVersionForModelUrl(rm.id, preferredModelRegistry?.name));\n                        }}\n                      >\n                        Register new version\n                      </Button>\n                    </ToolbarItem>\n                    <ToolbarItem>\n                      <Dropdown\n                        isOpen={isArchivedModelVersionKebabOpen}\n                        onSelect={() => setIsArchivedModelVersionKebabOpen(false)}\n                        onOpenChange={(isOpen: boolean) =>\n                          setIsArchivedModelVersionKebabOpen(isOpen)\n                        }\n                        toggle={(tr: React.Ref<MenuToggleElement>) => (\n                          <MenuToggle\n                            data-testid=\"model-versions-table-kebab-action\"\n                            ref={tr}\n                            variant=\"plain\"\n                            onClick={() =>\n                              setIsArchivedModelVersionKebabOpen(!isArchivedModelVersionKebabOpen)\n                            }\n                            isExpanded={isArchivedModelVersionKebabOpen}\n                            aria-label=\"View archived versions\"\n                          >\n                            <EllipsisVIcon />\n                          </MenuToggle>\n                        )}\n                        shouldFocusToggleOnSelect\n                        popperProps={{ appendTo: 'inline' }}\n                      >\n                        <DropdownList>\n                          <DropdownItem\n                            onClick={() =>\n                              navigate(modelVersionArchiveUrl(rm.id, preferredModelRegistry?.name))\n                            }\n                          >\n                            View archived versions\n                          </DropdownItem>\n                        </DropdownList>\n                      </Dropdown>\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                )}\n              </Flex>\n            </ToolbarContent>\n          </Toolbar>\n        }\n      />\n    </>\n  );\n};\n\nexport default ModelVersionListView;\n","import * as React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { PageSection, Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport ModelDetailsView from '~/app/pages/modelRegistry/screens/ModelVersions/ModelDetailsView';\nimport { ModelVersion, RegisteredModel } from '~/app/types';\nimport {\n  ModelVersionsTab,\n  ModelVersionsTabTitle,\n} from '~/app/pages/modelRegistry/screens/ModelVersions/const';\nimport ModelVersionListView from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionListView';\nimport { isModelRegistryDetailsTabExtension } from '~/odh/extension-points/details';\nimport { LazyCodeRefComponent, useExtensions } from '@odh-dashboard/plugin-core';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\n\ntype ModelVersionsTabProps = {\n  tab: ModelVersionsTab | string;\n  registeredModel: RegisteredModel;\n  modelVersions: ModelVersion[];\n  isArchiveModel?: boolean;\n  refresh: () => void;\n  mvRefresh: () => void;\n};\n\nconst ModelVersionsTabs: React.FC<ModelVersionsTabProps> = ({\n  tab,\n  registeredModel: rm,\n  modelVersions,\n  refresh,\n  isArchiveModel,\n  mvRefresh,\n}) => {\n  const navigate = useNavigate();\n  const tabExtensions = useExtensions(isModelRegistryDetailsTabExtension);\n  const { registeredModelId: rmId } = useParams();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  \n  const modelDetailsTabs = [\n    <Tab\n      key={ModelVersionsTab.OVERVIEW}\n      eventKey={ModelVersionsTab.OVERVIEW}\n      title={<TabTitleText>{ModelVersionsTabTitle.OVERVIEW}</TabTitleText>}\n      aria-label=\"Model Overview tab\"\n      data-testid=\"model-overview-tab\"\n    >\n      <PageSection hasBodyWrapper={false} isFilled data-testid=\"model-details-tab-content\">\n        <ModelDetailsView\n          registeredModel={rm}\n          refresh={refresh}\n          isArchiveModel={isArchiveModel}\n        />\n      </PageSection>\n    </Tab>,\n    <Tab\n      key={ModelVersionsTab.VERSIONS}\n      eventKey={ModelVersionsTab.VERSIONS}\n      title={<TabTitleText>{ModelVersionsTabTitle.VERSIONS}</TabTitleText>}\n      aria-label=\"Model versions tab\"\n      data-testid=\"model-versions-tab\"\n    >\n      <PageSection hasBodyWrapper isFilled data-testid=\"model-versions-tab-content\">\n        <ModelVersionListView\n          isArchiveModel={isArchiveModel}\n          modelVersions={modelVersions}\n          registeredModel={rm}\n          refresh={mvRefresh}\n        />\n      </PageSection>\n    </Tab>,\n    ...tabExtensions.map((extension) => (\n      <Tab\n        key={extension.properties.id}\n        eventKey={extension.properties.id}\n        aria-label={`${extension.properties.title} tab`}\n        data-testid={`${extension.properties.id}-tab`}\n        title={<TabTitleText>{extension.properties.title}</TabTitleText>}\n      >\n        <PageSection\n          hasBodyWrapper={false}\n          isFilled\n          data-testid={`${extension.properties.id}-tab-content`}\n        >\n          <LazyCodeRefComponent\n            component={extension.properties.component}\n            props={{ rmId, mrName: preferredModelRegistry?.name }}\n          />\n        </PageSection>\n      </Tab>\n    )),\n  ];\n\n  return (\n    <Tabs\n      activeKey={tab}\n      aria-label=\"Model versions page tabs\"\n      role=\"region\"\n      data-testid=\"model-versions-page-tabs\"\n      onSelect={(_event, eventKey) => navigate(`../${eventKey}`, { relative: 'path' })}\n    >\n      {modelDetailsTabs}\n    </Tabs>\n  );\n};\nexport default ModelVersionsTabs;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelVersionsTab } from '../../app/pages/modelRegistry/screens/ModelVersions/const';\nimport useModelVersionsByRegisteredModel from '../../app/hooks/useModelVersionsByRegisteredModel';\nimport useRegisteredModelById from '../../app/hooks/useRegisteredModelById';\nimport { ModelRegistrySelectorContext } from '../../app/context/ModelRegistrySelectorContext';\nimport ModelVersionsHeaderActions from '../../app/pages/modelRegistry/screens/ModelVersions/ModelVersionsHeaderActions';\nimport { ModelState } from '../../app/types';\nimport { registeredModelArchiveDetailsUrl } from '../../app/pages/modelRegistry/screens/routeUtils';\nimport ModelVersionsTabs from '../../app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTabs';\nimport { KnownLabels } from '../k8sTypes';\nimport { MRDeploymentsContextProvider } from './MRDeploymentsContextProvider';\n\ntype ModelVersionsProps = {\n  tab: ModelVersionsTab | string;\n} & Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst ModelVersionsContent: React.FC<ModelVersionsProps> = ({ tab, ...pageProps }) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { registeredModelId: rmId } = useParams();\n  const [modelVersions, mvLoaded, mvLoadError, mvRefresh] = useModelVersionsByRegisteredModel(rmId);\n  const [rm, rmLoaded, rmLoadError, rmRefresh] = useRegisteredModelById(rmId);\n  const loadError = mvLoadError || rmLoadError;\n  const loaded = mvLoaded && rmLoaded;\n  const navigate = useNavigate();\n  \n\n\n  // Find the latest model version (non-archived)\n  const latestModelVersion = React.useMemo(() => {\n    if (!modelVersions.items?.length) return undefined;\n    const liveVersions = modelVersions.items.filter(mv => mv.state !== ModelState.ARCHIVED);\n    return liveVersions\n      .toSorted((a, b) => Number(b.createTimeSinceEpoch) - Number(a.createTimeSinceEpoch))[0];\n  }, [modelVersions.items]);\n\n  useEffect(() => {\n    if (rm?.state === ModelState.ARCHIVED) {\n      navigate(registeredModelArchiveDetailsUrl(rm.id, preferredModelRegistry?.name));\n    }\n  }, [rm?.state, rm?.id, preferredModelRegistry?.name, navigate]);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to=\"/model-registry\">Model registry - {preferredModelRegistry?.name}</Link>\n            )}\n          />\n          <BreadcrumbItem data-testid=\"breadcrumb-model\" isActive>\n            {rm?.name || 'Loading...'}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      }\n      title={rm?.name}\n      headerAction={rm && <ModelVersionsHeaderActions rm={rm} latestModelVersion={latestModelVersion} />}\n      loadError={loadError}\n      loaded={loaded}\n      provideChildrenPadding\n    >\n      {rm !== null && (\n        <ModelVersionsTabs\n          tab={tab}\n          registeredModel={rm}\n          refresh={rmRefresh}\n          mvRefresh={mvRefresh}\n          modelVersions={modelVersions.items}\n        />\n      )}\n    </ApplicationsPage>\n  );\n};\n\nconst ModelVersions: React.FC<ModelVersionsProps> = (props) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { registeredModelId: rmId } = useParams();\n  \n  const labelSelectors = React.useMemo(() => {\n    return rmId ? { [KnownLabels.REGISTERED_MODEL_ID]: rmId } : undefined;\n  }, [rmId]);\n  \n  return (\n    <MRDeploymentsContextProvider labelSelectors={labelSelectors} mrName={preferredModelRegistry?.name}>\n      <ModelVersionsContent {...props} />\n    </MRDeploymentsContextProvider>\n  );\n};\n\nexport default ModelVersions;\n","export enum ModelVersionDetailsTab {\n  DETAILS = 'details',\n}\n\nexport enum ModelVersionDetailsTabTitle {\n  DETAILS = 'Details',\n}\n","import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise, NotReadyError } from 'mod-arch-core';\nimport { ModelVersion } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useModelVersionById = (modelVersionId?: string): FetchState<ModelVersion | null> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n\n  const call = React.useCallback<FetchStateCallbackPromise<ModelVersion | null>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!modelVersionId) {\n        return Promise.reject(new NotReadyError('No model version id'));\n      }\n\n      return api.getModelVersion(opts, modelVersionId);\n    },\n    [api, apiAvailable, modelVersionId],\n  );\n\n  return useFetchState(call, null);\n};\n\nexport default useModelVersionById;\n","import * as React from 'react';\nimport {\n  Menu,\n  MenuContainer,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuSearch,\n  MenuSearchInput,\n  MenuToggle,\n  SearchInput,\n  Divider,\n  Badge,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ModelVersion } from '~/app/types';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { filterLiveVersions } from '~/app/utils';\nimport ViewAllVersionsButton from '~/app/pages/modelRegistry/screens/components/ViewAllVersionsButton';\n\ntype ModelVersionSelectorProps = {\n  rmId?: string;\n  selection: ModelVersion;\n  onSelect: (versionId: string) => void;\n};\n\nconst ModelVersionSelector: React.FC<ModelVersionSelectorProps> = ({\n  rmId,\n  selection,\n  onSelect,\n}) => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [input, setInput] = React.useState('');\n\n  const toggleRef = React.useRef(null);\n  const menuRef = React.useRef(null);\n  const [modelVersions] = useModelVersionsByRegisteredModel(rmId);\n  const liveModelVersions = filterLiveVersions(modelVersions.items);\n  const latestVersion = liveModelVersions.reduce<ModelVersion | null>((latest, current) => {\n    if (\n      latest === null ||\n      Number(current.createTimeSinceEpoch) > Number(latest.createTimeSinceEpoch)\n    ) {\n      return current;\n    }\n    return latest;\n  }, null);\n\n  const menuListItems = liveModelVersions\n    .filter((item) => input === '' || item.name.toLowerCase().includes(input.toLowerCase()))\n    .toSorted((a, b) => Number(b.createTimeSinceEpoch) - Number(a.createTimeSinceEpoch)) // Sort by creation time, newest first\n    .map((mv, index) => (\n      <MenuItem isSelected={mv.id === selection.id} itemId={mv.id} key={index}>\n        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n          <FlexItem>{mv.name}</FlexItem>\n          <FlexItem>\n            {latestVersion && mv.id === latestVersion.id && <Badge color=\"blue\">Latest</Badge>}\n          </FlexItem>\n        </Flex>\n      </MenuItem>\n    ));\n\n  if (input.length > 0 && liveModelVersions.length === 0) {\n    menuListItems.push(\n      <MenuItem isDisabled key=\"no result\">\n        No results found\n      </MenuItem>,\n    );\n  }\n\n  const menu = (\n    <Menu\n      onSelect={(_e, itemId) => {\n        if (typeof itemId === 'string') {\n          onSelect(itemId);\n          setOpen(false);\n        }\n      }}\n      data-id=\"model-version-selector-menu\"\n      ref={menuRef}\n      isScrollable\n      activeItemId={selection.id}\n    >\n      <MenuSearch>\n        <MenuSearchInput>\n          <SearchInput\n            data-testid=\"search-input\"\n            value={input}\n            aria-label=\"Filter menu items\"\n            placeholder=\"Find by version name\"\n            onChange={(_event, value) => setInput(value)}\n          />\n        </MenuSearchInput>\n      </MenuSearch>\n      <Divider />\n      <MenuContent>\n        <MenuList data-testid=\"model-version-selector-list\">\n          {menuListItems}\n          <MenuItem>\n            <ViewAllVersionsButton rmId={rmId} totalVersions={modelVersions.items.length} />\n          </MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n\n  return (\n    <MenuContainer\n      isOpen={isOpen}\n      toggleRef={toggleRef}\n      toggle={\n        <MenuToggle\n          id=\"model-version-selector\"\n          ref={toggleRef}\n          onClick={() => setOpen(!isOpen)}\n          isExpanded={isOpen}\n          isFullWidth\n          data-testid=\"model-version-toggle-button\"\n        >\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>{selection.name}</FlexItem>\n            <FlexItem>\n              {latestVersion && selection.id === latestVersion.id && (\n                <Badge color=\"blue\">Latest</Badge>\n              )}\n            </FlexItem>\n          </Flex>\n        </MenuToggle>\n      }\n      menu={menu}\n      menuRef={menuRef}\n      onOpenChange={(open) => setOpen(open)}\n    />\n  );\n};\n\nexport default ModelVersionSelector;\n","import * as React from 'react';\nimport { DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\nimport { ModelRegistryCustomProperties } from '~/app/types';\nimport ModelPropertiesExpandableSection from '~/app/pages/modelRegistry/screens/components/ModelPropertiesExpandableSection';\n\ntype ModelPropertiesDescriptionListGroupProps = {\n  customProperties: ModelRegistryCustomProperties;\n  isArchive?: boolean;\n  saveEditedCustomProperties: (properties: ModelRegistryCustomProperties) => Promise<unknown>;\n};\n\nconst ModelPropertiesDescriptionListGroup: React.FC<ModelPropertiesDescriptionListGroupProps> = ({\n  customProperties = {},\n  isArchive,\n  saveEditedCustomProperties,\n}) => (\n  <DescriptionListGroup>\n    <DescriptionListDescription>\n      <ModelPropertiesExpandableSection\n        customProperties={customProperties}\n        isArchive={isArchive}\n        saveEditedCustomProperties={saveEditedCustomProperties}\n        isExpandedByDefault\n      />\n    </DescriptionListDescription>\n  </DescriptionListGroup>\n);\n\nexport default ModelPropertiesDescriptionListGroup;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DashboardDescriptionListGroup } from 'mod-arch-shared';\nimport { ModelArtifact } from '~/app/types';\nimport { modelSourcePropertiesToCatalogParams } from '~/concepts/modelRegistry/utils';\nimport { getCatalogModelDetailsRoute } from '~/app/routes/modelCatalog/catalogModelDetails';\n\ntype ModelVersionRegisteredFromLinkProps = {\n  modelArtifact: ModelArtifact;\n  isModelCatalogAvailable: boolean;\n};\n\nconst ModelVersionRegisteredFromLink: React.FC<ModelVersionRegisteredFromLinkProps> = ({\n  modelArtifact,\n  isModelCatalogAvailable,\n}) => {\n  const registeredFromCatalogDetails = modelSourcePropertiesToCatalogParams(modelArtifact);\n  if (!registeredFromCatalogDetails) {\n    return null;\n  }\n\n  const registeredfromText = (\n    <span className=\"pf-v6-u-font-weight-bold\" data-testid=\"registered-from-catalog\">\n      {registeredFromCatalogDetails.modelName}\n    </span>\n  );\n\n  const renderContent = () => {\n    const catalogModelUrl = getCatalogModelDetailsRoute({\n      modelName: registeredFromCatalogDetails.modelName,\n      sourceId: registeredFromCatalogDetails.sourceId,\n    });\n    return (\n      <>\n        {isModelCatalogAvailable ? (\n          <Link to={catalogModelUrl}>{registeredfromText}</Link>\n        ) : (\n          registeredfromText\n        )}{' '}\n        in Model catalog\n      </>\n    );\n  };\n\n  const content = renderContent();\n\n  return (\n    <DashboardDescriptionListGroup title=\"Registered from\" groupTestId=\"registered-from-title\">\n      {content}\n    </DashboardDescriptionListGroup>\n  );\n};\n\nexport default ModelVersionRegisteredFromLink;\n","import * as React from 'react';\nimport {\n  DescriptionList,\n  Divider,\n  Flex,\n  FlexItem,\n  ContentVariants,\n  Title,\n  Bullseye,\n  Spinner,\n  Alert,\n  StackItem,\n  Stack,\n  Card,\n  CardHeader,\n  CardBody,\n} from '@patternfly/react-core';\nimport {\n  EditableLabelsDescriptionListGroup,\n  EditableTextDescriptionListGroup,\n  DashboardDescriptionListGroup,\n  InlineTruncatedClipboardCopy,\n} from 'mod-arch-shared';\nimport { ModelVersion, ModelArtifactList } from '~/app/types';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { getLabels, mergeUpdatedLabels } from '~/app/pages/modelRegistry/screens/utils';\nimport ModelPropertiesDescriptionListGroup from '~/app/pages/modelRegistry/screens/ModelPropertiesDescriptionListGroup';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\nimport { bumpBothTimestamps, bumpRegisteredModelTimestamp } from '~/app/api/updateTimestamps';\nimport { uriToStorageFields } from '~/app/utils';\nimport useRegisteredModelById from '~/app/hooks/useRegisteredModelById';\nimport ModelDetailsCard from '~/app/pages/modelRegistry/screens/ModelVersions/ModelDetailsCard';\nimport ModelVersionRegisteredFromLink from '~/app/pages/modelRegistry/screens/components/ModelVersionRegisteredFromLink';\n\ntype ModelVersionDetailsViewProps = {\n  modelVersion: ModelVersion;\n  isArchiveVersion?: boolean;\n  refresh: () => void;\n  modelArtifacts: ModelArtifactList;\n};\n\nconst ModelVersionDetailsView: React.FC<ModelVersionDetailsViewProps> = ({\n  modelVersion: mv,\n  isArchiveVersion,\n  refresh,\n  modelArtifacts,\n}) => {\n  const modelArtifact = modelArtifacts.items.length ? modelArtifacts.items[0] : null;\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const storageFields = uriToStorageFields(modelArtifact?.uri || '');\n  const [registeredModel, registeredModelLoaded, registeredModelLoadError] = useRegisteredModelById(\n    mv.registeredModelId,\n  );\n\n  const loaded = registeredModelLoaded;\n  const loadError = registeredModelLoadError;\n\n  if (!loaded) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n  const handleVersionUpdate = async (updatePromise: Promise<unknown>): Promise<void> => {\n    await updatePromise;\n\n    if (!mv.registeredModelId || !registeredModel) {\n      return;\n    }\n\n    await bumpRegisteredModelTimestamp(apiState.api, registeredModel);\n    refresh();\n  };\n\n  const handleArtifactUpdate = async (updatePromise: Promise<unknown>): Promise<void> => {\n    try {\n      await updatePromise;\n      if (registeredModel) {\n        await bumpBothTimestamps(apiState.api, registeredModel, mv);\n        refresh();\n      }\n    } catch (error) {\n      throw new Error(\n        `Failed to update artifact: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  };\n  return (\n    <Stack hasGutter>\n      {registeredModel && (\n        <StackItem>\n          <ModelDetailsCard\n            registeredModel={registeredModel}\n            refresh={refresh}\n            isArchiveModel={isArchiveVersion}\n            isExpandable\n          />\n        </StackItem>\n      )}\n      <StackItem>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h2\">Version details</Title>\n          </CardHeader>\n          <CardBody>\n            <Flex\n              direction={{ default: 'column', md: 'row' }}\n              columnGap={{ default: 'columnGap4xl' }}\n              rowGap={{ default: 'rowGapLg' }}\n            >\n              <FlexItem flex={{ default: 'flex_1' }}>\n                <DescriptionList isFillColumns>\n                  <EditableLabelsDescriptionListGroup\n                    labels={getLabels(mv.customProperties)}\n                    isArchive={isArchiveVersion}\n                    allExistingKeys={Object.keys(mv.customProperties)}\n                    title=\"Labels\"\n                    contentWhenEmpty=\"No labels\"\n                    labelProps={{ variant: 'outline' }}\n                    onLabelsChange={(editedLabels) =>\n                      handleVersionUpdate(\n                        apiState.api.patchModelVersion(\n                          {},\n                          {\n                            customProperties: mergeUpdatedLabels(mv.customProperties, editedLabels),\n                          },\n                          mv.id,\n                        ),\n                      )\n                    }\n                    data-testid=\"model-version-labels\"\n                  />\n                  <EditableTextDescriptionListGroup\n                    editableVariant=\"TextArea\"\n                    baseTestId=\"model-version-description\"\n                    isArchive={isArchiveVersion}\n                    title=\"Description\"\n                    contentWhenEmpty=\"No description\"\n                    value={mv.description || ''}\n                    saveEditedValue={(value) =>\n                      handleVersionUpdate(\n                        apiState.api.patchModelVersion({}, { description: value }, mv.id),\n                      )\n                    }\n                  />\n                  {modelArtifact && (\n                    <ModelVersionRegisteredFromLink\n                      modelArtifact={modelArtifact}\n                      isModelCatalogAvailable\n                    />\n                  )}\n                  <ModelPropertiesDescriptionListGroup\n                    isArchive={isArchiveVersion}\n                    customProperties={mv.customProperties}\n                    saveEditedCustomProperties={(editedProperties) =>\n                      apiState.api\n                        .patchModelVersion({}, { customProperties: editedProperties }, mv.id)\n                        .then(refresh)\n                    }\n                  />\n                </DescriptionList>\n              </FlexItem>\n              <Divider orientation={{ default: 'vertical' }} />\n              <FlexItem flex={{ default: 'flex_1' }}>\n                <Title style={{ margin: '1em 0' }} headingLevel={ContentVariants.h3}>\n                  Model location\n                </Title>\n                {loadError ? (\n                  <Alert variant=\"danger\" isInline title={loadError.name}>\n                    {loadError.message}\n                  </Alert>\n                ) : (\n                  <>\n                    <DescriptionList>\n                      {storageFields?.s3Fields && (\n                        <>\n                          <DashboardDescriptionListGroup\n                            title=\"Endpoint\"\n                            isEmpty={!storageFields.s3Fields.endpoint}\n                            contentWhenEmpty=\"No endpoint\"\n                          >\n                            <InlineTruncatedClipboardCopy\n                              testId=\"storage-endpoint\"\n                              textToCopy={storageFields.s3Fields.endpoint}\n                            />\n                          </DashboardDescriptionListGroup>\n                          <DashboardDescriptionListGroup\n                            title=\"Region\"\n                            isEmpty={!storageFields.s3Fields.region}\n                            contentWhenEmpty=\"No region\"\n                          >\n                            <InlineTruncatedClipboardCopy\n                              testId=\"storage-region\"\n                              textToCopy={storageFields.s3Fields.region || ''}\n                            />\n                          </DashboardDescriptionListGroup>\n                          <DashboardDescriptionListGroup\n                            title=\"Bucket\"\n                            isEmpty={!storageFields.s3Fields.bucket}\n                            contentWhenEmpty=\"No bucket\"\n                          >\n                            <InlineTruncatedClipboardCopy\n                              testId=\"storage-bucket\"\n                              textToCopy={storageFields.s3Fields.bucket}\n                            />\n                          </DashboardDescriptionListGroup>\n                          <DashboardDescriptionListGroup\n                            title=\"Path\"\n                            isEmpty={!storageFields.s3Fields.path}\n                            contentWhenEmpty=\"No path\"\n                          >\n                            <InlineTruncatedClipboardCopy\n                              testId=\"storage-path\"\n                              textToCopy={storageFields.s3Fields.path}\n                            />\n                          </DashboardDescriptionListGroup>\n                        </>\n                      )}\n                      {(storageFields?.uri || storageFields?.ociUri) && (\n                        <>\n                          <DashboardDescriptionListGroup\n                            title=\"URI\"\n                            isEmpty={!modelArtifact?.uri}\n                            contentWhenEmpty=\"No URI\"\n                          >\n                            <InlineTruncatedClipboardCopy\n                              testId=\"storage-uri\"\n                              textToCopy={modelArtifact?.uri || ''}\n                            />\n                          </DashboardDescriptionListGroup>\n                        </>\n                      )}\n                    </DescriptionList>\n                    <Divider style={{ marginTop: '1em' }} />\n                    <DescriptionList>\n                      <EditableTextDescriptionListGroup\n                        editableVariant=\"TextInput\"\n                        baseTestId=\"source-model-format\"\n                        isArchive={isArchiveVersion}\n                        value={modelArtifact?.modelFormatName || ''}\n                        saveEditedValue={(value) =>\n                          handleArtifactUpdate(\n                            apiState.api.patchModelArtifact(\n                              {},\n                              { modelFormatName: value },\n                              modelArtifact?.id || '',\n                            ),\n                          )\n                        }\n                        title=\"Model format\"\n                        contentWhenEmpty=\"No model format specified\"\n                      />\n                      <EditableTextDescriptionListGroup\n                        editableVariant=\"TextInput\"\n                        baseTestId=\"source-model-version\"\n                        value={modelArtifact?.modelFormatVersion || ''}\n                        isArchive={isArchiveVersion}\n                        saveEditedValue={(newVersion) =>\n                          handleArtifactUpdate(\n                            apiState.api.patchModelArtifact(\n                              {},\n                              { modelFormatVersion: newVersion },\n                              modelArtifact?.id || '',\n                            ),\n                          )\n                        }\n                        title=\"Model format version\"\n                        contentWhenEmpty=\"No model format version\"\n                      />\n                    </DescriptionList>\n                  </>\n                )}\n                <Divider style={{ marginTop: '1em' }} />\n                <DescriptionList isFillColumns style={{ marginTop: '1em' }}>\n                  <DashboardDescriptionListGroup\n                    title=\"Author\"\n                    popover=\"The author is the user who registered the model version.\"\n                  >\n                    {mv.author}\n                  </DashboardDescriptionListGroup>\n                  <DashboardDescriptionListGroup\n                    title=\"Version ID\"\n                    isEmpty={!mv.id}\n                    contentWhenEmpty=\"No model ID\"\n                  >\n                    <InlineTruncatedClipboardCopy testId=\"model-version-id\" textToCopy={mv.id} />\n                  </DashboardDescriptionListGroup>\n                  <DashboardDescriptionListGroup\n                    title=\"Last modified\"\n                    isEmpty={!mv.lastUpdateTimeSinceEpoch}\n                    contentWhenEmpty=\"Unknown\"\n                  >\n                    <ModelTimestamp timeSinceEpoch={mv.lastUpdateTimeSinceEpoch} />\n                  </DashboardDescriptionListGroup>\n                  <DashboardDescriptionListGroup\n                    title=\"Registered\"\n                    isEmpty={!mv.createTimeSinceEpoch}\n                    contentWhenEmpty=\"Unknown\"\n                  >\n                    <ModelTimestamp timeSinceEpoch={mv.createTimeSinceEpoch} />\n                  </DashboardDescriptionListGroup>\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </StackItem>\n    </Stack>\n  );\n};\nexport default ModelVersionDetailsView;\n","import * as React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { PageSection, Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ModelVersion, ModelArtifactList } from '~/app/types';\nimport { ModelVersionDetailsTabTitle, ModelVersionDetailsTab } from './const';\nimport ModelVersionDetailsView from './ModelVersionDetailsView';\nimport { isModelRegistryVersionDetailsTabExtension } from '~/odh/extension-points/details';\nimport { LazyCodeRefComponent, useExtensions } from '@odh-dashboard/plugin-core';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\n\ntype ModelVersionDetailTabsProps = {\n  tab: string;\n  modelVersion: ModelVersion;\n  isArchiveVersion?: boolean;\n  refresh: () => void;\n  modelArtifacts: ModelArtifactList;\n};\n\nconst ModelVersionDetailsTabs: React.FC<ModelVersionDetailTabsProps> = ({\n  tab,\n  modelVersion: mv,\n  isArchiveVersion,\n  refresh,\n  modelArtifacts,\n}) => {\n  const navigate = useNavigate();\n  const tabExtensions = useExtensions(isModelRegistryVersionDetailsTabExtension);\n  const { registeredModelId: rmId } = useParams();\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const modelVersionDetails = [\n    <Tab\n      key={ModelVersionDetailsTab.DETAILS}\n      eventKey={ModelVersionDetailsTab.DETAILS}\n      title={<TabTitleText>{ModelVersionDetailsTabTitle.DETAILS}</TabTitleText>}\n      aria-label=\"Model versions details tab\"\n      data-testid=\"model-versions-details-tab\"\n    >\n      <PageSection hasBodyWrapper={false} isFilled data-testid=\"model-versions-details-tab-content\">\n        <ModelVersionDetailsView\n          modelVersion={mv}\n          refresh={refresh}\n          isArchiveVersion={isArchiveVersion}\n          modelArtifacts={modelArtifacts}\n        />\n      </PageSection>\n    </Tab>,\n    ...tabExtensions.map((extension) => (\n      <Tab\n        key={extension.properties.id}\n        eventKey={extension.properties.id}\n        aria-label={`${extension.properties.title} tab`}\n        data-testid={`${extension.properties.id}-tab`}\n        title={<TabTitleText>{extension.properties.title}</TabTitleText>}\n      >\n        <PageSection\n          hasBodyWrapper={false}\n          isFilled\n          data-testid={`${extension.properties.id}-tab-content`}\n        >\n          <LazyCodeRefComponent\n            component={extension.properties.component}\n            props={{ rmId, mvId: mv.id, mrName: preferredModelRegistry?.name }}\n          />\n        </PageSection>\n      </Tab>\n    )),\n  ];\n\n  return (\n    <Tabs\n      activeKey={tab}\n      aria-label=\"Model versions details page tabs\"\n      role=\"region\"\n      data-testid=\"model-versions-details-page-tabs\"\n      onSelect={(_event, eventKey) => navigate(`../${eventKey}`, { relative: 'path' })}\n    >\n      {modelVersionDetails}\n    </Tabs>\n  );\n};\n\nexport default ModelVersionDetailsTabs;\n","import * as React from 'react';\nimport { useDeploymentsState } from '../hooks/useDeploymentsState';\nimport { ModelVersion } from '../../app/types';\nimport { KnownLabels } from '../k8sTypes';\n\ntype DeploymentDetectionResult = {\n  hasDeployment: boolean;\n  loaded: boolean;\n};\n\n// Simple helper to check if deployment is an InferenceService\nconst isInferenceService = (deployment: any) => deployment?.model?.kind === 'InferenceService';\n\nexport const useModelDeploymentDetection = () => {\n  const { deployments, loaded } = useDeploymentsState();\n\n\n  const hasRegisteredModelDeploymentByVersionIds = React.useCallback((mvIds: string[]): DeploymentDetectionResult => {\n    if (!loaded || !deployments) {\n      return { hasDeployment: true, loaded };\n    }\n\n    if (mvIds.length === 0) {\n      return { hasDeployment: false, loaded };\n    }\n\n    // Check if any of the specified model versions have deployments\n    const mvIdSet = new Set(mvIds);\n    const hasDeployment = deployments.some((deployment) => {\n      if (!isInferenceService(deployment)) {\n        return false;\n      }\n      \n      const modelVersionId = deployment.model?.metadata?.labels?.[KnownLabels.MODEL_VERSION_ID];\n      return modelVersionId && mvIdSet.has(modelVersionId);\n    });\n\n    return { hasDeployment, loaded };\n  }, [deployments, loaded]);\n\n  const hasModelVersionDeployment = React.useCallback(\n    (mvId: string): DeploymentDetectionResult =>\n      hasRegisteredModelDeploymentByVersionIds([mvId]),\n    [hasRegisteredModelDeploymentByVersionIds],\n  );\n\n  const hasRegisteredModelDeployment = React.useCallback((rmId: string, modelVersions: ModelVersion[]): DeploymentDetectionResult => {\n    if (!loaded || !deployments) {\n      return { hasDeployment: true, loaded };\n    }\n\n    // First check: Look for deployments with REGISTERED_MODEL_ID label to prevent false negatives\n    // from stale/paginated modelVersions data\n    const hasDeploymentByModelId = deployments.some(deployment => {\n      if (!isInferenceService(deployment)) {\n        return false;\n      }\n      \n      const registeredModelId = deployment.model?.metadata?.labels?.[KnownLabels.REGISTERED_MODEL_ID];\n      return registeredModelId === rmId;\n    });\n\n    if (hasDeploymentByModelId) {\n      return { hasDeployment: true, loaded };\n    }\n\n    // Fallback check: Use model version IDs as secondary validation\n    // (in case REGISTERED_MODEL_ID labels are missing on some deployments)\n    const modelVersionsForRM = modelVersions.filter(mv => mv.registeredModelId === rmId);\n    const mvIds = modelVersionsForRM.map(mv => mv.id);\n    return hasRegisteredModelDeploymentByVersionIds(mvIds);\n  }, [deployments, loaded, hasRegisteredModelDeploymentByVersionIds]);\n\n  return {\n    hasModelVersionDeployment,\n    hasRegisteredModelDeployment,\n    hasRegisteredModelDeploymentByVersionIds,\n    loaded,\n    deployments\n  };\n};\n","import { DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ModelVersion } from '~/app/types';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { useModelDeploymentDetection } from '../utils/deploymentUtils';\n\ntype ArchiveButtonDropdownItemProps = {\n    mv?: ModelVersion;\n    setIsArchiveModalOpen: (isOpen: boolean) => void;\n}\n\nconst ArchiveButtonDropdownItemContent: React.FC<ArchiveButtonDropdownItemProps> = ({ mv, setIsArchiveModalOpen }) => {\n    const { registeredModelId: rmId } = useParams();\n    const [rmModelVersions, rmMvLoaded] = useModelVersionsByRegisteredModel(rmId);\n    const { hasModelVersionDeployment, hasRegisteredModelDeploymentByVersionIds, loaded } = useModelDeploymentDetection();\n    \n    // Extract stable mvIds safely - only compute when data is actually loaded\n    const mvIds = React.useMemo(() => {\n        if (!rmMvLoaded || !rmModelVersions?.items) {\n            return [];\n        }\n        return rmModelVersions.items.map((v) => v.id);\n    }, [rmMvLoaded, rmModelVersions?.items]);\n    \n    const { hasDeployment, isLoading } = React.useMemo(() => {\n        if (mv) {\n            // For model versions: check if this specific version is deployed\n            // This path doesn't need to wait for registered model data\n            const result = hasModelVersionDeployment(mv.id);\n            return { hasDeployment: result.hasDeployment, isLoading: !result.loaded };\n        } else if (!rmId) {\n            // No registered model ID available\n            return { hasDeployment: false, isLoading: false };\n        } else if (!rmMvLoaded) {\n            // Still loading registered model versions - be conservative\n            return { hasDeployment: true, isLoading: true };\n        } else {\n            // For registered models: check if any version of this registered model is deployed\n            const result = hasRegisteredModelDeploymentByVersionIds(mvIds);\n            return { hasDeployment: result.hasDeployment, isLoading: !result.loaded };\n        }\n    }, [mv, mv?.id, rmId, rmMvLoaded, mvIds, hasModelVersionDeployment, hasRegisteredModelDeploymentByVersionIds, loaded]);\n\n    const isDisabled = isLoading || hasDeployment;\n    return (\n        <DropdownItem\n            id={`${mv ? 'archive-version-button' : 'archive-model-button'}-${mv?.id ?? rmId ?? 'global'}`}\n            aria-label={mv ? \"Archive model version\" :\"Archive model\"}\n            onClick={() => setIsArchiveModalOpen(true)}\n            isAriaDisabled={isDisabled}\n            tooltipProps={\n                !isLoading && hasDeployment\n                ? { content: mv ? 'Deployed model versions cannot be archived.' : 'Models with deployed versions cannot be archived.' }\n                : undefined\n            }\n            >\n            {mv ? \"Archive model version\" : \"Archive model\"}\n        </DropdownItem>\n    );\n};\n\nconst ArchiveButtonDropdownItem: React.FC<ArchiveButtonDropdownItemProps> = ({ mv, setIsArchiveModalOpen }) => {\n    // For model versions: rely on parent context (ModelVersionDetails page already has deployment context)\n    // For registered models: rely on parent context (ModelVersions page already has deployment context)\n    return <ArchiveButtonDropdownItemContent mv={mv} setIsArchiveModalOpen={setIsArchiveModalOpen} />;\n};\n\nexport default ArchiveButtonDropdownItem;\n","import * as React from 'react';\nimport {\n  Dropdown,\n  DropdownList,\n  MenuToggle,\n  ButtonVariant,\n  ActionList,\n  ActionListGroup,\n  ActionListItem,\n} from '@patternfly/react-core';\nimport { useNavigate } from 'react-router-dom';\nimport { ModelState, ModelVersion } from '~/app/types';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ArchiveModelVersionModal } from '~/app/pages/modelRegistry/screens/components/ArchiveModelVersionModal';\nimport { modelVersionListUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport ArchiveButtonDropdownItem from '~/odh/components/ArchiveButtonDropdownItem';\n\ninterface ModelVersionsDetailsHeaderActionsProps {\n  mv: ModelVersion;\n}\n\nconst ModelVersionsDetailsHeaderActions: React.FC<ModelVersionsDetailsHeaderActionsProps> = ({\n  mv,\n}) => {\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const navigate = useNavigate();\n  const [isOpenActionDropdown, setOpenActionDropdown] = React.useState(false);\n  const [isArchiveModalOpen, setIsArchiveModalOpen] = React.useState(false);\n\n  if (!preferredModelRegistry) {\n    return null;\n  }\n\n  return (\n    <ActionList className=\"pf-v5-u-display-flex\">\n      <ActionListGroup className=\"pf-v5-u-flex-1\">\n        <ActionListItem>\n          <Dropdown\n            isOpen={isOpenActionDropdown}\n            onSelect={() => setOpenActionDropdown(false)}\n            onOpenChange={(open) => setOpenActionDropdown(open)}\n            popperProps={{ position: 'right', appendTo: 'inline' }}\n            toggle={(toggleRef) => (\n              <MenuToggle\n                variant={ButtonVariant.secondary}\n                ref={toggleRef}\n                onClick={() => setOpenActionDropdown(!isOpenActionDropdown)}\n                isExpanded={isOpenActionDropdown}\n                aria-label=\"Model version details action toggle\"\n                data-testid=\"model-version-details-action-button\"\n              >\n                Actions\n              </MenuToggle>\n            )}\n          >\n            <DropdownList>\n              <ArchiveButtonDropdownItem mv={mv} setIsArchiveModalOpen={setIsArchiveModalOpen} />\n            </DropdownList>\n          </Dropdown>\n        </ActionListItem>\n      </ActionListGroup>\n      {isArchiveModalOpen && (\n        <ArchiveModelVersionModal\n          onCancel={() => setIsArchiveModalOpen(false)}\n          onSubmit={() =>\n            apiState.api\n              .patchModelVersion(\n                {},\n                {\n                  state: ModelState.ARCHIVED,\n                },\n                mv.id,\n              )\n              .then(() =>\n                navigate(modelVersionListUrl(mv.registeredModelId, preferredModelRegistry.name)),\n              )\n          }\n          modelVersionName={mv.name}\n        />\n      )}\n    </ActionList>\n  );\n};\n\nexport default ModelVersionsDetailsHeaderActions;\n","import React from 'react';\nimport { Button, ButtonVariant, FlexItem, Tooltip } from '@patternfly/react-core';\nimport { ModelVersion } from '~/app/types';\nimport DeployModalExtension from '~/odh/components/DeployModalExtension';\n\nexport const MRDeployButton = ({ mv }: { mv: ModelVersion }) => (\n  <DeployModalExtension\n    mv={mv}\n    render={(buttonState, onOpenModal, isModalAvailable) => {\n      const deployButton = (\n        <Button\n          id=\"deploy-button\"\n          aria-label=\"Deploy version\"\n          variant={ButtonVariant.primary}\n          onClick={onOpenModal}\n          isAriaDisabled={!buttonState?.enabled}\n          data-testid=\"deploy-button\"\n        >\n          Deploy\n        </Button>\n      );\n      return isModalAvailable ? (\n        <FlexItem>\n          {buttonState.tooltip ? (\n            <Tooltip content={buttonState.tooltip}>{deployButton}</Tooltip>\n          ) : (\n            deployButton\n          )}\n        </FlexItem>\n      ) : null;\n    }}\n  />\n);\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Flex,\n  FlexItem,\n  Truncate,\n  Title,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '../../app/context/ModelRegistrySelectorContext';\nimport { KnownLabels } from '../k8sTypes';\nimport useRegisteredModelById from '../../app/hooks/useRegisteredModelById';\nimport useModelVersionById from '../../app/hooks/useModelVersionById';\nimport useModelArtifactsByVersionId from '../../app/hooks/useModelArtifactsByVersionId';\nimport { ModelState } from '../../app/types';\nimport {\n  archiveModelVersionDetailsUrl,\n  modelVersionArchiveDetailsUrl,\n  modelVersionUrl,\n  registeredModelUrl,\n} from '../../app/pages/modelRegistry/screens/routeUtils';\nimport ModelVersionSelector from '../../app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionSelector';\nimport ModelVersionDetailsTabs from '../../app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsTabs';\nimport ModelVersionsDetailsHeaderActions from '../../app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsHeaderActions';\nimport { MRDeployButton } from './MRDeployButton';\nimport { MRDeploymentsContextProvider } from './MRDeploymentsContextProvider';\n\ntype ModelVersionsDetailProps = {\n  tab: string;\n} & Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst ModelVersionsDetailsContent: React.FC<ModelVersionsDetailProps> = ({ tab, ...pageProps }) => {\n  const navigate = useNavigate();\n\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n\n  const { modelVersionId: mvId, registeredModelId: rmId } = useParams();\n  const [rm] = useRegisteredModelById(rmId);\n  const [mv, mvLoaded, mvLoadError, refreshModelVersion] = useModelVersionById(mvId);\n  const [modelArtifacts, modelArtifactsLoaded, modelArtifactsLoadError, refreshModelArtifacts] =\n    useModelArtifactsByVersionId(mvId);\n\n  const refresh = React.useCallback(() => {\n    refreshModelVersion();\n    refreshModelArtifacts();\n  }, [refreshModelVersion, refreshModelArtifacts]);\n\n  const loaded = mvLoaded && modelArtifactsLoaded;\n  const loadError = mvLoadError || modelArtifactsLoadError;\n\n  useEffect(() => {\n    if (rm?.state === ModelState.ARCHIVED && mv?.id) {\n      navigate(\n        archiveModelVersionDetailsUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name),\n      );\n    } else if (mv?.state === ModelState.ARCHIVED) {\n      navigate(\n        modelVersionArchiveDetailsUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name),\n      );\n    }\n  }, [rm?.state, mv?.id, mv?.state, mv?.registeredModelId, preferredModelRegistry?.name, navigate]);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to=\"/model-registry\">Model registry - {preferredModelRegistry?.name}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            data-testid=\"breadcrumb-model-version\"\n            render={() => (\n              <Link to={registeredModelUrl(rmId, preferredModelRegistry?.name)}>\n                {rm?.name || 'Loading...'}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem data-testid=\"breadcrumb-version-name\" isActive>\n            {mv?.name || 'Loading...'}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      }\n      title={\n        <Flex alignItems={{ default: 'alignItemsCenter' }}>\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              {rm?.name || 'Loading...'}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            {mv && (\n              <ModelVersionSelector\n                rmId={rmId}\n                selection={mv}\n                onSelect={(modelVersionId) =>\n                  navigate(modelVersionUrl(modelVersionId, rmId, preferredModelRegistry?.name))\n                }\n              />\n            )}\n          </FlexItem>\n        </Flex>\n      }\n      headerAction={\n        loaded &&\n        mv && (\n          <Flex\n            spaceItems={{ default: 'spaceItemsMd' }}\n            alignItems={{ default: 'alignItemsFlexStart' }}\n          >\n            <MRDeployButton mv={mv} />\n            <FlexItem>\n              <ModelVersionsDetailsHeaderActions\n                mv={mv}\n              />\n            </FlexItem>\n          </Flex>\n        )\n      }\n      description={<Truncate content={mv?.description || ''} />}\n      loadError={loadError}\n      loaded={loaded}\n      provideChildrenPadding\n    >\n      {mv !== null && (\n        <ModelVersionDetailsTabs\n          tab={tab}\n          modelVersion={mv}\n          refresh={refresh}\n          modelArtifacts={modelArtifacts}\n        />\n      )}\n    </ApplicationsPage>\n  );\n};\n\nconst ModelVersionsDetails: React.FC<ModelVersionsDetailProps> = (props) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { modelVersionId: mvId, registeredModelId: rmId } = useParams();\n  \n  const labelSelectors = React.useMemo(() => {\n    if (!mvId || !rmId) return undefined;\n    return {\n      [KnownLabels.MODEL_VERSION_ID]: mvId,\n      [KnownLabels.REGISTERED_MODEL_ID]: rmId,\n    };\n  }, [mvId, rmId]);\n  \n  return (\n    <MRDeploymentsContextProvider labelSelectors={labelSelectors} mrName={preferredModelRegistry?.name}>\n      <ModelVersionsDetailsContent {...props} />\n    </MRDeploymentsContextProvider>\n  );\n};\n\nexport default ModelVersionsDetails;\n","import * as React from 'react';\nimport { Table, DashboardEmptyTableView } from 'mod-arch-shared';\nimport { ModelVersion } from '~/app/types';\nimport ModelVersionsTableRow from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableRow';\nimport { mvColumns } from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTableColumns';\n\ntype ModelVersionsArchiveTableProps = {\n  clearFilters: () => void;\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n} & Partial<Pick<React.ComponentProps<typeof Table>, 'toolbarContent'>>;\n\nconst ModelVersionsArchiveTable: React.FC<ModelVersionsArchiveTableProps> = ({\n  clearFilters,\n  modelVersions,\n  toolbarContent,\n  refresh,\n}) => (\n  <Table\n    data-testid=\"model-versions-archive-table\"\n    data={modelVersions}\n    columns={mvColumns}\n    toolbarContent={toolbarContent}\n    enablePagination\n    onClearFilters={clearFilters}\n    emptyTableView={<DashboardEmptyTableView onClearFilters={clearFilters} />}\n    defaultSortColumn={1}\n    rowRenderer={(mv: ModelVersion) => (\n      <ModelVersionsTableRow key={mv.name} modelVersion={mv} isArchiveRow refresh={refresh} />\n    )}\n  />\n);\n\nexport default ModelVersionsArchiveTable;\n","import * as React from 'react';\nimport { Toolbar, ToolbarContent, ToolbarGroup, ToolbarToggleGroup } from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport { ModelVersion } from '~/app/types';\nimport { filterModelVersions } from '~/app/pages/modelRegistry/screens/utils';\nimport EmptyModelRegistryState from '~/app/pages/modelRegistry/screens/components/EmptyModelRegistryState';\nimport FilterToolbar from '~/app/shared/components/FilterToolbar';\nimport {\n  initialModelRegistryVersionsFilterData,\n  ModelRegistryVersionsFilterDataType,\n  modelRegistryVersionsFilterOptions,\n  ModelRegistryVersionsFilterOptions,\n} from '~/app/pages/modelRegistry/screens/const';\nimport ThemeAwareSearchInput from '~/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput';\nimport ModelVersionsArchiveTable from './ModelVersionsArchiveTable';\n\ntype ModelVersionsArchiveListViewProps = {\n  modelVersions: ModelVersion[];\n  refresh: () => void;\n};\n\nconst ModelVersionsArchiveListView: React.FC<ModelVersionsArchiveListViewProps> = ({\n  modelVersions: unfilteredmodelVersions,\n  refresh,\n}) => {\n  const [filterData, setFilterData] = React.useState<ModelRegistryVersionsFilterDataType>(\n    initialModelRegistryVersionsFilterData,\n  );\n\n  const onFilterUpdate = React.useCallback(\n    (key: string, value: string | { label: string; value: string } | undefined) =>\n      setFilterData((prevValues) => ({ ...prevValues, [key]: value })),\n    [setFilterData],\n  );\n\n  const onClearFilters = React.useCallback(\n    () => setFilterData(initialModelRegistryVersionsFilterData),\n    [setFilterData],\n  );\n\n  const filteredModelVersions = filterModelVersions(unfilteredmodelVersions, filterData);\n\n  if (unfilteredmodelVersions.length === 0) {\n    return (\n      <EmptyModelRegistryState\n        headerIcon={SearchIcon}\n        testid=\"empty-archive-state\"\n        title=\"No archived versions\"\n        description=\"You can archive the active versions that you no longer use. You can restore archived versions to make it active.\"\n      />\n    );\n  }\n\n  return (\n    <ModelVersionsArchiveTable\n      refresh={refresh}\n      clearFilters={onClearFilters}\n      modelVersions={filteredModelVersions}\n      toolbarContent={\n        <Toolbar\n          data-testid=\"model-versions-archive-table-toolbar\"\n          clearAllFilters={onClearFilters}\n        >\n          <ToolbarContent>\n            <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n              <ToolbarGroup variant=\"filter-group\">\n                <FilterToolbar\n                  filterOptions={modelRegistryVersionsFilterOptions}\n                  filterOptionRenders={{\n                    [ModelRegistryVersionsFilterOptions.keyword]: ({ onChange, ...props }) => (\n                      <ThemeAwareSearchInput\n                        {...props}\n                        fieldLabel=\"Filter by keyword\"\n                        placeholder=\"Filter by keyword\"\n                        className=\"toolbar-fieldset-wrapper\"\n                        style={{ minWidth: '270px' }}\n                        onChange={(value) => onChange(value)}\n                      />\n                    ),\n                    [ModelRegistryVersionsFilterOptions.author]: ({ onChange, ...props }) => (\n                      <ThemeAwareSearchInput\n                        {...props}\n                        fieldLabel=\"Filter by author\"\n                        placeholder=\"Filter by author\"\n                        className=\"toolbar-fieldset-wrapper\"\n                        style={{ minWidth: '270px' }}\n                        onChange={(value) => onChange(value)}\n                      />\n                    ),\n                  }}\n                  filterData={filterData}\n                  onFilterUpdate={onFilterUpdate}\n                />\n              </ToolbarGroup>\n            </ToolbarToggleGroup>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nexport default ModelVersionsArchiveListView;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport useRegisteredModelById from '~/app/hooks/useRegisteredModelById';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { registeredModelUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { filterArchiveVersions } from '~/app/utils';\nimport ModelVersionsArchiveListView from './ModelVersionsArchiveListView';\n\ntype ModelVersionsArchiveProps = Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst ModelVersionsArchive: React.FC<ModelVersionsArchiveProps> = ({ ...pageProps }) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n\n  const { registeredModelId: rmId } = useParams();\n  const [rm] = useRegisteredModelById(rmId);\n  const [modelVersions, mvLoaded, mvLoadError, refresh] = useModelVersionsByRegisteredModel(rmId);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to=\"/model-registry\">Model registry - {preferredModelRegistry?.name}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={registeredModelUrl(rmId, preferredModelRegistry?.name)}>\n                {rm?.name || 'Loading...'}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem data-testid=\"archive-version-page-breadcrumb\" isActive>\n            Archived versions\n          </BreadcrumbItem>\n        </Breadcrumb>\n      }\n      title={rm ? `Archived versions of ${rm.name}` : 'Archived versions'}\n      loadError={mvLoadError}\n      loaded={mvLoaded}\n      provideChildrenPadding\n    >\n      {rm && (\n        <ModelVersionsArchiveListView\n          modelVersions={filterArchiveVersions(modelVersions.items)}\n          refresh={refresh}\n        />\n      )}\n    </ApplicationsPage>\n  );\n};\n\nexport default ModelVersionsArchive;\n","import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { RegisteredModel } from '~/app/types';\nimport {\n  modelVersionArchiveUrl,\n  registeredModelUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\n\ntype ModelVersionArchiveDetailsBreadcrumbProps = {\n  preferredModelRegistry?: string;\n  registeredModel: RegisteredModel | null;\n  modelVersionName?: string;\n};\n\nconst ModelVersionArchiveDetailsBreadcrumb: React.FC<ModelVersionArchiveDetailsBreadcrumbProps> = ({\n  preferredModelRegistry,\n  registeredModel,\n  modelVersionName,\n}) => (\n  <Breadcrumb>\n    <BreadcrumbItem\n      render={() => <Link to=\"/model-registry\">Model registry - {preferredModelRegistry}</Link>}\n    />\n    <BreadcrumbItem\n      render={() => (\n        <Link to={registeredModelUrl(registeredModel?.id, preferredModelRegistry)}>\n          {registeredModel?.name || 'Loading...'}\n        </Link>\n      )}\n    />\n    <BreadcrumbItem\n      render={() => (\n        <Link to={modelVersionArchiveUrl(registeredModel?.id, preferredModelRegistry)}>\n          Archived versions\n        </Link>\n      )}\n    />\n    <BreadcrumbItem isActive>{modelVersionName || 'Loading...'}</BreadcrumbItem>\n  </Breadcrumb>\n);\n\nexport default ModelVersionArchiveDetailsBreadcrumb;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { Button, Flex, FlexItem, Label, Truncate } from '@patternfly/react-core';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport useRegisteredModelById from '~/app/hooks/useRegisteredModelById';\nimport useModelVersionById from '~/app/hooks/useModelVersionById';\nimport useModelArtifactsByVersionId from '~/app/hooks/useModelArtifactsByVersionId';\nimport { ModelState } from '~/app/types';\nimport {\n  archiveModelVersionDetailsUrl,\n  modelVersionUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\nimport ModelVersionDetailsTabs from '~/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsTabs';\nimport { RestoreModelVersionModal } from '~/app/pages/modelRegistry/screens/components/RestoreModelVersionModal';\nimport ModelVersionArchiveDetailsBreadcrumb from './ModelVersionArchiveDetailsBreadcrumb';\n\ntype ModelVersionsArchiveDetailsProps = {\n  tab: string;\n} & Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst ModelVersionsArchiveDetails: React.FC<ModelVersionsArchiveDetailsProps> = ({\n  tab,\n  ...pageProps\n}) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { apiState } = React.useContext(ModelRegistryContext);\n\n  const navigate = useNavigate();\n\n  const { modelVersionId: mvId, registeredModelId: rmId } = useParams();\n  const [rm] = useRegisteredModelById(rmId);\n  const [mv, mvLoaded, mvLoadError, refreshModelVersion] = useModelVersionById(mvId);\n  const [modelArtifacts, modelArtifactsLoaded, modelArtifactsLoadError, refreshModelArtifacts] =\n    useModelArtifactsByVersionId(mvId);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = React.useState(false);\n\n  const refresh = React.useCallback(() => {\n    refreshModelVersion();\n    refreshModelArtifacts();\n  }, [refreshModelVersion, refreshModelArtifacts]);\n\n  const loaded = mvLoaded && modelArtifactsLoaded;\n  const loadError = mvLoadError || modelArtifactsLoadError;\n\n  useEffect(() => {\n    if (rm?.state === ModelState.ARCHIVED && mv?.id) {\n      navigate(\n        archiveModelVersionDetailsUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name),\n      );\n    } else if (mv?.state === ModelState.LIVE) {\n      navigate(modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name));\n    }\n  }, [rm?.state, mv?.state, mv?.id, mv?.registeredModelId, preferredModelRegistry?.name, navigate]);\n\n\n  return (\n    <>\n      <ApplicationsPage\n        {...pageProps}\n        breadcrumb={\n          <ModelVersionArchiveDetailsBreadcrumb\n            preferredModelRegistry={preferredModelRegistry?.name}\n            registeredModel={rm}\n            modelVersionName={mv?.name}\n          />\n        }\n        title={\n          mv && (\n            <Flex alignItems={{ default: 'alignItemsCenter' }}>\n              <FlexItem>{mv.name}</FlexItem>\n              <Label>Archived</Label>\n            </Flex>\n          )\n        }\n        headerAction={\n          <Button data-testid=\"restore-button\" onClick={() => setIsRestoreModalOpen(true)}>\n            Restore model version\n          </Button>\n        }\n        description={<Truncate content={mv?.description || ''} />}\n        loadError={loadError}\n        loaded={loaded}\n        provideChildrenPadding\n      >\n        {mv !== null && (\n          <ModelVersionDetailsTabs\n            isArchiveVersion\n            tab={tab}\n            modelVersion={mv}\n            refresh={refresh}\n            modelArtifacts={modelArtifacts}\n          />\n        )}\n      </ApplicationsPage>\n      {mv !== null && isRestoreModalOpen ? (\n        <RestoreModelVersionModal\n          onCancel={() => setIsRestoreModalOpen(false)}\n          onSubmit={() =>\n            apiState.api\n              .patchModelVersion(\n                {},\n                {\n                  state: ModelState.LIVE,\n                },\n                mv.id,\n              )\n              .then(() => navigate(modelVersionUrl(mv.id, rm?.id, preferredModelRegistry?.name)))\n          }\n          modelVersionName={mv.name}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default ModelVersionsArchiveDetails;\n","import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { RegisteredModel } from '~/app/types';\nimport {\n  registeredModelArchiveDetailsUrl,\n  registeredModelArchiveUrl,\n} from '~/app/pages/modelRegistry/screens/routeUtils';\n\ntype ArchiveModelVersionDetailsBreadcrumbProps = {\n  preferredModelRegistry?: string;\n  registeredModel: RegisteredModel | null;\n  modelVersionName?: string;\n};\n\nconst ArchiveModelVersionDetailsBreadcrumb: React.FC<ArchiveModelVersionDetailsBreadcrumbProps> = ({\n  preferredModelRegistry,\n  registeredModel,\n  modelVersionName,\n}) => (\n  <Breadcrumb>\n    <BreadcrumbItem\n      render={() => <Link to=\"/model-registry\">Model registry - {preferredModelRegistry}</Link>}\n    />\n    <BreadcrumbItem\n      render={() => (\n        <Link to={registeredModelArchiveUrl(preferredModelRegistry)}>Archived models</Link>\n      )}\n    />\n    <BreadcrumbItem\n      render={() => (\n        <Link to={registeredModelArchiveDetailsUrl(registeredModel?.id, preferredModelRegistry)}>\n          {registeredModel?.name || 'Loading...'}\n        </Link>\n      )}\n    />\n    <BreadcrumbItem isActive>{modelVersionName || 'Loading...'}</BreadcrumbItem>\n  </Breadcrumb>\n);\n\nexport default ArchiveModelVersionDetailsBreadcrumb;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { Button, Flex, FlexItem, Label, Content, Tooltip, Truncate } from '@patternfly/react-core';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport useRegisteredModelById from '~/app/hooks/useRegisteredModelById';\nimport useModelVersionById from '~/app/hooks/useModelVersionById';\nimport useModelArtifactsByVersionId from '~/app/hooks/useModelArtifactsByVersionId';\nimport { ModelState } from '~/app/types';\nimport { modelVersionUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport ModelVersionDetailsTabs from '~/app/pages/modelRegistry/screens/ModelVersionDetails/ModelVersionDetailsTabs';\nimport ArchiveModelVersionDetailsBreadcrumb from './ArchiveModelVersionDetailsBreadcrumb';\n\ntype ArchiveModelVersionDetailsProps = {\n  tab: string;\n} & Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst ArchiveModelVersionDetails: React.FC<ArchiveModelVersionDetailsProps> = ({\n  tab,\n  ...pageProps\n}) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { modelVersionId: mvId, registeredModelId: rmId } = useParams();\n  const [rm] = useRegisteredModelById(rmId);\n  const [mv, mvLoaded, mvLoadError, refreshModelVersion] = useModelVersionById(mvId);\n  const [modelArtifacts, modelArtifactsLoaded, modelArtifactsLoadError, refreshModelArtifacts] =\n    useModelArtifactsByVersionId(mvId);\n  const navigate = useNavigate();\n\n  const refresh = React.useCallback(() => {\n    refreshModelVersion();\n    refreshModelArtifacts();\n  }, [refreshModelVersion, refreshModelArtifacts]);\n\n  const loaded = mvLoaded && modelArtifactsLoaded;\n  const loadError = mvLoadError || modelArtifactsLoadError;\n\n  useEffect(() => {\n    if (rm?.state === ModelState.LIVE && mv?.id) {\n      navigate(modelVersionUrl(mv.id, mv.registeredModelId, preferredModelRegistry?.name));\n    }\n  }, [rm?.state, mv?.id, mv?.registeredModelId, preferredModelRegistry?.name, navigate]);\n\n  return (\n    <ApplicationsPage\n      {...pageProps}\n      breadcrumb={\n        <ArchiveModelVersionDetailsBreadcrumb\n          preferredModelRegistry={preferredModelRegistry?.name}\n          registeredModel={rm}\n          modelVersionName={mv?.name}\n        />\n      }\n      title={\n        mv && (\n          <Flex>\n            <FlexItem>\n              <Content>{mv.name}</Content>\n            </FlexItem>\n            <FlexItem>\n              <Label>Archived</Label>\n            </FlexItem>\n          </Flex>\n        )\n      }\n      headerAction={\n        <Tooltip content=\"The version of an archived model cannot be restored unless the model is restored.\">\n          <Button data-testid=\"restore-button\" aria-label=\"restore version\" isAriaDisabled>\n            Restore version\n          </Button>\n        </Tooltip>\n      }\n      description={<Truncate content={mv?.description || ''} />}\n      loadError={loadError}\n      loaded={loaded}\n      provideChildrenPadding\n    >\n      {mv !== null && (\n        <ModelVersionDetailsTabs\n          isArchiveVersion\n          tab={tab}\n          modelVersion={mv}\n          refresh={refresh}\n          modelArtifacts={modelArtifacts}\n        />\n      )}\n    </ApplicationsPage>\n  );\n};\n\nexport default ArchiveModelVersionDetails;\n","import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { RegisteredModel } from '~/app/types';\nimport { registeredModelArchiveUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\n\ntype RegisteredModelArchiveDetailsBreadcrumbProps = {\n  preferredModelRegistry?: string;\n  registeredModel: RegisteredModel | null;\n};\n\nconst RegisteredModelArchiveDetailsBreadcrumb: React.FC<\n  RegisteredModelArchiveDetailsBreadcrumbProps\n> = ({ preferredModelRegistry, registeredModel }) => (\n  <Breadcrumb>\n    <BreadcrumbItem\n      render={() => <Link to=\"/model-registry\">Model registry - {preferredModelRegistry}</Link>}\n    />\n    <BreadcrumbItem\n      render={() => (\n        <Link to={registeredModelArchiveUrl(preferredModelRegistry)}>Archived models</Link>\n      )}\n    />\n    <BreadcrumbItem isActive>{registeredModel?.name || 'Loading...'}</BreadcrumbItem>\n  </Breadcrumb>\n);\n\nexport default RegisteredModelArchiveDetailsBreadcrumb;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { Button, Flex, FlexItem, Label, Truncate } from '@patternfly/react-core';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport useRegisteredModelById from '~/app/hooks/useRegisteredModelById';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { ModelState } from '~/app/types';\nimport { ModelVersionsTab } from '~/app/pages/modelRegistry/screens/ModelVersions/const';\nimport ModelVersionsTabs from '~/app/pages/modelRegistry/screens/ModelVersions/ModelVersionsTabs';\nimport { RestoreRegisteredModelModal } from '~/app/pages/modelRegistry/screens/components/RestoreRegisteredModel';\nimport { registeredModelUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport RegisteredModelArchiveDetailsBreadcrumb from './RegisteredModelArchiveDetailsBreadcrumb';\n\ntype RegisteredModelsArchiveDetailsProps = {\n  tab: ModelVersionsTab;\n} & Omit<\n  React.ComponentProps<typeof ApplicationsPage>,\n  'breadcrumb' | 'title' | 'description' | 'loadError' | 'loaded' | 'provideChildrenPadding'\n>;\n\nconst RegisteredModelsArchiveDetails: React.FC<RegisteredModelsArchiveDetailsProps> = ({\n  tab,\n  ...pageProps\n}) => {\n  const { preferredModelRegistry } = React.useContext(ModelRegistrySelectorContext);\n  const { apiState } = React.useContext(ModelRegistryContext);\n\n  const navigate = useNavigate();\n\n  const { registeredModelId: rmId } = useParams();\n  const [rm, rmLoaded, rmLoadError, rmRefresh] = useRegisteredModelById(rmId);\n  const [modelVersions, mvLoaded, mvLoadError, refresh] = useModelVersionsByRegisteredModel(rmId);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = React.useState(false);\n\n  useEffect(() => {\n    if (rm?.state === ModelState.LIVE) {\n      navigate(registeredModelUrl(rm.id, preferredModelRegistry?.name));\n    }\n  }, [rm?.state, preferredModelRegistry?.name, rm?.id, navigate]);\n\n  return (\n    <>\n      <ApplicationsPage\n        {...pageProps}\n        breadcrumb={\n          <RegisteredModelArchiveDetailsBreadcrumb\n            preferredModelRegistry={preferredModelRegistry?.name}\n            registeredModel={rm}\n          />\n        }\n        title={\n          rm && (\n            <Flex alignItems={{ default: 'alignItemsCenter' }}>\n              <FlexItem>{rm.name}</FlexItem>\n              <Label>Archived</Label>\n            </Flex>\n          )\n        }\n        headerAction={\n          <Button data-testid=\"restore-button\" onClick={() => setIsRestoreModalOpen(true)}>\n            Restore model\n          </Button>\n        }\n        description={<Truncate content={rm?.description || ''} />}\n        loadError={rmLoadError}\n        loaded={rmLoaded}\n        provideChildrenPadding\n      >\n        {rm !== null && mvLoaded && !mvLoadError && (\n          <ModelVersionsTabs\n            tab={tab}\n            isArchiveModel\n            registeredModel={rm}\n            modelVersions={modelVersions.items}\n            refresh={rmRefresh}\n            mvRefresh={refresh}\n          />\n        )}\n      </ApplicationsPage>\n\n      {rm !== null && isRestoreModalOpen ? (\n        <RestoreRegisteredModelModal\n          onCancel={() => setIsRestoreModalOpen(false)}\n          onSubmit={() =>\n            apiState.api\n              .patchRegisteredModel(\n                {},\n                {\n                  state: ModelState.LIVE,\n                },\n                rm.id,\n              )\n              .then(() => navigate(registeredModelUrl(rm.id, preferredModelRegistry?.name)))\n          }\n          registeredModelName={rm.name}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default RegisteredModelsArchiveDetails;\n","import React from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\n\ntype PrefilledModelRegistryFieldProps = {\n  mrName?: string;\n};\n\nconst PrefilledModelRegistryField: React.FC<PrefilledModelRegistryFieldProps> = ({ mrName }) => {\n  const mrNameInput = (\n    <TextInput isDisabled isRequired type=\"text\" id=\"mr-name\" name=\"mr-name\" value={mrName} />\n  );\n\n  return (\n    <FormGroup className=\"form-group-disabled\" label=\"Model registry\" isRequired fieldId=\"mr-name\">\n      <FormFieldset component={mrNameInput} field=\"Model Registry\" />\n    </FormGroup>\n  );\n};\n\nexport default PrefilledModelRegistryField;\n","import React from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Form,\n  PageSection,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport spacing from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { useParams, useNavigate } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { modelRegistryUrl, modelVersionUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { AppContext } from '~/app/context/AppContext';\nimport useRegisteredModels from '~/app/hooks/useRegisteredModels';\nimport { useRegisterModelData } from './useRegisterModelData';\nimport {\n  isModelNameExisting,\n  isNameValid,\n  isRegisterModelSubmitDisabled,\n  registerModel,\n} from './utils';\nimport RegistrationCommonFormSections from './RegistrationCommonFormSections';\nimport RegistrationFormFooter from './RegistrationFormFooter';\nimport { SubmitLabel } from './const';\nimport PrefilledModelRegistryField from './PrefilledModelRegistryField';\nimport RegisterModelDetailsFormSection from './RegisterModelDetailsFormSection';\n\nconst RegisterModel: React.FC = () => {\n  const { modelRegistry: mrName } = useParams();\n  const navigate = useNavigate();\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const { user } = React.useContext(AppContext);\n  const author = user.userId || '';\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [submitError, setSubmitError] = React.useState<Error | undefined>(undefined);\n  const [formData, setData] = useRegisterModelData();\n  const [submittedRegisteredModelName, setSubmittedRegisteredModelName] =\n    React.useState<string>('');\n  const [submittedVersionName, setSubmittedVersionName] = React.useState<string>('');\n  const [registrationErrorType, setRegistrationErrorType] = React.useState<string | undefined>(\n    undefined,\n  );\n  const [registeredModels, registeredModelsLoaded, registeredModelsLoadError] =\n    useRegisteredModels();\n\n  const isModelNameValid = isNameValid(formData.modelName);\n  const isModelNameDuplicate = isModelNameExisting(formData.modelName, registeredModels);\n  const hasModelNameError = !isModelNameValid || isModelNameDuplicate;\n  const isSubmitDisabled =\n    isSubmitting || isRegisterModelSubmitDisabled(formData, registeredModels);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    setSubmitError(undefined);\n\n    const {\n      data: { registeredModel, modelVersion, modelArtifact },\n      errors,\n    } = await registerModel(apiState, formData, author);\n    if (registeredModel && modelVersion && modelArtifact) {\n      navigate(modelVersionUrl(modelVersion.id, registeredModel.id, mrName));\n    } else if (Object.keys(errors).length > 0) {\n      setIsSubmitting(false);\n      setSubmittedRegisteredModelName(formData.modelName);\n      setSubmittedVersionName(formData.versionName);\n      const resourceName = Object.keys(errors)[0];\n      setRegistrationErrorType(resourceName);\n      setSubmitError(errors[resourceName]);\n    }\n  };\n  const onCancel = () => {\n    navigate(modelRegistryUrl(mrName));\n  };\n\n  return (\n    <ApplicationsPage\n      title=\"Register model\"\n      description=\"Create and register the first version of a new model.\"\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => <Link to={modelRegistryUrl(mrName)}>Model registry - {mrName}</Link>}\n          />\n          <BreadcrumbItem>Register model</BreadcrumbItem>\n        </Breadcrumb>\n      }\n      loaded={registeredModelsLoaded}\n      loadError={registeredModelsLoadError}\n      empty={false}\n    >\n      <PageSection hasBodyWrapper={false} isFilled>\n        <Form isWidthLimited>\n          <Stack hasGutter>\n            <StackItem className={spacing.mbLg}>\n              <PrefilledModelRegistryField mrName={mrName} />\n            </StackItem>\n            <StackItem>\n              <RegisterModelDetailsFormSection\n                formData={formData}\n                setData={setData}\n                hasModelNameError={hasModelNameError}\n                isModelNameDuplicate={isModelNameDuplicate}\n              />\n              <RegistrationCommonFormSections\n                formData={formData}\n                setData={setData}\n                isFirstVersion\n              />\n            </StackItem>\n          </Stack>\n        </Form>\n      </PageSection>\n      <RegistrationFormFooter\n        submitLabel={SubmitLabel.REGISTER_MODEL}\n        submitError={submitError}\n        isSubmitDisabled={isSubmitDisabled}\n        isSubmitting={isSubmitting}\n        onSubmit={handleSubmit}\n        onCancel={onCancel}\n        registrationErrorType={registrationErrorType}\n        versionName={submittedVersionName}\n        modelName={submittedRegisteredModelName}\n      />\n    </ApplicationsPage>\n  );\n};\n\nexport default RegisterModel;\n","import React from 'react';\nimport { FormGroup, TextInput } from '@patternfly/react-core';\nimport { TypeaheadSelect } from 'mod-arch-shared';\nimport { TypeaheadSelectOption } from 'mod-arch-shared/dist/components/TypeaheadSelect';\nimport { RegisteredModel } from '~/app/types';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\n\ntype RegisteredModelSelectorProps = {\n  registeredModels: RegisteredModel[];\n  registeredModelId: string;\n  setRegisteredModelId: (id: string) => void;\n  isDisabled: boolean;\n};\n\nconst RegisteredModelSelector: React.FC<RegisteredModelSelectorProps> = ({\n  registeredModels,\n  registeredModelId,\n  setRegisteredModelId,\n  isDisabled,\n}) => {\n  const options: TypeaheadSelectOption[] = React.useMemo(\n    () =>\n      registeredModels.map(({ name, id }) => ({\n        content: name,\n        value: id,\n        isSelected: id === registeredModelId,\n      })),\n    [registeredModels, registeredModelId],\n  );\n\n  const modelNameInput = (\n    <TextInput\n      isDisabled\n      isRequired\n      type=\"text\"\n      id=\"model-name\"\n      name=\"registered-model-prefilled\"\n      value={options.find(({ value }) => value === registeredModelId)?.content}\n    />\n  );\n\n  if (isDisabled && registeredModelId) {\n    /*\n      If we're registering a new version for an existing model, we prefill the model and don't allow it to change.\n      TODO: We should just be using the `isDisabled` prop of TypeaheadSelect instead of a separate disabled text field,\n        but TypeaheadSelect doesn't currently have a way to prefill the selected item / lift the selection state.\n        See related PatternFly issue https://github.com/patternfly/patternfly-react/issues/10842\n    */\n    return (\n      <FormGroup label=\"Model name\" className=\"form-group-disabled\" isRequired fieldId=\"model-name\">\n        <FormFieldset component={modelNameInput} field=\"Model Name\" />\n      </FormGroup>\n    );\n  }\n\n  return (\n    <TypeaheadSelect\n      id=\"model-name\"\n      onClearSelection={() => setRegisteredModelId('')}\n      selectOptions={options}\n      isScrollable\n      placeholder=\"Select a registered model\"\n      noOptionsFoundMessage={(filter) => `No results found for \"${filter}\"`}\n      onSelect={(_event, selection) => {\n        setRegisteredModelId(String(selection));\n      }}\n    />\n  );\n};\n\nexport default RegisteredModelSelector;\n","import React from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport spacing from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { useParams, useNavigate } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { modelRegistryUrl, registeredModelUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport useRegisteredModels from '~/app/hooks/useRegisteredModels';\nimport { filterLiveModels } from '~/app/utils';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport { AppContext } from '~/app/context/AppContext';\nimport { useRegisterVersionData } from './useRegisterModelData';\nimport { isRegisterVersionSubmitDisabled, registerVersion } from './utils';\nimport RegistrationCommonFormSections from './RegistrationCommonFormSections';\nimport PrefilledModelRegistryField from './PrefilledModelRegistryField';\nimport RegistrationFormFooter from './RegistrationFormFooter';\nimport RegisteredModelSelector from './RegisteredModelSelector';\nimport { usePrefillRegisterVersionFields } from './usePrefillRegisterVersionFields';\nimport { SubmitLabel } from './const';\n\nconst RegisterVersion: React.FC = () => {\n  const { modelRegistry: mrName, registeredModelId: prefilledRegisteredModelId } = useParams();\n  const navigate = useNavigate();\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const { user } = React.useContext(AppContext);\n  const author = user.userId || '';\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [formData, setData] = useRegisterVersionData(prefilledRegisteredModelId);\n  const isSubmitDisabled = isSubmitting || isRegisterVersionSubmitDisabled(formData);\n  const [submitError, setSubmitError] = React.useState<Error | undefined>(undefined);\n  const [submittedVersionName, setSubmittedVersionName] = React.useState<string>('');\n  const [registrationErrorType, setRegistrationErrorType] = React.useState<string | undefined>(\n    undefined,\n  );\n\n  const { registeredModelId } = formData;\n\n  const [allRegisteredModels, loadedRegisteredModels, loadRegisteredModelsError] =\n    useRegisteredModels();\n  const liveRegisteredModels = filterLiveModels(allRegisteredModels.items);\n  const registeredModel = liveRegisteredModels.find(({ id }) => id === registeredModelId);\n\n  const { loadedPrefillData, loadPrefillDataError, latestVersion } =\n    usePrefillRegisterVersionFields({\n      registeredModel,\n      setData,\n    });\n\n  const handleSubmit = async () => {\n    if (!registeredModel) {\n      return; // We shouldn't be able to hit this due to form validation\n    }\n    setIsSubmitting(true);\n    setSubmitError(undefined);\n\n    const {\n      data: { modelVersion, modelArtifact },\n      errors,\n    } = await registerVersion(apiState, registeredModel, formData, author);\n\n    if (modelVersion && modelArtifact) {\n      navigate(registeredModelUrl(registeredModel.id, mrName));\n    } else if (Object.keys(errors).length > 0) {\n      const resourceName = Object.keys(errors)[0];\n      setSubmittedVersionName(formData.versionName);\n      setRegistrationErrorType(resourceName);\n      setSubmitError(errors[resourceName]);\n      setIsSubmitting(false);\n    }\n  };\n\n  const onCancel = () =>\n    navigate(\n      prefilledRegisteredModelId && registeredModel\n        ? registeredModelUrl(registeredModel.id, mrName)\n        : modelRegistryUrl(mrName),\n    );\n\n  return (\n    <ApplicationsPage\n      title=\"Register new version\"\n      description=\"Register a latest version to the model you selected below.\"\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => <Link to={modelRegistryUrl(mrName)}>Model registry - {mrName}</Link>}\n          />\n          {prefilledRegisteredModelId && registeredModel && (\n            <BreadcrumbItem\n              render={() => (\n                <Link to={registeredModelUrl(registeredModel.id, mrName)}>\n                  {registeredModel.name}\n                </Link>\n              )}\n            />\n          )}\n          <BreadcrumbItem>Register new version</BreadcrumbItem>\n        </Breadcrumb>\n      }\n      loadError={loadRegisteredModelsError || loadPrefillDataError}\n      // Data for prefilling is refetched when the model selection changes, so we don't handle its loaded state here.\n      // Instead we show a spinner in RegisteredModelSelector after that selection changes.\n      loaded={loadedRegisteredModels}\n      empty={false}\n    >\n      <PageSection hasBodyWrapper={false} isFilled>\n        <Form isWidthLimited>\n          <Stack hasGutter>\n            <StackItem>\n              <PrefilledModelRegistryField mrName={mrName} />\n            </StackItem>\n            <StackItem className={spacing.mbLg}>\n              <FormGroup\n                id=\"registered-model-container\"\n                isRequired\n                fieldId=\"model-name\"\n                labelHelp={\n                  !loadedPrefillData ? <Spinner size=\"sm\" className={spacing.mlMd} /> : undefined\n                }\n              >\n                <RegisteredModelSelector\n                  registeredModels={liveRegisteredModels}\n                  registeredModelId={registeredModelId}\n                  setRegisteredModelId={(id) => setData('registeredModelId', id)}\n                  isDisabled={!!prefilledRegisteredModelId}\n                />\n              </FormGroup>\n            </StackItem>\n            <StackItem>\n              <RegistrationCommonFormSections\n                formData={formData}\n                setData={setData}\n                isFirstVersion={false}\n                latestVersion={latestVersion}\n              />\n            </StackItem>\n          </Stack>\n        </Form>\n      </PageSection>\n      <RegistrationFormFooter\n        submitLabel={SubmitLabel.REGISTER_VERSION}\n        registrationErrorType={registrationErrorType}\n        submitError={submitError}\n        isSubmitDisabled={isSubmitDisabled}\n        isSubmitting={isSubmitting}\n        onSubmit={handleSubmit}\n        onCancel={onCancel}\n        versionName={submittedVersionName}\n      />\n    </ApplicationsPage>\n  );\n};\n\nexport default RegisterVersion;\n","import React from 'react';\nimport { UpdateObjectAtPropAndValue } from 'mod-arch-shared';\nimport { RegisteredModel, ModelVersion, ModelArtifact } from '~/app/types';\nimport { filterLiveVersions, getLastCreatedItem, uriToStorageFields } from '~/app/utils';\nimport useModelArtifactsByVersionId from '~/app/hooks/useModelArtifactsByVersionId';\nimport useModelVersionsByRegisteredModel from '~/app/hooks/useModelVersionsByRegisteredModel';\nimport { RegisterVersionFormData, ModelLocationType } from './useRegisterModelData';\n\ntype UsePrefillRegisterVersionFieldsArgs = {\n  registeredModel?: RegisteredModel;\n  setData: UpdateObjectAtPropAndValue<RegisterVersionFormData>;\n};\n\ntype UsePrefillRegisterVersionFieldsReturnVal = {\n  loadedPrefillData: boolean;\n  loadPrefillDataError?: Error;\n  latestVersion?: ModelVersion;\n  latestArtifact?: ModelArtifact;\n};\n\nexport const usePrefillRegisterVersionFields = ({\n  registeredModel,\n  setData,\n}: UsePrefillRegisterVersionFieldsArgs): UsePrefillRegisterVersionFieldsReturnVal => {\n  const [allModelVersions, loadedModelVersions, loadModelVersionsError] =\n    useModelVersionsByRegisteredModel(registeredModel?.id);\n  const liveModelVersions = filterLiveVersions(allModelVersions.items);\n  const latestVersion = getLastCreatedItem(liveModelVersions);\n\n  const [modelArtifacts, loadedModelArtifacts, loadModelArtifactsError] =\n    useModelArtifactsByVersionId(latestVersion?.id);\n  const latestArtifact = getLastCreatedItem(modelArtifacts.items);\n\n  // We don't care about artifact loading state if there is no version\n  const isLoadingVersionOrArtifact =\n    !!registeredModel && (!loadedModelVersions || (!!latestVersion && !loadedModelArtifacts));\n  const errorLoadingVersionOrArtifact = loadModelVersionsError || loadModelArtifactsError;\n\n  // Prefill fields from latest artifact if present. Repeat if selected model changes.\n  const prefilledForModelId = React.useRef<string | undefined>();\n  React.useEffect(() => {\n    if (\n      registeredModel &&\n      registeredModel.id !== prefilledForModelId.current &&\n      !isLoadingVersionOrArtifact\n    ) {\n      prefilledForModelId.current = registeredModel.id;\n      if (latestArtifact) {\n        setData('sourceModelFormat', latestArtifact.modelFormatName || '');\n        setData('sourceModelFormatVersion', latestArtifact.modelFormatVersion || '');\n\n        const decodedUri = (latestArtifact.uri && uriToStorageFields(latestArtifact.uri)) || null;\n\n        setData('modelLocationType', ModelLocationType.ObjectStorage);\n        if (decodedUri?.s3Fields) {\n          setData('modelLocationEndpoint', decodedUri.s3Fields.endpoint);\n          setData('modelLocationBucket', decodedUri.s3Fields.bucket);\n          setData('modelLocationRegion', decodedUri.s3Fields.region || '');\n          // Don't prefill the path since a new version will have a new path.\n        } else {\n          // We don't want an old model's location staying here if we changed models but have no location to prefill.\n          setData('modelLocationEndpoint', '');\n          setData('modelLocationBucket', '');\n          setData('modelLocationRegion', '');\n        }\n      } else {\n        setData('sourceModelFormat', '');\n        setData('sourceModelFormatVersion', '');\n        setData('modelLocationType', ModelLocationType.ObjectStorage);\n        setData('modelLocationEndpoint', '');\n        setData('modelLocationBucket', '');\n        setData('modelLocationRegion', '');\n      }\n    }\n  }, [registeredModel, isLoadingVersionOrArtifact, latestArtifact, setData]);\n\n  return {\n    loadedPrefillData: !isLoadingVersionOrArtifact,\n    loadPrefillDataError: errorLoadingVersionOrArtifact,\n    latestVersion,\n    latestArtifact,\n  };\n};\n","import React from \"react\";\nimport { ModelRegistryVersionDetailsTabExtension } from \"./extension-points\";\nimport ModelVersionsDetails from \"./components/OdhModelVersionDetails\";\nimport ModelVersionsArchiveDetails from \"~/app/pages/modelRegistry/screens/ModelVersionsArchive/ModelVersionArchiveDetails\";\nimport ArchiveModelVersionDetails from \"~/app/pages/modelRegistry/screens/ModelVersionsArchive/ArchiveModelVersionDetails\";\nimport { Route } from \"react-router-dom\";\nimport { LoadedExtension } from \"@openshift/dynamic-plugin-sdk\";\n\nexport const generateVersionDetailsTabExtensionRoutes = ({ isModelVersionsArchiveDetails, isArchiveModelVersionDetails, tabExtensions }: { isModelVersionsArchiveDetails?: boolean, isArchiveModelVersionDetails?: boolean, tabExtensions: LoadedExtension<ModelRegistryVersionDetailsTabExtension>[] }) => {\n    return tabExtensions.map((extension) => (\n        <Route\n            key={extension.properties.id}\n            path={extension.properties.id}\n            element={\n                isModelVersionsArchiveDetails \n                ? <ModelVersionsArchiveDetails\n                    tab={extension.properties.id}\n                    empty={false}\n                    />\n                : isArchiveModelVersionDetails\n                ? <ArchiveModelVersionDetails\n                    tab={extension.properties.id}\n                    empty={false}\n                    />\n                : <ModelVersionsDetails\n                    tab={extension.properties.id}\n                    empty={false}\n                    />\n            }\n        />\n    ));\n};\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport ModelRegistry from './screens/ModelRegistry';\nimport ModelRegistryCoreLoader from './ModelRegistryCoreLoader';\nimport { modelRegistryUrl } from './screens/routeUtils';\nimport RegisteredModelsArchive from './screens/RegisteredModelsArchive/RegisteredModelsArchive';\nimport { ModelVersionsTab } from './screens/ModelVersions/const';\nimport ModelVersions from '~/odh/components/OdhModelVersions';\nimport { ModelVersionDetailsTab } from './screens/ModelVersionDetails/const';\nimport ModelVersionsDetails from '~/odh/components/OdhModelVersionDetails';\nimport ModelVersionsArchive from './screens/ModelVersionsArchive/ModelVersionsArchive';\nimport ModelVersionsArchiveDetails from './screens/ModelVersionsArchive/ModelVersionArchiveDetails';\nimport ArchiveModelVersionDetails from './screens/ModelVersionsArchive/ArchiveModelVersionDetails';\nimport RegisteredModelsArchiveDetails from './screens/RegisteredModelsArchive/RegisteredModelArchiveDetails';\nimport RegisterModel from './screens/RegisterModel/RegisterModel';\nimport RegisterVersion from './screens/RegisterModel/RegisterVersion';\nimport { generateVersionDetailsTabExtensionRoutes } from '~/odh/VersionDetailsTabExtensionRoutes';\nimport { generateDetailsTabExtensionRoutes } from '~/odh/DetailsTabExtensionRoutes';\nimport { useExtensions } from '@odh-dashboard/plugin-core';\nimport { isModelRegistryVersionDetailsTabExtension, isModelRegistryDetailsTabExtension } from '~/odh/extension-points';\n\nconst ModelRegistryRoutes: React.FC = () => {\n  const tabExtensions = useExtensions(isModelRegistryVersionDetailsTabExtension);\n  const detailsTabExtensions = useExtensions(isModelRegistryDetailsTabExtension);\n  return(\n    <Routes>\n      <Route\n        path={'/:modelRegistry?/*'}\n        element={\n          <ModelRegistryCoreLoader\n            getInvalidRedirectPath={(modelRegistry) => modelRegistryUrl(modelRegistry)}\n          />\n        }\n      >\n        <Route index element={<ModelRegistry empty={false} />} />\n        <Route path=\"registeredModels/:registeredModelId\">\n          <Route index element={<Navigate to={ModelVersionsTab.OVERVIEW} replace />} />\n          <Route\n            path={ModelVersionsTab.VERSIONS}\n            element={<ModelVersions tab={ModelVersionsTab.VERSIONS} empty={false} />}\n          />\n          <Route\n            path={ModelVersionsTab.OVERVIEW}\n            element={<ModelVersions tab={ModelVersionsTab.OVERVIEW} empty={false} />}\n          />\n          {generateDetailsTabExtensionRoutes({ tabExtensions: detailsTabExtensions })}\n          <Route path=\"registerVersion\" element={<RegisterVersion />} />\n          <Route path=\"versions/:modelVersionId\">\n            <Route index element={<Navigate to={ModelVersionDetailsTab.DETAILS} replace />} />\n            <Route\n              path={ModelVersionDetailsTab.DETAILS}\n              element={<ModelVersionsDetails tab={ModelVersionDetailsTab.DETAILS} empty={false} />}\n            />\n            {generateVersionDetailsTabExtensionRoutes({ tabExtensions })}\n            <Route path=\"*\" element={<Navigate to=\".\" />} />\n          </Route>\n          <Route path=\"versions/archive\">\n            <Route index element={<ModelVersionsArchive empty={false} />} />\n            <Route path=\":modelVersionId\">\n              <Route index element={<Navigate to={ModelVersionDetailsTab.DETAILS} replace />} />\n              <Route\n                path={ModelVersionDetailsTab.DETAILS}\n                element={\n                  <ModelVersionsArchiveDetails tab={ModelVersionDetailsTab.DETAILS} empty={false} />\n                }\n              />\n              {generateVersionDetailsTabExtensionRoutes({ tabExtensions, isModelVersionsArchiveDetails: true })}\n\n              <Route path=\"*\" element={<Navigate to=\".\" />} />\n            </Route>\n            <Route path=\"*\" element={<Navigate to=\".\" />} />\n          </Route>\n          <Route path=\"*\" element={<Navigate to=\".\" />} />\n        </Route>\n        <Route path=\"registeredModels/archive\">\n          <Route index element={<RegisteredModelsArchive empty={false} />} />\n          <Route path=\":registeredModelId\">\n            <Route index element={<Navigate to={ModelVersionsTab.OVERVIEW} replace />} />\n            <Route\n              path={ModelVersionsTab.OVERVIEW}\n              element={\n                <RegisteredModelsArchiveDetails tab={ModelVersionsTab.OVERVIEW} empty={false} />\n              }\n            />\n            <Route\n              path={ModelVersionsTab.VERSIONS}\n              element={\n                <RegisteredModelsArchiveDetails tab={ModelVersionsTab.VERSIONS} empty={false} />\n              }\n            />\n            <Route path=\"versions/:modelVersionId\">\n              <Route index element={<Navigate to={ModelVersionDetailsTab.DETAILS} replace />} />\n              <Route\n                path={ModelVersionDetailsTab.DETAILS}\n                element={\n                  <ArchiveModelVersionDetails tab={ModelVersionDetailsTab.DETAILS} empty={false} />\n                }\n              />\n              {generateVersionDetailsTabExtensionRoutes({ tabExtensions, isArchiveModelVersionDetails: true })}\n\n              <Route path=\"*\" element={<Navigate to=\".\" />} />\n            </Route>\n            <Route path=\"*\" element={<Navigate to=\".\" />} />\n          </Route>\n          <Route path=\"*\" element={<Navigate to=\".\" />} />\n        </Route>\n        <Route path=\"registerModel\" element={<RegisterModel />} />\n        <Route path=\"registerVersion\" element={<RegisterVersion />} />\n        <Route path=\"*\" element={<Navigate to=\".\" />} />\n      </Route>\n    </Routes>\n  );\n}\n\nexport default ModelRegistryRoutes;\n","import React from \"react\";\nimport { ModelRegistryDetailsTabExtension } from \"~/odh/extension-points/details\";\nimport OdhModelVersions from \"~/odh/components/OdhModelVersions\";\nimport { Route } from \"react-router-dom\";\nimport { LoadedExtension } from \"@openshift/dynamic-plugin-sdk\";\n\nexport const generateDetailsTabExtensionRoutes = ({ \n  tabExtensions \n}: { \n  tabExtensions: LoadedExtension<ModelRegistryDetailsTabExtension>[] \n}) => {\n  return tabExtensions.map((extension) => (\n    <Route\n      key={extension.properties.id}\n      path={extension.properties.id}\n      element={\n        <OdhModelVersions\n          tab={extension.properties.id}\n          empty={false}\n        />\n      }\n    />\n  ));\n};\n","import type { Extension } from '@openshift/dynamic-plugin-sdk';\nimport type { ComponentCodeRef } from '@odh-dashboard/plugin-core';\nimport type { RegisteredModel } from '~/app/types';\n\nexport type ModelRegistryTableColumnExtension = Extension<\n  'model-registry.registered-models/table-column',\n  {\n    component: ComponentCodeRef<{ registeredModel: RegisteredModel }>;\n  }\n>;\n\nexport const isModelRegistryTableColumnExtension = (\n  extension: Extension,\n): extension is ModelRegistryTableColumnExtension =>\n  extension.type === 'model-registry.registered-models/table-column';\n","import { ProjectKind } from '@odh-dashboard/internal/k8sTypes.js';\nimport type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type { ModelDeployPrefillInfo } from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\n\nexport type ModelRegistryDeployModalExtension = Extension<\n  'model-registry.model-version/deploy-modal',\n  {\n    useAvailablePlatformIds: CodeRef<() => string[]>;\n    modalComponent: CodeRef<\n      React.ComponentType<{\n        modelDeployPrefill: {\n          data: ModelDeployPrefillInfo;\n          loaded: boolean;\n          error: Error | undefined;\n        };\n        onSubmit: () => void;\n        onClose: () => void;\n      }>\n    >;\n  }\n>;\n\nexport const isModelRegistryDeployModalExtension = (\n  extension: Extension,\n): extension is ModelRegistryDeployModalExtension =>\n  extension.type === 'model-registry.model-version/deploy-modal';\n\nexport type ModelRegistryVersionDeploymentsContextExtension = Extension<\n  'model-registry.model-version/deployments-context',\n  {\n    DeploymentsProvider: CodeRef<\n      React.ComponentType<{\n        children: ({\n          deployments,\n          loaded,\n        }: {\n          deployments?: any[];\n          loaded: boolean;\n        }) => React.ReactNode;\n        labelSelectors?: { [key: string]: string };\n        mrName?: string;\n      }>\n    >;\n  }\n>;\n\nexport const isModelRegistryVersionDeploymentsContextExtension = (\n  extension: Extension,\n): extension is ModelRegistryVersionDeploymentsContextExtension =>\n  extension.type === 'model-registry.model-version/deployments-context';","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\n\nexport type ModelRegistryVersionDetailsTabExtension = Extension<\n  'model-registry.version-details/tab',\n  {\n    id: string;\n    title: string;\n    component: CodeRef<React.ComponentType<{ rmId?: string; mvId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelRegistryVersionDetailsTabExtension = (\n  extension: Extension,\n): extension is ModelRegistryVersionDetailsTabExtension =>\n  extension.type === 'model-registry.version-details/tab';\n\nexport type ModelRegistryDetailsTabExtension = Extension<\n  'model-registry.details/tab',\n  {\n    id: string;\n    title: string;\n    component: CodeRef<React.ComponentType<{ rmId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelRegistryDetailsTabExtension = (\n  extension: Extension,\n): extension is ModelRegistryDetailsTabExtension =>\n  extension.type === 'model-registry.details/tab';\n","import type { CodeRef, Extension } from '@openshift/dynamic-plugin-sdk';\n\nexport type ModelDetailsDeploymentCardExtension = Extension<\n  'model-registry.model-details/details-card',\n  {\n    component: CodeRef<React.ComponentType<{ rmId?: string; mrName?: string }>>;\n  }\n>;\n\nexport const isModelDetailsDeploymentCardExtension = (\n  extension: Extension,\n): extension is ModelDetailsDeploymentCardExtension =>\n  extension.type === 'model-registry.model-details/details-card';\n"],"names":["api","apiAvailable","useModelRegistryAPI","callback","opts","listModelVersions","then","r","Promise","reject","Error","useFetchState","items","size","pageSize","nextPageToken","initialPromisePurity","getRedirectPath","modelRegistrySelectorProps","navigate","useNavigate","modelRegistry","currentModelRegistry","useParams","ModelRegistrySelector","onSelection","modelRegistryName","testid","title","description","primaryActionText","secondaryActionText","primaryActionOnClick","secondaryActionOnClick","headerIcon","customAction","EmptyState","icon","titleText","variant","EmptyStateVariant","sm","EmptyStateBody","EmptyStateFooter","EmptyStateActions","Button","ButtonVariant","primary","onClick","ModelRegistryFilterOptions","modelRegistryFilterOptions","keyword","owner","initialModelRegistryFilterData","ModelRegistryVersionsFilterOptions","modelRegistryVersionsFilterOptions","author","initialModelRegistryVersionsFilterData","filterOptions","filterOptionRenders","filterData","onFilterUpdate","children","testId","toolbarGroupProps","keys","Object","open","setOpen","currentFilterType","setCurrentFilterType","filterItem","ToolbarToggleGroup","breakpoint","toggleIcon","ToolbarGroup","ToolbarItem","Dropdown","onOpenChange","isOpenChange","shouldFocusToggleOnSelect","toggle","toggleRef","MenuToggle","id","ref","isExpanded","isOpen","popperProps","appendTo","DropdownList","map","filterKey","DropdownItem","key","optionValue","data","dataValue","label","value","ToolbarFilter","categoryName","labels","node","deleteLabel","showToolbarItem","onChange","rmColumns","field","sortable","a","b","name","localeCompare","width","first","parseInt","lastUpdateTimeSinceEpoch","second","Date","getTime","info","popover","popoverProps","position","NotificationTypes","useNotification","notificationCount","updateNotificationCount","dispatch","useContext","NotificationContext","success","message","type","ADD_NOTIFICATION","payload","status","AlertVariant","timestamp","warning","error","danger","remove","DELETE_NOTIFICATION","ArchiveRegisteredModelModal","onCancel","onSubmit","registeredModelName","notification","isSubmitting","setIsSubmitting","setError","confirmInputValue","setConfirmInputValue","isDisabled","trim","onClose","onConfirm","async","e","Modal","ModalHeader","titleIconVariant","ModalBody","Stack","hasGutter","StackItem","Flex","direction","default","spaceItems","FlexItem","TextInput","_e","newValue","onKeyDown","event","ModalFooter","DashboardModalFooter","submitLabel","isSubmitLoading","isSubmitDisabled","alertTitle","customProperties","isLabelModalOpen","setIsLabelModalOpen","searchValue","setSearchValue","allLabels","filteredLabels","filter","toLowerCase","includes","doSetSearchDebounced","useDebounceCallback","labelsComponent","textMaxWidth","index","Label","getLabelPopover","labelCount","Popover","bodyContent","LabelGroup","numLabels","getLabelModal","labelModal","Content","component","SearchInput","placeholder","_event","onClear","length","slice","getLabelComponent","RestoreRegisteredModelModal","registeredModel","rm","latestModelVersion","isArchiveRow","hasDeploys","refresh","apiState","ModelRegistryContext","preferredModelRegistry","ModelRegistrySelectorContext","isArchiveModalOpen","setIsArchiveModalOpen","isRestoreModalOpen","setIsRestoreModalOpen","rmUrl","columnExtensions","useExtensions","actions","isSeparator","isAriaDisabled","tooltipProps","content","undefined","Tr","Td","dataLabel","isInline","handleModelNameNavigation","rmId","Truncate","ContentVariants","small","handleVersionNameNavigation","mv","registeredModelId","extension","LazyCodeRefComponent","properties","props","ModelTimestamp","timeSinceEpoch","isActionCell","ActionsColumn","patchRegisteredModel","state","ARCHIVED","LIVE","clearFilters","registeredModels","modelVersions","toolbarContent","columnExtensionsLoaded","useResolvedExtensions","extendedColumns","columns","labelsIndex","findIndex","col","insertIndex","forEach","splice","Table","defaultSortColumn","onClearFilters","enablePagination","emptyTableView","DashboardEmptyTableView","rowRenderer","toggleGroupItems","tableToggleGroupItems","onClearAllFilters","isRegisterNewVersionOpen","setIsRegisterNewVersionOpen","isArchivedModelKebabOpen","setIsArchivedModelKebabOpen","tooltipRef","Toolbar","clearAllFilters","ToolbarContent","onSelect","isFullWidth","splitButtonItems","MenuToggleAction","tr","setFilterData","unfilteredRegisteredModels","archiveRegisteredModels","deploymentsContextExtensions","deploymentsContextLoaded","prevValues","src","alt","filteredRegisteredModels","ThemeAwareSearchInput","fieldLabel","className","style","minWidth","tableContent","reduce","DeploymentsProvider","toString","mrName","pageProps","modelsLoaded","modelsLoadError","refreshModels","useRegisteredModels","versionsLoaded","versionsLoadError","refreshVersions","loaded","loadError","ApplicationsPage","A","TitleWithIcon","objectType","Divider","headerContent","provideChildrenPadding","removeChildrenTopPadding","EmptyStateErrorMessage","bodyText","getInvalidRedirectPath","modelRegistriesLoaded","modelRegistriesLoadError","modelRegistries","updatePreferredModelRegistry","isMUITheme","useThemeContext","modelRegistryFromRoute","find","mr","Bullseye","Alert","renderStateProps","empty","emptyStatePage","KubeflowDocs","WhosMyAdministrator","redirectModelRegistry","Navigate","to","replace","Outlet","modelVersionId","getModelArtifactsByModelVersion","call","getRegisteredModel","modelVersion","registeredModelLoaded","registeredModelError","modelArtifactList","modelArtifactListLoaded","modelArtifactListError","modelName","modelDeployPrefillInfo","modelArtifact","connectionTypeName","uri","modelFormat","modelFormatName","modelFormatVersion","modelArtifactUri","initialConnectionName","storageKey","modelRegistryInfo","renderData","prefillInfo","submitError","modelDeployPrefill","render","extensions","extensionsLoaded","openModal","setOpenModal","availablePlatformIds","setAvailablePlatformIds","buttonState","onOpenModal","isModalAvailable","handleSubmit","useAvailablePlatformIds","HookNotify","uid","useHook","onNotify","modalComponent","baseActions","latestVersionActionsHeader","archiveRestoreActions","enabled","tooltip","breadcrumb","Breadcrumb","BreadcrumbItem","Link","isActive","ModelVersionsTab","ModelVersionsTabTitle","getModelVersionsByRegisteredModel","DropdownGroup","setIsOpen","deleteProperty","dontShowModalValue","setDontShowModalValue","ModalVariant","ouiaId","labelId","Checkbox","isChecked","_","checked","isAddRow","isEditing","keyValuePair","resolve","allExistingKeys","setIsEditing","isSavingEdits","setIsSavingEdits","isArchive","saveEditedProperty","showDeleteModal","unsavedKey","setUnsavedKey","unsavedValue","setUnsavedValue","isValueExpanded","setIsValueExpanded","isDeleteModalOpen","setIsDeleteModalOpen","keyValidationError","clearUnsavedInputs","handleDeleteProperty","propertyKeyInput","isRequired","autoFocus","str","validated","propertyValueInput","modifier","FormFieldset","FormHelperText","HelperText","HelperTextItem","ExpandableSection","truncateMaxLines","toggleText","onToggle","iconPosition","href","target","ActionList","isIconList","ActionListItem","saveEditedCustomProperties","isExpandedByDefault","onEditingChange","editingPropertyKeys","setEditingPropertyKeys","isAdding","setIsAdding","isEditingSomeRow","filteredProperties","isShowingMoreProperties","setIsShowingMoreProperties","needExpandControl","shownKeys","numHiddenKeys","requiredAsterisk","textColorStatusDanger","setIsExpanded","toggleContent","Badge","isRead","Thead","Th","screenReaderText","Tbody","string_value","k","setIsEditingKey","oldKey","newPair","op","_oldKey","spacing","mtSm","isArchiveModel","isExpandable","isEditingProperties","setIsEditingProperties","showEditingAlert","values","some","handleLabelsEditingChange","prev","handleDescriptionEditingChange","handlePropertiesEditingChange","labelsSection","EditableLabelsDescriptionListGroup","contentWhenEmpty","onLabelsChange","editedLabels","isCollapsible","labelProps","descriptionSection","EditableTextDescriptionListGroup","editableVariant","baseTestId","saveEditedValue","infoSection","DashboardDescriptionListGroup","ClipboardCopy","hoverTip","clickTip","isEmpty","createTimeSinceEpoch","propertiesSection","editedProperties","cardBody","CardBody","Sidebar","hasBorder","isPanelRight","SidebarContent","DescriptionList","SidebarPanel","columnModifier","md","Card","overflow","CardHeader","onExpand","toggleButtonProps","CardTitle","CardExpandableContent","totalVersions","showIcon","textDecoration","filteredVersions","latestModelVersions","toSorted","Number","List","isPlain","isBordered","ListItem","TruncatedText","maxLines","deploymentCard","Grid","GridItem","span","lg","ArchiveModelVersionModal","modelVersionName","RestoreModelVersionModal","hasDeployment","patchModelVersion","DeploymentsStateContext","deployments","useDeploymentsState","KnownLabels","MRDeploymentsContextProvider","labelSelectors","DeploymentsProviderComponent","deploymentsContextValue","Provider","OdhModelVersionsTableContent","mvId","s","model","kind","metadata","MODEL_VERSION_ID","REGISTERED_MODEL_ID","mvColumns","unfilteredModelVersions","archiveModelVersions","isArchivedModelVersionKebabOpen","setIsArchivedModelVersionKebabOpen","filteredModelVersions","date","toLocaleString","month","timeZone","getUTCDate","getUTCFullYear","tab","mvRefresh","tabExtensions","modelDetailsTabs","Tab","OVERVIEW","eventKey","TabTitleText","PageSection","hasBodyWrapper","isFilled","VERSIONS","Tabs","activeKey","role","relative","ModelVersionsContent","mvLoaded","mvLoadError","rmLoaded","rmLoadError","rmRefresh","useEffect","headerAction","ModelVersionDetailsTab","ModelVersionDetailsTabTitle","getModelVersion","selection","input","setInput","menuRef","liveModelVersions","latestVersion","latest","current","menuListItems","item","MenuItem","isSelected","itemId","color","push","menu","Menu","isScrollable","activeItemId","MenuSearch","MenuSearchInput","MenuContent","MenuList","MenuContainer","DescriptionListGroup","DescriptionListDescription","isModelCatalogAvailable","registeredFromCatalogDetails","registeredfromText","catalogModelUrl","sourceId","renderContent","groupTestId","isArchiveVersion","modelArtifacts","storageFields","registeredModelLoadError","Spinner","handleVersionUpdate","updatePromise","handleArtifactUpdate","String","Title","headingLevel","columnGap","rowGap","flex","isFillColumns","orientation","margin","h3","s3Fields","endpoint","InlineTruncatedClipboardCopy","textToCopy","region","bucket","path","ociUri","marginTop","patchModelArtifact","newVersion","modelVersionDetails","DETAILS","isInferenceService","deployment","ArchiveButtonDropdownItemContent","rmModelVersions","rmMvLoaded","hasModelVersionDeployment","hasRegisteredModelDeploymentByVersionIds","mvIds","mvIdSet","Set","has","hasRegisteredModelDeployment","useModelDeploymentDetection","v","isLoading","result","isOpenActionDropdown","setOpenActionDropdown","ActionListGroup","secondary","MRDeployButton","deployButton","Tooltip","ModelVersionsDetailsContent","refreshModelVersion","modelArtifactsLoaded","modelArtifactsLoadError","refreshModelArtifacts","alignItems","unfilteredmodelVersions","mrNameInput","FormGroup","fieldId","user","AppContext","userId","setSubmitError","formData","setData","useRegisterModelData","submittedRegisteredModelName","setSubmittedRegisteredModelName","submittedVersionName","setSubmittedVersionName","registrationErrorType","setRegistrationErrorType","registeredModelsLoaded","registeredModelsLoadError","isModelNameValid","isModelNameDuplicate","hasModelNameError","Form","isWidthLimited","mbLg","RegisterModelDetailsFormSection","RegistrationCommonFormSections","isFirstVersion","RegistrationFormFooter","REGISTER_MODEL","errors","versionName","resourceName","setRegisteredModelId","options","modelNameInput","TypeaheadSelect","onClearSelection","selectOptions","noOptionsFoundMessage","prefilledRegisteredModelId","allRegisteredModels","loadedRegisteredModels","loadRegisteredModelsError","liveRegisteredModels","loadedPrefillData","loadPrefillDataError","allModelVersions","loadedModelVersions","loadModelVersionsError","loadedModelArtifacts","loadModelArtifactsError","latestArtifact","isLoadingVersionOrArtifact","errorLoadingVersionOrArtifact","prefilledForModelId","decodedUri","ObjectStorage","usePrefillRegisterVersionFields","labelHelp","mlMd","REGISTER_VERSION","generateVersionDetailsTabExtensionRoutes","isModelVersionsArchiveDetails","isArchiveModelVersionDetails","Route","element","detailsTabExtensions","Routes","OdhModelVersions","generateDetailsTabExtensionRoutes","isModelRegistryTableColumnExtension","isModelRegistryDeployModalExtension","isModelRegistryVersionDeploymentsContextExtension","isModelRegistryVersionDetailsTabExtension","isModelRegistryDetailsTabExtension","isModelDetailsDeploymentCardExtension"],"sourceRoot":""}