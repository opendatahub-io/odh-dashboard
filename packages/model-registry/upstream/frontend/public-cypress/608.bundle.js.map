{"version":3,"file":"608.bundle.js","mappings":"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","sources":["webpack://model-registry-ui/./src/app/api/k8s.ts","webpack://model-registry-ui/./src/app/hooks/useModelRegistryAPI.ts","webpack://model-registry-ui/./src/concepts/modelRegistry/types.ts","webpack://model-registry-ui/./src/concepts/modelRegistry/utils.ts","webpack://model-registry-ui/./src/odh/const.ts","webpack://model-registry-ui/./src/odh/utils.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/FormFieldset.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ModelTimestamp.tsx","webpack://model-registry-ui/./src/app/context/AppContext.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegistrationCommonFormSections.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/utils.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/utils.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/const.ts","webpack://model-registry-ui/./src/odh/extension-points/connection.ts","webpack://model-registry-ui/./src/app/types.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/routeUtils.ts","webpack://model-registry-ui/./src/app/pages/modelCatalog/utils/modelCatalogUtils.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegisterModelErrors.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegistrationFormFooter.tsx","webpack://model-registry-ui/./src/app/utils.ts","webpack://model-registry-ui/./src/app/hooks/useModelRegistries.ts","webpack://model-registry-ui/./src/app/context/ModelRegistrySelectorContext.tsx","webpack://model-registry-ui/./src/app/routes/modelCatalog/catalogModelDetails.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/useRegisterModelData.ts","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/ModelRegistrySelector.tsx","webpack://model-registry-ui/./src/app/pages/modelRegistry/screens/RegisterModel/RegisterModelDetailsFormSection.tsx","webpack://model-registry-ui/./src/app/api/updateTimestamps.ts","webpack://model-registry-ui/./src/app/api/service.ts","webpack://model-registry-ui/./src/app/hooks/useModelRegistryAPIState.tsx","webpack://model-registry-ui/./src/app/context/ModelRegistryContext.tsx","webpack://model-registry-ui/./src/app/hooks/useRegisteredModels.ts"],"sourcesContent":["import {\n  ModelRegistryKind,\n  GroupKind,\n  RoleBindingKind,\n  K8sResourceCommon,\n  RoleBindingSubject,\n  RoleBindingRoleRef,\n  genRandomChars,\n} from 'mod-arch-shared';\nimport {\n  APIOptions,\n  handleRestFailures,\n  UserSettings,\n  assembleModArchBody,\n  isModArchResponse,\n  restCREATE,\n  restDELETE,\n  restGET,\n  restPATCH,\n} from 'mod-arch-core';\nimport { ModelRegistry, ModelRegistryPayload } from '~/app/types';\nimport { BFF_API_VERSION, URL_PREFIX } from '~/app/utilities/const';\nimport { RoleBindingPermissionsRoleType } from '~/app/pages/settings/roleBinding/types';\nimport { ListConfigSecretsResponse, NamespaceKind } from '~/app/shared/components/types';\n\nexport type ModelRegistryAndCredentials = {\n  modelRegistry: ModelRegistryKind;\n  databasePassword?: string;\n  newDatabaseCACertificate?: string;\n};\n\nexport const getListModelRegistries =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<ModelRegistry[]> =>\n    handleRestFailures(\n      restGET(hostPath, `${URL_PREFIX}/api/${BFF_API_VERSION}/model_registry`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistry[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getUser =\n  (hostPath: string) =>\n  (opts: APIOptions): Promise<UserSettings> =>\n    handleRestFailures(\n      restGET(hostPath, `${URL_PREFIX}/api/${BFF_API_VERSION}/user`, {}, opts),\n    ).then((response) => {\n      if (isModArchResponse<UserSettings>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getNamespaces =\n  (hostPath: string) =>\n  (opts: APIOptions): Promise<NamespaceKind[]> =>\n    handleRestFailures(\n      restGET(hostPath, `${URL_PREFIX}/api/${BFF_API_VERSION}/namespaces`, {}, opts),\n    ).then((response) => {\n      if (isModArchResponse<NamespaceKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getNamespacesForSettings =\n  (hostPath: string) =>\n  (opts: APIOptions): Promise<NamespaceKind[]> =>\n    handleRestFailures(\n      restGET(hostPath, `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/namespaces`, {}, opts),\n    ).then((response) => {\n      if (isModArchResponse<NamespaceKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getGroups =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<GroupKind[]> =>\n    handleRestFailures(\n      restGET(hostPath, `${URL_PREFIX}/api/${BFF_API_VERSION}/groups`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<GroupKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getRoleBindings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<RoleBindingKind[]> =>\n    handleRestFailures(\n      restGET(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/role_bindings`,\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<{ items: RoleBindingKind[] }>(response)) {\n        return response.data.items;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getModelRegistrySettings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, modelRegistryId: string): Promise<ModelRegistryAndCredentials> =>\n    handleRestFailures(\n      restGET(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/model_registry/${modelRegistryId}`,\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistryAndCredentials>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const listModelRegistrySettings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<ModelRegistryKind[]> =>\n    handleRestFailures(\n      restGET(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/model_registry`,\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistryKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const createModelRegistrySettings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, data: ModelRegistryPayload): Promise<ModelRegistryKind> =>\n    handleRestFailures(\n      restCREATE(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/model_registry`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistryKind>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const deleteModelRegistrySettings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    data: ModelRegistryKind,\n    modelRegistryId: string,\n  ): Promise<ModelRegistryKind[]> =>\n    handleRestFailures(\n      restDELETE(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/model_registry/${modelRegistryId}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistryKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const patchModelRegistrySettings =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    data: ModelRegistryKind,\n    modelRegistryId: string,\n  ): Promise<ModelRegistryKind[]> =>\n    handleRestFailures(\n      restPATCH(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/model_registry/${modelRegistryId}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelRegistryKind[]>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const createRoleBinding =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, data: RoleBindingKind): Promise<RoleBindingKind> =>\n    handleRestFailures(\n      restCREATE(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/role_bindings`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<RoleBindingKind>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const patchRoleBinding =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, data: RoleBindingKind, roleBindingName: string): Promise<RoleBindingKind> =>\n    handleRestFailures(\n      restPATCH(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/role_bindings/${roleBindingName}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<RoleBindingKind>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const deleteRoleBinding =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, roleBindingName: string): Promise<void> =>\n    handleRestFailures(\n      restDELETE(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/role_bindings/${roleBindingName}`,\n        {},\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<void>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\n//TODO : migrate this to shared library\nexport const addOwnerReference = <R extends K8sResourceCommon>(\n  resource: R,\n  owner?: K8sResourceCommon,\n  blockOwnerDeletion = false,\n): R => {\n  if (!owner) {\n    return resource;\n  }\n  const ownerReferences = resource.metadata?.ownerReferences || [];\n  if (\n    owner.metadata?.uid &&\n    owner.metadata.name &&\n    !ownerReferences.find((r) => r.uid === owner.metadata?.uid)\n  ) {\n    ownerReferences.push({\n      uid: owner.metadata.uid,\n      name: owner.metadata.name,\n      apiVersion: owner.apiVersion,\n      kind: owner.kind,\n      blockOwnerDeletion,\n    });\n  }\n  return {\n    ...resource,\n    metadata: {\n      ...resource.metadata,\n      ownerReferences,\n    },\n  };\n};\n\nexport const generateRoleBindingPermissions = (\n  namespace: string,\n  rbSubjectKind: RoleBindingSubject['kind'],\n  rbSubjectName: RoleBindingSubject['name'],\n  rbRoleRefName: RoleBindingPermissionsRoleType | string, //string because with MR this can include MR name\n  rbRoleRefKind: RoleBindingRoleRef['kind'],\n  rbLabels?: { [key: string]: string },\n  ownerReference?: K8sResourceCommon,\n): RoleBindingKind => {\n  const roleBindingObject: RoleBindingKind = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'RoleBinding',\n    metadata: {\n      name: `dashboard-permissions-${genRandomChars()}`,\n      namespace,\n      labels: rbLabels,\n    },\n    roleRef: {\n      apiGroup: 'rbac.authorization.k8s.io',\n      kind: rbRoleRefKind,\n      name: rbRoleRefName,\n    },\n    subjects: [\n      {\n        apiGroup: 'rbac.authorization.k8s.io',\n        kind: rbSubjectKind,\n        name: rbSubjectName,\n      },\n    ],\n  };\n  return addOwnerReference(roleBindingObject, ownerReference);\n};\n\nexport const listModelRegistryCertificateNames =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<ListConfigSecretsResponse> =>\n    handleRestFailures(\n      restGET(\n        hostPath,\n        `${URL_PREFIX}/api/${BFF_API_VERSION}/settings/certificates`,\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<{ items: ListConfigSecretsResponse }>(response)) {\n        return response.data.items;\n      }\n      throw new Error('Invalid response format');\n    });\n","import * as React from 'react';\nimport { ModelRegistryAPIState } from '~/app/hooks/useModelRegistryAPIState';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\n\ntype UseModelRegistryAPI = ModelRegistryAPIState & {\n  refreshAllAPI: () => void;\n};\n\nexport const useModelRegistryAPI = (): UseModelRegistryAPI => {\n  const { apiState, refreshAPIState: refreshAllAPI } = React.useContext(ModelRegistryContext);\n\n  return {\n    refreshAllAPI,\n    ...apiState,\n  };\n};\n","export enum ModelSourceKind {\n  CATALOG = 'catalog',\n  KFP = 'kfp',\n}\n\nexport type ModelSourceProperties = {\n  modelSourceKind?: ModelSourceKind;\n  modelSourceClass?: string;\n  modelSourceGroup?: string;\n  modelSourceName?: string;\n  modelSourceId?: string;\n};\n","import {\n  ModelRegistryCustomProperties,\n  ModelRegistryCustomProperty,\n  ModelRegistryCustomPropertyString,\n  ModelRegistryMetadataType,\n} from '~/app/types';\nimport { CatalogModel, CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { ModelSourceKind, ModelSourceProperties } from './types';\n\n/**\n * Converts model source properties to catalog parameters\n * @param properties - The model source properties\n * @returns CatalogModelDetailsParams object or null if not a catalog source or if required properties are missing\n */\nexport const modelSourcePropertiesToCatalogParams = (\n  properties: ModelSourceProperties,\n): CatalogModelDetailsParams | null => {\n  if (\n    properties.modelSourceKind !== ModelSourceKind.CATALOG ||\n    !properties.modelSourceClass ||\n    !properties.modelSourceName\n  ) {\n    return null;\n  }\n\n  return {\n    sourceId: properties.modelSourceClass,\n    modelName: properties.modelSourceName,\n  };\n};\n\nexport const catalogParamsToModelSourceProperties = (\n  params: CatalogModelDetailsParams,\n): ModelSourceProperties => ({\n  modelSourceKind: ModelSourceKind.CATALOG,\n  modelSourceName: params.modelName,\n});\n\nconst EMPTY_CUSTOM_PROPERTY_STRING = {\n  // eslint-disable-next-line camelcase\n  string_value: '',\n  metadataType: ModelRegistryMetadataType.STRING,\n} as const;\n\n/**\n * Creates custom properties from a catalog model\n * @param model - The catalog model item\n * @returns ModelRegistryCustomProperties object with labels and tasks\n */\nexport const getLabelsFromModelTasks = (\n  model: CatalogModel | null,\n): ModelRegistryCustomProperties => {\n  const tasks = model?.tasks?.reduce<ModelRegistryCustomProperties>((acc, cur) => {\n    acc[cur] = EMPTY_CUSTOM_PROPERTY_STRING;\n    return acc;\n  }, {});\n\n  return { ...tasks };\n};\n\nconst isStringProperty = (\n  prop: ModelRegistryCustomProperty,\n): prop is ModelRegistryCustomPropertyString =>\n  prop.metadataType === ModelRegistryMetadataType.STRING && prop.string_value === '';\n\nexport const getLabelsFromCustomProperties = (\n  customProperties?: ModelRegistryCustomProperties,\n): Record<string, ModelRegistryCustomPropertyString> => {\n  const filteredProperties: Record<string, ModelRegistryCustomPropertyString> = {};\n\n  if (!customProperties) {\n    return filteredProperties;\n  }\n\n  Object.keys(customProperties).forEach((key) => {\n    const prop = customProperties[key];\n    if (isStringProperty(prop)) {\n      filteredProperties[key] = prop;\n    }\n  });\n\n  return filteredProperties;\n};\n","export const DEPLOY_BUTTON_TOOLTIP = {\n  ENABLE_SINGLE_MODEL_SERVING:\n    'To deploy this model, an administrator must first enable single-model serving in the cluster settings.',\n  ENABLE_MODEL_SERVING_PLATFORM:\n    'To enable model serving, an administrator must first select a model serving platform in the cluster settings.',\n};\n","// TODO: remove this file once we have connection types support upstream\n// and update the reference to this file to the one in the model-serving upstream package\nimport { RegisteredModelLocation } from '~/app/utils';\nimport { DEPLOY_BUTTON_TOOLTIP } from '~/odh/const';\n\nexport enum ModelServingCompatibleTypes {\n  S3ObjectStorage = 'S3 compatible object storage',\n  URI = 'URI',\n  OCI = 'OCI compliant registry',\n}\n\nexport const URIConnectionTypeKeys = ['URI'];\nexport const OCIConnectionTypeKeys = ['.dockerconfigjson', 'OCI_HOST'];\nexport const OCIAccessTypeKey = ['ACCESS_TYPE'];\nexport const S3ConnectionTypeKeys = [\n  'AWS_ACCESS_KEY_ID',\n  'AWS_SECRET_ACCESS_KEY',\n  'AWS_S3_ENDPOINT',\n  'AWS_S3_BUCKET',\n];\n\nexport const uriToModelLocation = (uri?: string): RegisteredModelLocation => {\n  if (!uri) {\n    return null;\n  }\n  try {\n    const urlObj = new URL(uri);\n    if (urlObj.toString().startsWith('s3:')) {\n      // Some environments include the first token after the protocol (our bucket) in the pathname and some have it as the hostname\n      const [bucket, ...pathSplit] = [urlObj.hostname, ...urlObj.pathname.split('/')].filter(\n        Boolean,\n      );\n      const path = pathSplit.join('/');\n      const searchParams = new URLSearchParams(urlObj.search);\n      const endpoint = searchParams.get('endpoint');\n      const region = searchParams.get('defaultRegion');\n      if (endpoint && bucket && path) {\n        return {\n          s3Fields: { endpoint, bucket, region: region || undefined, path },\n          uri: null,\n          ociUri: null,\n        };\n      }\n      return null;\n    }\n    if (uri.startsWith('oci:')) {\n      return { s3Fields: null, uri: null, ociUri: uri };\n    }\n    return { s3Fields: null, uri, ociUri: null };\n  } catch {\n    return null;\n  }\n};\n\nconst modelServingCompatibleTypesMetadata: Record<\n  ModelServingCompatibleTypes,\n  {\n    name: string;\n    resource: string;\n    envVars: string[];\n    managedType?: string;\n  }\n> = {\n  [ModelServingCompatibleTypes.S3ObjectStorage]: {\n    name: ModelServingCompatibleTypes.S3ObjectStorage,\n    resource: 's3',\n    envVars: S3ConnectionTypeKeys,\n    managedType: 's3',\n  },\n  [ModelServingCompatibleTypes.URI]: {\n    name: ModelServingCompatibleTypes.URI,\n    resource: 'uri-v1',\n    envVars: URIConnectionTypeKeys,\n  },\n  [ModelServingCompatibleTypes.OCI]: {\n    name: ModelServingCompatibleTypes.OCI,\n    resource: 'oci-v1',\n    envVars: OCIConnectionTypeKeys,\n  },\n};\n\nexport const getModelServingConnectionTypeName = (type: ModelServingCompatibleTypes): string =>\n  modelServingCompatibleTypesMetadata[type].resource;\n\nexport const uriToConnectionTypeName = (uri?: string): string => {\n  const storageFields = uriToModelLocation(uri);\n  if (storageFields?.uri) {\n    return getModelServingConnectionTypeName(ModelServingCompatibleTypes.URI);\n  }\n  if (storageFields?.s3Fields) {\n    return getModelServingConnectionTypeName(ModelServingCompatibleTypes.S3ObjectStorage);\n  }\n  if (storageFields?.ociUri) {\n    return getModelServingConnectionTypeName(ModelServingCompatibleTypes.OCI);\n  }\n  return getModelServingConnectionTypeName(ModelServingCompatibleTypes.URI);\n};\n\nexport const getDeployButtonState = (\n  availablePlatformIds: string[],\n  requireKserve: boolean = false,\n): { enabled?: boolean; tooltip?: string } => {\n  if (availablePlatformIds.length === 0) {\n    return {\n      enabled: false,\n      tooltip: DEPLOY_BUTTON_TOOLTIP.ENABLE_MODEL_SERVING_PLATFORM,\n    };\n  }\n\n  // TODO: add OCI check when OCI model serving is supported\n  if (requireKserve && !availablePlatformIds.includes('kserve')) {\n    return {\n      enabled: false,\n      tooltip: DEPLOY_BUTTON_TOOLTIP.ENABLE_SINGLE_MODEL_SERVING,\n    };\n  }\n\n  return {\n    enabled: true,\n  };\n};\n","import { useThemeContext } from 'mod-arch-kubeflow';\nimport React, { ReactNode } from 'react';\n\ninterface FormFieldsetProps {\n  component: ReactNode;\n  field?: string;\n  className?: string;\n}\n\nconst FormFieldset: React.FC<FormFieldsetProps> = ({ component, field, className }) => {\n  const { isMUITheme } = useThemeContext();\n\n  if (!isMUITheme) {\n    return <>{component}</>;\n  }\n\n  return (\n    <div className={className ?? 'form-fieldset-wrapper'}>\n      {component}\n      <fieldset aria-hidden=\"true\" className=\"form-fieldset\">\n        {field && (\n          <legend className=\"form-fieldset-legend\">\n            <span>{field}</span>\n          </legend>\n        )}\n      </fieldset>\n    </div>\n  );\n};\n\nexport default FormFieldset;\n","import { Timestamp, TimestampTooltipVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { relativeTime } from 'mod-arch-shared';\n\ntype ModelTimestampProps = {\n  timeSinceEpoch?: string;\n};\n\nconst ModelTimestamp: React.FC<ModelTimestampProps> = ({ timeSinceEpoch }) => {\n  if (!timeSinceEpoch) {\n    return '--';\n  }\n\n  const time = new Date(parseInt(timeSinceEpoch)).getTime();\n\n  if (Number.isNaN(time)) {\n    return '--';\n  }\n\n  return (\n    <Timestamp\n      date={new Date(parseInt(timeSinceEpoch))}\n      tooltip={{\n        variant: TimestampTooltipVariant.default,\n      }}\n    >\n      {relativeTime(Date.now(), time)}\n    </Timestamp>\n  );\n};\n\nexport default ModelTimestamp;\n","import * as React from 'react';\nimport { UserSettings, ConfigSettings } from 'mod-arch-core';\n\ntype AppContextProps = {\n  config: ConfigSettings;\n  user: UserSettings;\n};\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\nexport const AppContext = React.createContext({} as AppContextProps);\n\nexport const useAppContext = (): AppContextProps => React.useContext(AppContext);\n","import * as React from 'react';\nimport { SearchInput, SearchInputProps, TextInput } from '@patternfly/react-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\n\ntype ThemeAwareSearchInputProps = Omit<SearchInputProps, 'onChange' | 'onClear'> & {\n  onChange: (value: string) => void; // Simplified onChange signature\n  onClear?: () => void; // Simplified optional onClear signature\n  fieldLabel?: string; // Additional prop for MUI FormFieldset label\n  'data-testid'?: string;\n  onClick?: () => void;\n};\n\nconst ThemeAwareSearchInput: React.FC<ThemeAwareSearchInputProps> = ({\n  value,\n  onChange,\n  onClear,\n  fieldLabel,\n  placeholder,\n  isDisabled,\n  className,\n  style,\n  'aria-label': ariaLabel = 'Search',\n  'data-testid': dataTestId,\n  onClick,\n  ...rest\n}) => {\n  const { isMUITheme } = useThemeContext();\n\n  if (isMUITheme) {\n    // Render MUI version using TextInput + FormFieldset\n    return (\n      <FormFieldset\n        className={className}\n        field={fieldLabel}\n        component={\n          <TextInput\n            value={value}\n            type=\"text\"\n            onChange={(_event, newValue) => onChange(newValue)} // Adapt signature\n            isDisabled={isDisabled}\n            aria-label={ariaLabel}\n            data-testid={dataTestId}\n            style={style}\n            onClick={onClick}\n            placeholder={placeholder}\n          />\n        }\n      />\n    );\n  }\n\n  // Render PF version using SearchInput\n  return (\n    <SearchInput\n      {...rest} // Pass all other applicable SearchInputProps\n      className={className}\n      style={style}\n      placeholder={placeholder}\n      value={value}\n      isDisabled={isDisabled}\n      aria-label={ariaLabel}\n      data-testid={dataTestId}\n      onClick={onClick}\n      onChange={(_event, newValue) => onChange(newValue)} // Adapt signature\n      onClear={(event) => {\n        event.stopPropagation();\n        onChange('');\n        onClear?.(); // Adapt signature\n      }}\n    />\n  );\n};\n\nexport default ThemeAwareSearchInput;\n","import React from 'react';\nimport {\n  FormGroup,\n  TextInput,\n  TextArea,\n  Radio,\n  HelperText,\n  HelperTextItem,\n  FormHelperText,\n  TextInputGroupMain,\n  TextInputGroup,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport spacing from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { useExtensions, LazyCodeRefComponent } from '@odh-dashboard/plugin-core';\nimport { FormSection, UpdateObjectAtPropAndValue } from 'mod-arch-shared';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\nimport { ModelVersion } from '~/app/types';\nimport { isAutofillConnectionButtonExtension } from '~/odh/extension-points';\nimport { ModelLocationType, RegistrationCommonFormData } from './useRegisterModelData';\nimport { isNameValid } from './utils';\nimport { MR_CHARACTER_LIMIT } from './const';\n\ntype RegistrationCommonFormSectionsProps<D extends RegistrationCommonFormData> = {\n  formData: D;\n  setData: UpdateObjectAtPropAndValue<D>;\n  isFirstVersion: boolean;\n  latestVersion?: ModelVersion;\n  isCatalogModel?: boolean;\n};\n\nconst RegistrationCommonFormSections = <D extends RegistrationCommonFormData>({\n  formData,\n  setData,\n  isFirstVersion,\n  latestVersion,\n  isCatalogModel,\n}: RegistrationCommonFormSectionsProps<D>): React.ReactNode => {\n  const isVersionNameValid = isNameValid(formData.versionName);\n\n  const {\n    versionName,\n    versionDescription,\n    sourceModelFormat,\n    sourceModelFormatVersion,\n    modelLocationType,\n    modelLocationEndpoint,\n    modelLocationBucket,\n    modelLocationRegion,\n    modelLocationPath,\n    modelLocationURI,\n  } = formData;\n\n  const versionNameInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"version-name\"\n      name=\"version-name\"\n      value={versionName}\n      onChange={(_e, value) => setData('versionName', value)}\n      validated={isVersionNameValid ? 'default' : 'error'}\n    />\n  );\n\n  const versionDescriptionInput = (\n    <TextArea\n      type=\"text\"\n      id=\"version-description\"\n      name=\"version-description\"\n      value={versionDescription}\n      onChange={(_e, value) => setData('versionDescription', value)}\n    />\n  );\n\n  const sourceModelFormatInput = (\n    <TextInput\n      type=\"text\"\n      placeholder=\"Example, tensorflow\"\n      id=\"source-model-format\"\n      name=\"source-model-format\"\n      value={sourceModelFormat}\n      onChange={(_e, value) => setData('sourceModelFormat', value)}\n    />\n  );\n\n  const sourceModelFormatVersionInput = (\n    <TextInput\n      type=\"text\"\n      placeholder=\"Example, 1\"\n      id=\"source-model-format-version\"\n      name=\"source-model-format-version\"\n      value={sourceModelFormatVersion}\n      onChange={(_e, value) => setData('sourceModelFormatVersion', value)}\n    />\n  );\n\n  const endpointInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"location-endpoint\"\n      name=\"location-endpoint\"\n      value={modelLocationEndpoint}\n      onChange={(_e, value) => setData('modelLocationEndpoint', value)}\n    />\n  );\n\n  const bucketInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"location-bucket\"\n      name=\"location-bucket\"\n      value={modelLocationBucket}\n      onChange={(_e, value) => setData('modelLocationBucket', value)}\n    />\n  );\n\n  const regionInput = (\n    <TextInput\n      type=\"text\"\n      id=\"location-region\"\n      name=\"location-region\"\n      value={modelLocationRegion}\n      onChange={(_e, value) => setData('modelLocationRegion', value)}\n    />\n  );\n\n  const pathInput = (\n    <TextInputGroup>\n      <TextInputGroupMain\n        icon=\"/\"\n        type=\"text\"\n        id=\"location-path\"\n        name=\"location-path\"\n        value={modelLocationPath}\n        onChange={(_e, value) => setData('modelLocationPath', value)}\n      />\n    </TextInputGroup>\n  );\n\n  const uriInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"location-uri\"\n      name=\"location-uri\"\n      value={modelLocationURI}\n      onChange={(_e, value) => setData('modelLocationURI', value)}\n      isDisabled={isCatalogModel}\n    />\n  );\n\n  const autofillConnectionButtonExtensions = useExtensions(isAutofillConnectionButtonExtension);\n  const autofillConnectionButtons = autofillConnectionButtonExtensions.map((extension) => (\n    <SplitItem>\n      <LazyCodeRefComponent\n        component={extension.properties.component}\n        props={{\n          modelLocationType,\n          setData,\n        }}\n      />\n    </SplitItem>\n  ));\n\n  return (\n    <>\n      <FormSection\n        title=\"Version details\"\n        description={\n          isFirstVersion\n            ? 'Provide model details that apply to every version of this model.'\n            : 'Configure details for the version of this model.'\n        }\n      >\n        <FormGroup label=\"Version name\" isRequired fieldId=\"version-name\">\n          <FormFieldset component={versionNameInput} field=\"Version Name\" />\n          <FormHelperText>\n            {latestVersion && (\n              <HelperText>\n                <HelperTextItem>Current version is {latestVersion.name}</HelperTextItem>\n              </HelperText>\n            )}\n            {!isVersionNameValid && (\n              <HelperText>\n                <HelperTextItem variant=\"error\">\n                  Cannot exceed {MR_CHARACTER_LIMIT} characters\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </FormHelperText>\n        </FormGroup>\n        <FormGroup label=\"Version description\" fieldId=\"version-description\">\n          <FormFieldset component={versionDescriptionInput} field=\"Version Description\" />\n        </FormGroup>\n        <FormGroup label=\"Source model format\" fieldId=\"source-model-format\">\n          <FormFieldset component={sourceModelFormatInput} field=\"Source Model Format\" />\n        </FormGroup>\n        <FormGroup label=\"Source model format version\" fieldId=\"source-model-format-version\">\n          <FormFieldset\n            component={sourceModelFormatVersionInput}\n            field=\"Source Model Format Version\"\n          />\n        </FormGroup>\n      </FormSection>\n      <FormSection\n        title=\"Model location\"\n        description=\"Specify the model location by providing either the object storage details or the URI.\"\n      >\n        <Split>\n          <SplitItem isFilled>\n            <Radio\n              isChecked={modelLocationType === ModelLocationType.ObjectStorage}\n              name=\"location-type-object-storage\"\n              isDisabled={isCatalogModel}\n              onChange={() => {\n                setData('modelLocationType', ModelLocationType.ObjectStorage);\n              }}\n              label=\"Object storage\"\n              id=\"location-type-object-storage\"\n            />\n          </SplitItem>\n          {modelLocationType === ModelLocationType.ObjectStorage && (\n            <>{autofillConnectionButtons}</>\n          )}\n        </Split>\n        {modelLocationType === ModelLocationType.ObjectStorage && (\n          <>\n            <FormGroup\n              className={spacing.mlLg}\n              label=\"Endpoint\"\n              isRequired\n              fieldId=\"location-endpoint\"\n            >\n              <FormFieldset component={endpointInput} field=\"Endpoint\" />\n            </FormGroup>\n            <FormGroup className={spacing.mlLg} label=\"Bucket\" isRequired fieldId=\"location-bucket\">\n              <FormFieldset component={bucketInput} field=\"Bucket\" />\n            </FormGroup>\n            <FormGroup className={spacing.mlLg} label=\"Region\" fieldId=\"location-region\">\n              <FormFieldset component={regionInput} field=\"Region\" />\n            </FormGroup>\n            <FormGroup\n              className={`location-path` + ` ${spacing.mlLg}`}\n              label=\"Path\"\n              isRequired\n              fieldId=\"location-path\"\n            >\n              <FormFieldset component={pathInput} field=\"Path\" />\n              <HelperText>\n                <HelperTextItem>\n                  Enter a path to a model or folder. This path cannot point to a root folder.\n                </HelperTextItem>\n              </HelperText>\n            </FormGroup>\n          </>\n        )}\n        <Split>\n          <SplitItem isFilled>\n            <Radio\n              isChecked={modelLocationType === ModelLocationType.URI}\n              name=\"location-type-uri\"\n              onChange={() => {\n                setData('modelLocationType', ModelLocationType.URI);\n              }}\n              label=\"URI\"\n              id=\"location-type-uri\"\n            />\n          </SplitItem>\n          {modelLocationType === ModelLocationType.URI && !isCatalogModel && (\n            <>{autofillConnectionButtons}</>\n          )}\n        </Split>\n        {modelLocationType === ModelLocationType.URI &&\n          (!isCatalogModel ? (\n            <FormGroup className={spacing.mlLg} label=\"URI\" isRequired fieldId=\"location-uri\">\n              <FormFieldset component={uriInput} field=\"URI\" />\n            </FormGroup>\n          ) : (\n            formData.modelLocationURI\n          ))}\n      </FormSection>\n    </>\n  );\n};\n\nexport default RegistrationCommonFormSections;\n","import { KeyValuePair } from 'mod-arch-core';\nimport {\n  ModelRegistry,\n  ModelRegistryCustomProperties,\n  ModelRegistryCustomProperty,\n  ModelRegistryMetadataType,\n  ModelRegistryStringCustomProperties,\n  ModelVersion,\n  RegisteredModel,\n} from '~/app/types';\nimport { COMPANY_URI } from '~/app/utilities/const';\nimport { getLastCreatedItem } from '~/app/utils';\nimport {\n  ModelRegistryFilterDataType,\n  ModelRegistryVersionsFilterDataType,\n} from '~/app/pages/modelRegistry/screens/const';\n\nexport type ObjectStorageFields = {\n  endpoint: string;\n  bucket: string;\n  region?: string;\n  path: string;\n};\n\n// Retrieves the labels from customProperties that have non-empty string_value.\nexport const getLabels = <T extends ModelRegistryCustomProperties>(customProperties: T): string[] =>\n  Object.keys(customProperties).filter((key) => {\n    const prop = customProperties[key];\n    return prop.metadataType === ModelRegistryMetadataType.STRING && prop.string_value === '';\n  });\n\n// Returns the customProperties object with an updated set of labels (non-empty string_value) without affecting other properties.\nexport const mergeUpdatedLabels = (\n  customProperties: ModelRegistryCustomProperties,\n  updatedLabels: string[],\n): ModelRegistryCustomProperties => {\n  const existingLabels = getLabels(customProperties);\n  const addedLabels = updatedLabels.filter((label) => !existingLabels.includes(label));\n  const removedLabels = existingLabels.filter((label) => !updatedLabels.includes(label));\n  const customPropertiesCopy = { ...customProperties };\n  removedLabels.forEach((label) => {\n    delete customPropertiesCopy[label];\n  });\n  addedLabels.forEach((label) => {\n    customPropertiesCopy[label] = {\n      // eslint-disable-next-line camelcase\n      string_value: '',\n      metadataType: ModelRegistryMetadataType.STRING,\n    };\n  });\n  return customPropertiesCopy;\n};\n\n// Retrieves the customProperties that are not special (_registeredFrom) or labels (they have a defined string_value).\nexport const getProperties = <T extends ModelRegistryCustomProperties>(\n  customProperties: T,\n): ModelRegistryStringCustomProperties => {\n  const initial: ModelRegistryStringCustomProperties = {};\n  return Object.keys(customProperties).reduce((acc, key) => {\n    // _lastModified is a property that is required to update the timestamp on the backend and we have a workaround for it. It should be resolved by\n    // backend team\n    if (key === '_lastModified' || /^_registeredFrom/.test(key)) {\n      return acc;\n    }\n\n    const prop = customProperties[key];\n    if (prop.metadataType === ModelRegistryMetadataType.STRING && prop.string_value !== '') {\n      return { ...acc, [key]: prop };\n    }\n    return acc;\n  }, initial);\n};\n\n// Returns the customProperties object with a single string property added, updated or deleted\nexport const mergeUpdatedProperty = (\n  args: { customProperties: ModelRegistryCustomProperties } & (\n    | { op: 'create'; newPair: KeyValuePair }\n    | { op: 'update'; oldKey: string; newPair: KeyValuePair }\n    | { op: 'delete'; oldKey: string }\n  ),\n): ModelRegistryCustomProperties => {\n  const { op } = args;\n  const customPropertiesCopy = { ...args.customProperties };\n  if (op === 'delete' || (op === 'update' && args.oldKey !== args.newPair.key)) {\n    delete customPropertiesCopy[args.oldKey];\n  }\n  if (op === 'create' || op === 'update') {\n    const { key, value } = args.newPair;\n    customPropertiesCopy[key] = {\n      // eslint-disable-next-line camelcase\n      string_value: value,\n      metadataType: ModelRegistryMetadataType.STRING,\n    };\n  }\n  return customPropertiesCopy;\n};\n\nexport const getCustomPropString = <\n  T extends Record<string, ModelRegistryCustomProperty | undefined>,\n>(\n  customProperties: T,\n  key: string,\n): string => {\n  const prop = customProperties[key];\n\n  if (prop?.metadataType === 'MetadataStringValue') {\n    return prop.string_value;\n  }\n  return '';\n};\n\nconst isMatchVersionKeyword = (mv: ModelVersion, keywordFilter: string): boolean =>\n  mv.name.toLowerCase().includes(keywordFilter) ||\n  (mv.description && mv.description.toLowerCase().includes(keywordFilter)) ||\n  getLabels(mv.customProperties).some((label) => label.toLowerCase().includes(keywordFilter));\n\nexport const filterModelVersions = (\n  unfilteredModelVersions: ModelVersion[],\n  filterData: ModelRegistryVersionsFilterDataType,\n): ModelVersion[] => {\n  const keywordFilter = filterData.Keyword?.toLowerCase();\n  const authorFilter = filterData.Author?.toLowerCase();\n\n  return unfilteredModelVersions.filter((mv: ModelVersion) => {\n    if (!keywordFilter && !authorFilter) {\n      return true;\n    }\n\n    const doesNotMatchVersion = keywordFilter && !isMatchVersionKeyword(mv, keywordFilter);\n\n    if (doesNotMatchVersion) {\n      return false;\n    }\n\n    return !authorFilter || mv.author?.toLowerCase().includes(authorFilter);\n  });\n};\n\nexport const sortModelVersionsByCreateTime = (registeredModels: ModelVersion[]): ModelVersion[] =>\n  registeredModels.toSorted((a, b) => {\n    const first = parseInt(a.createTimeSinceEpoch);\n    const second = parseInt(b.createTimeSinceEpoch);\n    return new Date(second).getTime() - new Date(first).getTime();\n  });\n\nexport const filterRegisteredModels = (\n  unfilteredRegisteredModels: RegisteredModel[],\n  unfilteredModelVersions: ModelVersion[],\n  filterData: ModelRegistryFilterDataType,\n): RegisteredModel[] => {\n  const keywordFilter = filterData.Keyword?.toLowerCase();\n  const ownerFilter = filterData.Owner?.toLowerCase();\n\n  return unfilteredRegisteredModels.filter((rm: RegisteredModel) => {\n    if (!keywordFilter && !ownerFilter) {\n      return true;\n    }\n    const modelVersions = unfilteredModelVersions.filter((mv) => mv.registeredModelId === rm.id);\n    const doesNotMatchModel =\n      keywordFilter &&\n      !(\n        rm.name.toLowerCase().includes(keywordFilter) ||\n        (rm.description && rm.description.toLowerCase().includes(keywordFilter)) ||\n        getLabels(rm.customProperties).some((label) => label.toLowerCase().includes(keywordFilter))\n      );\n\n    const doesNotMatchVersions =\n      keywordFilter &&\n      !modelVersions.some((mv: ModelVersion) => isMatchVersionKeyword(mv, keywordFilter));\n\n    if (doesNotMatchModel && doesNotMatchVersions) {\n      return false;\n    }\n\n    return !ownerFilter || rm.owner?.toLowerCase().includes(ownerFilter);\n  });\n};\n\nexport const getServerAddress = (resource: ModelRegistry): string => resource.serverAddress || '';\n\nexport const isValidHttpUrl = (value: string): boolean => {\n  try {\n    const url = new URL(value);\n    const isHttp = url.protocol === 'http:' || url.protocol === 'https:';\n    // Domain validation\n    const domainPattern = /^(?!-)[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*\\.[A-Za-z]{2,}$/;\n\n    return isHttp && domainPattern.test(url.hostname);\n  } catch {\n    return false;\n  }\n};\n\nexport const isCompanyUri = (uri: string): boolean => uri.startsWith(`${COMPANY_URI}/`);\n\nexport const getLatestVersionForRegisteredModel = (\n  modelVersions: ModelVersion[],\n  rmId: string,\n): ModelVersion | undefined => {\n  const filteredVersions = modelVersions.filter((mv) => mv.registeredModelId === rmId);\n  const latestVersion = getLastCreatedItem(filteredVersions);\n  return latestVersion;\n};\n","import {\n  ModelArtifact,\n  ModelArtifactState,\n  ModelState,\n  ModelVersion,\n  RegisteredModel,\n  RegisteredModelList,\n} from '~/app/types';\nimport { ModelRegistryAPIState } from '~/app/hooks/useModelRegistryAPIState';\nimport { objectStorageFieldsToUri } from '~/app/utils';\nimport {\n  ModelLocationType,\n  RegisterCatalogModelFormData,\n  RegisterModelFormData,\n  RegisterVersionFormData,\n  RegistrationCommonFormData,\n} from './useRegisterModelData';\nimport { RegistrationErrorType, MR_CHARACTER_LIMIT } from './const';\n\nexport type RegisterModelCreatedResources = RegisterVersionCreatedResources & {\n  registeredModel?: RegisteredModel;\n};\n\nexport type RegisterVersionCreatedResources = {\n  modelVersion?: ModelVersion;\n  modelArtifact?: ModelArtifact;\n};\n\nexport const registerModel = async (\n  apiState: ModelRegistryAPIState,\n  formData: RegisterModelFormData,\n  author: string,\n): Promise<{\n  data: RegisterModelCreatedResources;\n  errors: { [key: string]: Error | undefined };\n}> => {\n  let registeredModel;\n  const error: { [key: string]: Error | undefined } = {};\n  try {\n    registeredModel = await apiState.api.createRegisteredModel(\n      {},\n      {\n        name: formData.modelName,\n        description: formData.modelDescription,\n        customProperties: formData.modelCustomProperties || {},\n        owner: author,\n        state: ModelState.LIVE,\n      },\n    );\n  } catch (e) {\n    if (e instanceof Error) {\n      error[RegistrationErrorType.REGISTERED_MODEL] = e;\n    }\n    return { data: { registeredModel }, errors: error };\n  }\n  const {\n    data: { modelVersion, modelArtifact },\n    errors,\n  } = await registerVersion(apiState, registeredModel, formData, author, true);\n\n  return {\n    data: { registeredModel, modelVersion, modelArtifact },\n    errors,\n  };\n};\n\nexport const registerVersion = async (\n  apiState: ModelRegistryAPIState,\n  registeredModel: RegisteredModel,\n  formData: Omit<RegisterVersionFormData, 'registeredModelId'>,\n  author: string,\n  isFirstVersion?: boolean,\n): Promise<{\n  data: RegisterVersionCreatedResources;\n  errors: { [key: string]: Error | undefined };\n}> => {\n  let modelVersion;\n  let modelArtifact;\n  const errors: { [key: string]: Error | undefined } = {};\n  try {\n    modelVersion = await apiState.api.createModelVersionForRegisteredModel(\n      {},\n      registeredModel.id,\n      {\n        name: formData.versionName,\n        description: formData.versionDescription,\n        customProperties: formData.versionCustomProperties || {},\n        state: ModelState.LIVE,\n        author,\n        registeredModelId: registeredModel.id,\n      },\n      registeredModel,\n      isFirstVersion,\n    );\n  } catch (e) {\n    if (e instanceof Error) {\n      errors[RegistrationErrorType.MODEL_VERSION] = e;\n    }\n    return { data: { modelVersion, modelArtifact }, errors };\n  }\n\n  try {\n    modelArtifact = await apiState.api.createModelArtifactForModelVersion({}, modelVersion.id, {\n      name: `${formData.versionName}`,\n      description: formData.versionDescription,\n      customProperties: {},\n      state: ModelArtifactState.LIVE,\n      author,\n      modelFormatName: formData.sourceModelFormat,\n      modelFormatVersion: formData.sourceModelFormatVersion,\n      ...formData.additionalArtifactProperties,\n      // storageKey: 'TODO',\n      uri:\n        formData.modelLocationType === ModelLocationType.ObjectStorage\n          ? objectStorageFieldsToUri({\n              endpoint: formData.modelLocationEndpoint,\n              bucket: formData.modelLocationBucket,\n              region: formData.modelLocationRegion,\n              path: formData.modelLocationPath,\n            }) || '' // We'll only hit this case if required fields are empty strings, so form validation should catch it.\n          : formData.modelLocationURI,\n      artifactType: 'model-artifact',\n    });\n  } catch (e) {\n    if (e instanceof Error) {\n      errors[RegistrationErrorType.MODEL_ARTIFACT] = e;\n    }\n  }\n\n  return { data: { modelVersion, modelArtifact }, errors };\n};\n\nconst isSubmitDisabledForCommonFields = (formData: RegistrationCommonFormData): boolean => {\n  const {\n    versionName,\n    modelLocationType,\n    modelLocationURI,\n    modelLocationBucket,\n    modelLocationEndpoint,\n    modelLocationPath,\n  } = formData;\n  return (\n    !versionName ||\n    (modelLocationType === ModelLocationType.URI && !modelLocationURI) ||\n    (modelLocationType === ModelLocationType.ObjectStorage &&\n      (!modelLocationBucket || !modelLocationEndpoint || !modelLocationPath)) ||\n    !isNameValid(versionName)\n  );\n};\n\nexport const isRegisterModelSubmitDisabled = (\n  formData: RegisterModelFormData,\n  registeredModels: RegisteredModelList,\n): boolean =>\n  !formData.modelName ||\n  isSubmitDisabledForCommonFields(formData) ||\n  !isNameValid(formData.modelName) ||\n  isModelNameExisting(formData.modelName, registeredModels);\n\nexport const isRegisterVersionSubmitDisabled = (formData: RegisterVersionFormData): boolean =>\n  !formData.registeredModelId || isSubmitDisabledForCommonFields(formData);\n\nexport const isRegisterCatalogModelSubmitDisabled = (\n  formData: RegisterCatalogModelFormData,\n  registeredModels: RegisteredModelList,\n): boolean => isRegisterModelSubmitDisabled(formData, registeredModels) || !formData.modelRegistry;\n\nexport const isNameValid = (name: string): boolean => name.length <= MR_CHARACTER_LIMIT;\n\nexport const isModelNameExisting = (name: string, registeredModels: RegisteredModelList): boolean =>\n  registeredModels.items.some((model) => model.name === name);\n","export const MR_CHARACTER_LIMIT = 128;\n\nexport enum SubmitLabel {\n  REGISTER_MODEL = 'Register model',\n  REGISTER_VERSION = 'Register new version',\n}\n\nexport enum RegistrationErrorType {\n  REGISTERED_MODEL = 'registeredModel',\n  MODEL_VERSION = 'modelVersion',\n  MODEL_ARTIFACT = 'modelArtifact',\n}\n","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type {\n  ModelLocationType,\n  RegistrationCommonFormData,\n} from '~/app/pages/modelRegistry/screens/RegisterModel/useRegisterModelData';\n\nexport type AutofillConnectionButtonExtension = Extension<\n  'model-registry.register/autofill-connection',\n  {\n    component: CodeRef<{\n      default: React.ComponentType<{\n        modelLocationType: ModelLocationType;\n        setData: (\n          propKey: keyof Pick<\n            RegistrationCommonFormData,\n            | 'modelLocationEndpoint'\n            | 'modelLocationBucket'\n            | 'modelLocationRegion'\n            | 'modelLocationURI'\n          >,\n          propValue: string,\n        ) => void;\n      }>;\n    }>;\n  }\n>;\n\nexport const isAutofillConnectionButtonExtension = (\n  extension: Extension,\n): extension is AutofillConnectionButtonExtension =>\n  extension.type === 'model-registry.register/autofill-connection';\n","import { APIOptions } from 'mod-arch-core';\nimport { ModelSourceProperties } from '~/concepts/modelRegistry/types';\n\nexport enum ModelState {\n  LIVE = 'LIVE',\n  ARCHIVED = 'ARCHIVED',\n}\n\nexport enum ModelArtifactState {\n  UNKNOWN = 'UNKNOWN',\n  PENDING = 'PENDING',\n  LIVE = 'LIVE',\n  MARKED_FOR_DELETION = 'MARKED_FOR_DELETION',\n  DELETED = 'DELETED',\n  ABANDONED = 'ABANDONED',\n  REFERENCE = 'REFERENCE',\n}\n\nexport type ModelRegistry = {\n  name: string;\n  displayName: string;\n  description: string;\n  serverAddress?: string;\n};\n\nexport type ModelRegistryPayload = {\n  modelRegistry: {\n    metadata: {\n      name: string;\n      annotations: {\n        'openshift.io/display-name': string;\n        'openshift.io/description': string;\n      };\n    };\n    spec: {\n      mysql: {\n        host: string;\n        port: number;\n        username: string;\n        database: string;\n      };\n    };\n  };\n};\n\nexport enum ModelRegistryMetadataType {\n  INT = 'MetadataIntValue',\n  DOUBLE = 'MetadataDoubleValue',\n  STRING = 'MetadataStringValue',\n  STRUCT = 'MetadataStructValue',\n  PROTO = 'MetadataProtoValue',\n  BOOL = 'MetadataBoolValue',\n}\n\nexport type ModelRegistryCustomPropertyInt = {\n  metadataType: ModelRegistryMetadataType.INT;\n  int_value: string; // int64-formatted string\n};\n\nexport type ModelRegistryCustomPropertyDouble = {\n  metadataType: ModelRegistryMetadataType.DOUBLE;\n  double_value: number;\n};\n\nexport type ModelRegistryCustomPropertyString = {\n  metadataType: ModelRegistryMetadataType.STRING;\n  string_value: string;\n};\n\nexport type ModelRegistryCustomPropertyStruct = {\n  metadataType: ModelRegistryMetadataType.STRUCT;\n  struct_value: string; // Base64 encoded bytes for struct value\n};\n\nexport type ModelRegistryCustomPropertyProto = {\n  metadataType: ModelRegistryMetadataType.PROTO;\n  type: string; // url describing proto value\n  proto_value: string; // Base64 encoded bytes for proto value\n};\n\nexport type ModelRegistryCustomPropertyBool = {\n  metadataType: ModelRegistryMetadataType.BOOL;\n  bool_value: boolean;\n};\n\nexport type ModelRegistryCustomProperty =\n  | ModelRegistryCustomPropertyInt\n  | ModelRegistryCustomPropertyDouble\n  | ModelRegistryCustomPropertyString\n  | ModelRegistryCustomPropertyStruct\n  | ModelRegistryCustomPropertyProto\n  | ModelRegistryCustomPropertyBool;\n\nexport type ModelRegistryCustomProperties = Record<string, ModelRegistryCustomProperty>;\nexport type ModelRegistryStringCustomProperties = Record<string, ModelRegistryCustomPropertyString>;\n\nexport type ModelRegistryBase = {\n  id: string;\n  name: string;\n  externalID?: string;\n  description?: string;\n  createTimeSinceEpoch: string;\n  lastUpdateTimeSinceEpoch: string;\n  customProperties: ModelRegistryCustomProperties;\n};\n\nexport type ModelArtifact = ModelRegistryBase &\n  ModelSourceProperties & {\n    uri?: string;\n    state?: ModelArtifactState;\n    author?: string;\n    modelFormatName?: string;\n    storageKey?: string;\n    storagePath?: string;\n    modelFormatVersion?: string;\n    serviceAccountName?: string;\n    artifactType: string;\n  };\n\nexport type ModelVersion = ModelRegistryBase & {\n  state?: ModelState;\n  author?: string;\n  registeredModelId: string;\n};\n\nexport type RegisteredModel = ModelRegistryBase & {\n  state?: ModelState;\n  owner?: string;\n};\n\nexport type CreateRegisteredModelData = Omit<\n  RegisteredModel,\n  'lastUpdateTimeSinceEpoch' | 'createTimeSinceEpoch' | 'id'\n>;\n\nexport type CreateModelVersionData = Omit<\n  ModelVersion,\n  'lastUpdateTimeSinceEpoch' | 'createTimeSinceEpoch' | 'id'\n>;\n\nexport type CreateModelArtifactData = Omit<\n  ModelArtifact,\n  'lastUpdateTimeSinceEpoch' | 'createTimeSinceEpoch' | 'id'\n>;\n\nexport type ModelRegistryListParams = {\n  size: number;\n  pageSize: number;\n  nextPageToken: string;\n};\n\nexport type RegisteredModelList = ModelRegistryListParams & { items: RegisteredModel[] };\n\nexport type ModelVersionList = ModelRegistryListParams & { items: ModelVersion[] };\n\nexport type ModelArtifactList = ModelRegistryListParams & { items: ModelArtifact[] };\n\nexport type CreateRegisteredModel = (\n  opts: APIOptions,\n  data: CreateRegisteredModelData,\n) => Promise<RegisteredModel>;\n\nexport type CreateModelVersionForRegisteredModel = (\n  opts: APIOptions,\n  registeredModelId: string,\n  data: CreateModelVersionData,\n  registeredModel: RegisteredModel,\n  isFirstVersion?: boolean,\n) => Promise<ModelVersion>;\n\nexport type CreateModelArtifactForModelVersion = (\n  opts: APIOptions,\n  modelVersionId: string,\n  data: CreateModelArtifactData,\n) => Promise<ModelArtifact>;\n\nexport type GetRegisteredModel = (\n  opts: APIOptions,\n  registeredModelId: string,\n) => Promise<RegisteredModel>;\n\nexport type GetModelVersion = (opts: APIOptions, modelversionId: string) => Promise<ModelVersion>;\n\nexport type GetListModelVersions = (opts: APIOptions) => Promise<ModelVersionList>;\n\nexport type GetListRegisteredModels = (opts: APIOptions) => Promise<RegisteredModelList>;\n\nexport type GetModelVersionsByRegisteredModel = (\n  opts: APIOptions,\n  registeredmodelId: string,\n) => Promise<ModelVersionList>;\n\nexport type GetModelArtifactsByModelVersion = (\n  opts: APIOptions,\n  modelVersionId: string,\n) => Promise<ModelArtifactList>;\n\nexport type PatchRegisteredModel = (\n  opts: APIOptions,\n  data: Partial<RegisteredModel>,\n  registeredModelId: string,\n) => Promise<RegisteredModel>;\n\nexport type PatchModelVersion = (\n  opts: APIOptions,\n  data: Partial<ModelVersion>,\n  modelversionId: string,\n) => Promise<ModelVersion>;\n\nexport type PatchModelArtifact = (\n  opts: APIOptions,\n  data: Partial<ModelArtifact>,\n  modelartifactId: string,\n) => Promise<ModelArtifact>;\n\nexport type ModelRegistryAPIs = {\n  createRegisteredModel: CreateRegisteredModel;\n  createModelVersionForRegisteredModel: CreateModelVersionForRegisteredModel;\n  createModelArtifactForModelVersion: CreateModelArtifactForModelVersion;\n  getRegisteredModel: GetRegisteredModel;\n  getModelVersion: GetModelVersion;\n  listModelVersions: GetListModelVersions;\n  listRegisteredModels: GetListRegisteredModels;\n  getModelVersionsByRegisteredModel: GetModelVersionsByRegisteredModel;\n  getModelArtifactsByModelVersion: GetModelArtifactsByModelVersion;\n  patchRegisteredModel: PatchRegisteredModel;\n  patchModelVersion: PatchModelVersion;\n  patchModelArtifact: PatchModelArtifact;\n};\n","export const modelRegistryUrl = (preferredModelRegistry = ''): string =>\n  `/model-registry/${preferredModelRegistry}`;\n\nexport const registeredModelsUrl = (preferredModelRegistry?: string): string =>\n  `${modelRegistryUrl(preferredModelRegistry)}/registeredModels`;\n\nexport const registeredModelUrl = (rmId = '', preferredModelRegistry?: string): string =>\n  `${registeredModelsUrl(preferredModelRegistry)}/${rmId}`;\n\nexport const registeredModelArchiveUrl = (preferredModelRegistry?: string): string =>\n  `${registeredModelsUrl(preferredModelRegistry)}/archive`;\n\nexport const registeredModelArchiveDetailsUrl = (\n  rmId = '',\n  preferredModelRegistry?: string,\n): string => `${registeredModelArchiveUrl(preferredModelRegistry)}/${rmId}`;\n\nexport const modelVersionListUrl = (rmId?: string, preferredModelRegistry?: string): string =>\n  `${registeredModelUrl(rmId, preferredModelRegistry)}/versions`;\n\nexport const archiveModelVersionListUrl = (\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${registeredModelArchiveDetailsUrl(rmId, preferredModelRegistry)}/versions`;\n\nexport const modelVersionUrl = (\n  mvId: string,\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${modelVersionListUrl(rmId, preferredModelRegistry)}/${mvId}`;\n\nexport const modelVersionArchiveUrl = (rmId?: string, preferredModelRegistry?: string): string =>\n  `${modelVersionListUrl(rmId, preferredModelRegistry)}/archive`;\n\nexport const archiveModelVersionDetailsUrl = (\n  mvId: string,\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${archiveModelVersionListUrl(rmId, preferredModelRegistry)}/${mvId}`;\n\nexport const modelVersionArchiveDetailsUrl = (\n  mvId: string,\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${modelVersionArchiveUrl(rmId, preferredModelRegistry)}/${mvId}`;\n\nexport const registerModelUrl = (preferredModelRegistry?: string): string =>\n  `${modelRegistryUrl(preferredModelRegistry)}/registerModel`;\n\nexport const registerVersionUrl = (preferredModelRegistry?: string): string =>\n  `${modelRegistryUrl(preferredModelRegistry)}/registerVersion`;\n\nexport const registerVersionForModelUrl = (\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${registeredModelUrl(rmId, preferredModelRegistry)}/registerVersion`;\n\nexport const modelVersionDeploymentsUrl = (\n  mvId: string,\n  rmId?: string,\n  preferredModelRegistry?: string,\n): string => `${modelVersionUrl(mvId, rmId, preferredModelRegistry)}/deployments`;\n","import { CatalogModelDetailsParams, CatalogSourceList } from '~/app/modelCatalogTypes';\n\nexport const extractVersionTag = (tags?: string[]): string | undefined =>\n  tags?.find((tag) => /^\\d+\\.\\d+\\.\\d+$/.test(tag));\nexport const filterNonVersionTags = (tags?: string[]): string[] | undefined => {\n  const versionTag = extractVersionTag(tags);\n  return tags?.filter((tag) => tag !== versionTag);\n};\n\nexport const getModelName = (modelName: string): string => {\n  const index = modelName.indexOf('/');\n  if (index === -1) {\n    return modelName;\n  }\n  return modelName.slice(index + 1);\n};\n\nexport const decodeParams = (\n  params: Readonly<CatalogModelDetailsParams>,\n): CatalogModelDetailsParams =>\n  Object.fromEntries(\n    Object.entries(params).map(([key, value]) => [key, decodeURIComponent(value)]),\n  );\n\nexport const encodeParams = (params: CatalogModelDetailsParams): CatalogModelDetailsParams =>\n  Object.fromEntries(\n    Object.entries(params).map(([key, value]) => [\n      key,\n      encodeURIComponent(value).replace(/\\./g, '%252E'),\n    ]),\n  );\n\nexport const filterEnabledCatalogSources = (\n  catalogSources: CatalogSourceList | null,\n): CatalogSourceList | null => {\n  if (!catalogSources) {\n    return null;\n  }\n\n  const filteredItems = catalogSources.items.filter((source) => source.enabled !== false);\n\n  return {\n    ...catalogSources,\n    items: filteredItems,\n    size: filteredItems.length,\n  };\n};\n","import React from 'react';\nimport { Alert, AlertActionCloseButton, StackItem } from '@patternfly/react-core';\nimport { RegistrationErrorType, SubmitLabel } from './const';\n\ntype RegisterModelErrorProp = {\n  submitLabel: string;\n  submitError: Error;\n  registrationErrorType?: string;\n  versionName?: string;\n  modelName?: string;\n};\n\nconst RegisterModelErrors: React.FC<RegisterModelErrorProp> = ({\n  submitLabel,\n  submitError,\n  registrationErrorType,\n  versionName = '',\n  modelName = '',\n}) => {\n  const [showAlert, setShowAlert] = React.useState<boolean>(true);\n\n  if (\n    submitLabel === SubmitLabel.REGISTER_MODEL &&\n    registrationErrorType === RegistrationErrorType.MODEL_VERSION\n  ) {\n    return (\n      <>\n        {showAlert && (\n          <StackItem>\n            <Alert\n              isInline\n              variant=\"success\"\n              title={`${modelName} model registered`}\n              actionClose={<AlertActionCloseButton onClose={() => setShowAlert(false)} />}\n            />\n          </StackItem>\n        )}\n        <StackItem>\n          <Alert isInline variant=\"danger\" title={`Failed to register ${versionName} version`}>\n            {submitError.message}\n          </Alert>\n        </StackItem>\n      </>\n    );\n  }\n\n  if (\n    submitLabel === SubmitLabel.REGISTER_VERSION &&\n    registrationErrorType === RegistrationErrorType.MODEL_VERSION\n  ) {\n    return (\n      <StackItem>\n        <Alert isInline variant=\"danger\" title={`Failed to register ${versionName} version`}>\n          {submitError.message}\n        </Alert>\n      </StackItem>\n    );\n  }\n\n  if (\n    submitLabel === SubmitLabel.REGISTER_MODEL &&\n    registrationErrorType === RegistrationErrorType.MODEL_ARTIFACT\n  ) {\n    return (\n      <>\n        {showAlert && (\n          <StackItem>\n            <Alert\n              isInline\n              variant=\"success\"\n              title={`${modelName} model and ${versionName} version registered`}\n              actionClose={<AlertActionCloseButton onClose={() => setShowAlert(false)} />}\n            />\n          </StackItem>\n        )}\n        <StackItem>\n          <Alert\n            isInline\n            variant=\"danger\"\n            title={`Failed to create artifact for ${versionName} version`}\n          >\n            {submitError.message}\n          </Alert>\n        </StackItem>\n      </>\n    );\n  }\n\n  if (\n    submitLabel === SubmitLabel.REGISTER_VERSION &&\n    registrationErrorType === RegistrationErrorType.MODEL_ARTIFACT\n  ) {\n    return (\n      <>\n        {showAlert && (\n          <StackItem>\n            <Alert\n              isInline\n              variant=\"success\"\n              title={`${versionName} version registered`}\n              actionClose={<AlertActionCloseButton onClose={() => setShowAlert(false)} />}\n            />\n          </StackItem>\n        )}\n        <StackItem>\n          <Alert\n            isInline\n            variant=\"danger\"\n            title={`Failed to create artifact for ${versionName} version`}\n          >\n            {submitError.message}\n          </Alert>\n        </StackItem>\n      </>\n    );\n  }\n\n  return (\n    <StackItem>\n      <Alert isInline variant=\"danger\" title={`Failed to register ${modelName} model`}>\n        {submitError.message}\n      </Alert>\n    </StackItem>\n  );\n};\nexport default RegisterModelErrors;\n","import React from 'react';\nimport {\n  PageSection,\n  Stack,\n  StackItem,\n  Button,\n  ActionList,\n  ActionListItem,\n  ActionListGroup,\n} from '@patternfly/react-core';\nimport RegisterModelErrors from './RegisterModelErrors';\n\ntype RegistrationFormFooterProps = {\n  submitLabel: string;\n  submitError?: Error;\n  isSubmitDisabled: boolean;\n  isSubmitting: boolean;\n  onSubmit: () => void;\n  onCancel: () => void;\n  registrationErrorType?: string;\n  versionName?: string;\n  modelName?: string;\n};\n\nconst RegistrationFormFooter: React.FC<RegistrationFormFooterProps> = ({\n  submitLabel,\n  submitError,\n  isSubmitDisabled,\n  isSubmitting,\n  onSubmit,\n  onCancel,\n  registrationErrorType,\n  versionName,\n  modelName,\n}) => (\n  <PageSection hasBodyWrapper={false} stickyOnBreakpoint={{ default: 'bottom' }}>\n    <Stack hasGutter>\n      {submitError && (\n        <RegisterModelErrors\n          submitLabel={submitLabel}\n          submitError={submitError}\n          registrationErrorType={registrationErrorType}\n          versionName={versionName}\n          modelName={modelName}\n        />\n      )}\n      <StackItem>\n        <ActionList>\n          <ActionListGroup>\n            <ActionListItem>\n              <Button\n                isDisabled={isSubmitDisabled}\n                variant=\"primary\"\n                id=\"create-button\"\n                data-testid=\"create-button\"\n                isLoading={isSubmitting}\n                onClick={onSubmit}\n              >\n                {submitLabel}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                isDisabled={isSubmitting}\n                variant=\"link\"\n                id=\"cancel-button\"\n                onClick={onCancel}\n              >\n                Cancel\n              </Button>\n            </ActionListItem>\n          </ActionListGroup>\n        </ActionList>\n      </StackItem>\n    </Stack>\n  </PageSection>\n);\n\nexport default RegistrationFormFooter;\n","import { ModelState, ModelVersion, RegisteredModel } from '~/app/types';\n\nexport type ObjectStorageFields = {\n  endpoint: string;\n  bucket: string;\n  region?: string;\n  path: string;\n};\n\nexport type RegisteredModelLocation = {\n  s3Fields: ObjectStorageFields | null;\n  uri: string | null;\n  ociUri: string | null;\n} | null;\n\nexport const objectStorageFieldsToUri = (fields: ObjectStorageFields): string | null => {\n  const { endpoint, bucket, region, path } = fields;\n  if (!endpoint || !bucket || !path) {\n    return null;\n  }\n  const searchParams = new URLSearchParams();\n  searchParams.set('endpoint', endpoint);\n  if (region) {\n    searchParams.set('defaultRegion', region);\n  }\n  return `s3://${bucket}/${path}?${searchParams.toString()}`;\n};\n\nexport const uriToStorageFields = (uri: string): RegisteredModelLocation => {\n  try {\n    const urlObj = new URL(uri);\n    if (urlObj.toString().startsWith('s3:')) {\n      // Some environments include the first token after the protocol (our bucket) in the pathname and some have it as the hostname\n      const [bucket, ...pathSplit] = [urlObj.hostname, ...urlObj.pathname.split('/')].filter(\n        Boolean,\n      );\n      const path = pathSplit.join('/');\n      const searchParams = new URLSearchParams(urlObj.search);\n      const endpoint = searchParams.get('endpoint');\n      const region = searchParams.get('defaultRegion');\n      if (endpoint && bucket && path) {\n        return {\n          s3Fields: { endpoint, bucket, region: region || undefined, path },\n          uri: null,\n          ociUri: null,\n        };\n      }\n      return null;\n    }\n    if (uri.startsWith('oci:')) {\n      return { s3Fields: null, uri: null, ociUri: uri };\n    }\n    return { s3Fields: null, uri, ociUri: null };\n  } catch {\n    return null;\n  }\n};\n\nexport const getLastCreatedItem = <T extends { createTimeSinceEpoch?: string }>(\n  items?: T[],\n): T | undefined =>\n  items?.toSorted(\n    ({ createTimeSinceEpoch: createTimeA }, { createTimeSinceEpoch: createTimeB }) => {\n      if (!createTimeA || !createTimeB) {\n        return 0;\n      }\n      return Number(createTimeB) - Number(createTimeA);\n    },\n  )[0];\n\nexport const filterArchiveVersions = (modelVersions: ModelVersion[]): ModelVersion[] =>\n  modelVersions.filter((mv) => mv.state === ModelState.ARCHIVED);\n\nexport const filterLiveVersions = (modelVersions: ModelVersion[]): ModelVersion[] =>\n  modelVersions.filter((mv) => mv.state === ModelState.LIVE);\n\nexport const filterArchiveModels = (registeredModels: RegisteredModel[]): RegisteredModel[] =>\n  registeredModels.filter((rm) => rm.state === ModelState.ARCHIVED);\n\nexport const filterLiveModels = (registeredModels: RegisteredModel[]): RegisteredModel[] =>\n  registeredModels.filter((rm) => rm.state === ModelState.LIVE);\n","import * as React from 'react';\nimport {\n  useDeepCompareMemoize,\n  FetchState,\n  FetchStateCallbackPromise,\n  useFetchState,\n} from 'mod-arch-core';\nimport { ModelRegistry } from '~/app/types';\nimport { getListModelRegistries } from '~/app/api/k8s';\n\nconst useModelRegistries = (queryParams: Record<string, unknown>): FetchState<ModelRegistry[]> => {\n  const paramsMemo = useDeepCompareMemoize(queryParams);\n\n  const listModelRegistries = React.useMemo(\n    () => getListModelRegistries('', paramsMemo),\n    [paramsMemo],\n  );\n  const callback = React.useCallback<FetchStateCallbackPromise<ModelRegistry[]>>(\n    (opts) => listModelRegistries(opts),\n    [listModelRegistries],\n  );\n  return useFetchState(callback, [], { initialPromisePurity: true });\n};\n\nexport default useModelRegistries;\n","import * as React from 'react';\nimport { useQueryParamNamespaces } from 'mod-arch-core';\nimport { ModelRegistry } from '~/app/types';\nimport useModelRegistries from '~/app/hooks/useModelRegistries';\n\nexport type ModelRegistrySelectorContextType = {\n  modelRegistriesLoaded: boolean;\n  modelRegistriesLoadError?: Error;\n  modelRegistries: ModelRegistry[];\n  preferredModelRegistry: ModelRegistry | undefined;\n  updatePreferredModelRegistry: (modelRegistry: ModelRegistry | undefined) => void;\n  //refreshRulesReview: () => void; TODO: [Midstream] Reimplement this\n};\n\ntype ModelRegistrySelectorContextProviderProps = {\n  children: React.ReactNode;\n};\n\nexport const ModelRegistrySelectorContext = React.createContext<ModelRegistrySelectorContextType>({\n  modelRegistriesLoaded: false,\n  modelRegistriesLoadError: undefined,\n  modelRegistries: [],\n  preferredModelRegistry: undefined,\n  updatePreferredModelRegistry: () => undefined,\n  //refreshRulesReview: () => undefined,\n});\n\nexport const ModelRegistrySelectorContextProvider: React.FC<\n  ModelRegistrySelectorContextProviderProps\n> = ({ children, ...props }) => (\n  <EnabledModelRegistrySelectorContextProvider {...props}>\n    {children}\n  </EnabledModelRegistrySelectorContextProvider>\n);\n\nconst EnabledModelRegistrySelectorContextProvider: React.FC<\n  ModelRegistrySelectorContextProviderProps\n> = ({ children }) => {\n  // TODO: [Midstream] Add area check for enablement\n\n  const queryParams = useQueryParamNamespaces();\n\n  const [modelRegistries, isLoaded, error] = useModelRegistries(queryParams);\n  const [preferredModelRegistry, setPreferredModelRegistry] =\n    React.useState<ModelRegistrySelectorContextType['preferredModelRegistry']>(undefined);\n\n  const firstModelRegistry = modelRegistries.length > 0 ? modelRegistries[0] : null;\n\n  const contextValue = React.useMemo(\n    () => ({\n      modelRegistriesLoaded: isLoaded,\n      modelRegistriesLoadError: error,\n      modelRegistries,\n      preferredModelRegistry: preferredModelRegistry ?? firstModelRegistry ?? undefined,\n      updatePreferredModelRegistry: setPreferredModelRegistry,\n      // refreshRulesReview,\n    }),\n    [isLoaded, error, modelRegistries, preferredModelRegistry, firstModelRegistry],\n  );\n\n  return (\n    <ModelRegistrySelectorContext.Provider value={contextValue}>\n      {children}\n    </ModelRegistrySelectorContext.Provider>\n  );\n};\n","import { CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { encodeParams } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\n\nexport const getCatalogModelDetailsRoute = (params: CatalogModelDetailsParams): string => {\n  const { sourceId = '', modelName = '' } = encodeParams({\n    sourceId: params.sourceId,\n    modelName: params.modelName,\n  });\n  return `/model-catalog/${sourceId}/${modelName}` || '#';\n};\n","import { GenericObjectState } from 'mod-arch-core';\nimport useGenericObjectState from 'mod-arch-core/dist/utilities/useGenericObjectState';\nimport { ModelRegistryCustomProperties, ModelArtifact } from '~/app/types';\n\nexport enum ModelLocationType {\n  ObjectStorage = 'Object storage',\n  URI = 'URI',\n}\n\nexport type RegistrationCommonFormData = {\n  versionName: string;\n  versionDescription: string;\n  sourceModelFormat: string;\n  sourceModelFormatVersion: string;\n  modelLocationType: ModelLocationType;\n  modelLocationEndpoint: string;\n  modelLocationBucket: string;\n  modelLocationRegion: string;\n  modelLocationPath: string;\n  modelLocationURI: string;\n  versionCustomProperties?: ModelRegistryCustomProperties;\n  modelCustomProperties?: ModelRegistryCustomProperties;\n  additionalArtifactProperties?: Partial<ModelArtifact>;\n};\n\nexport type RegisterModelFormData = RegistrationCommonFormData & {\n  modelName: string;\n  modelDescription: string;\n};\n\nexport type RegisterVersionFormData = RegistrationCommonFormData & {\n  registeredModelId: string;\n};\n\nexport type RegisterCatalogModelFormData = RegisterModelFormData & {\n  modelRegistry: string;\n};\n\nconst registrationCommonFormDataDefaults: RegistrationCommonFormData = {\n  versionName: '',\n  versionDescription: '',\n  sourceModelFormat: '',\n  sourceModelFormatVersion: '',\n  modelLocationType: ModelLocationType.ObjectStorage,\n  modelLocationEndpoint: '',\n  modelLocationBucket: '',\n  modelLocationRegion: '',\n  modelLocationPath: '',\n  modelLocationURI: '',\n  modelCustomProperties: {},\n  versionCustomProperties: {},\n};\n\nconst registerModelFormDataDefaults: RegisterModelFormData = {\n  ...registrationCommonFormDataDefaults,\n  modelName: '',\n  modelDescription: '',\n};\n\nconst registerVersionFormDataDefaults: RegisterVersionFormData = {\n  ...registrationCommonFormDataDefaults,\n  registeredModelId: '',\n};\n\nconst registerModelFormDataDefaultsForModelCatalog: RegisterCatalogModelFormData = {\n  ...registerModelFormDataDefaults,\n  modelRegistry: '',\n};\n\nexport const useRegisterModelData = (): GenericObjectState<RegisterModelFormData> =>\n  useGenericObjectState<RegisterModelFormData>(registerModelFormDataDefaults);\n\nexport const useRegisterVersionData = (\n  registeredModelId?: string,\n): GenericObjectState<RegisterVersionFormData> =>\n  useGenericObjectState<RegisterVersionFormData>({\n    ...registerVersionFormDataDefaults,\n    registeredModelId: registeredModelId || '',\n  });\n\nexport const useRegisterCatalogModelData = (\n  initialData?: Partial<RegisterCatalogModelFormData>,\n): GenericObjectState<RegisterCatalogModelFormData> =>\n  useGenericObjectState<RegisterCatalogModelFormData>({\n    ...registerModelFormDataDefaultsForModelCatalog,\n    ...initialData,\n  });\n","import * as React from 'react';\nimport {\n  Bullseye,\n  Button,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Icon,\n  Popover,\n  PopoverPosition,\n  Tooltip,\n} from '@patternfly/react-core';\nimport text from '@patternfly/react-styles/css/utilities/Text/text';\nimport truncateStyles from '@patternfly/react-styles/css/components/Truncate/truncate';\nimport { InfoCircleIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport {\n  WhosMyAdministrator,\n  KubeflowDocs,\n  SimpleSelect,\n  InlineTruncatedClipboardCopy,\n} from 'mod-arch-shared';\nimport { useBrowserStorage } from 'mod-arch-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport { SimpleSelectOption } from 'mod-arch-shared/dist/components/SimpleSelect';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { ModelRegistry } from '~/app/types';\nimport { getServerAddress } from './utils';\n\nconst MODEL_REGISTRY_FAVORITE_STORAGE_KEY = 'kubeflow.dashboard.model.registry.favorite';\n\ntype ModelRegistrySelectorProps = {\n  modelRegistry: string;\n  onSelection: (modelRegistry: string) => void;\n  primary?: boolean;\n  isFullWidth?: boolean;\n  hasError?: boolean;\n};\n\nconst ModelRegistrySelector: React.FC<ModelRegistrySelectorProps> = ({\n  modelRegistry,\n  onSelection,\n  primary,\n  isFullWidth,\n  hasError,\n}) => {\n  const { modelRegistries, updatePreferredModelRegistry } = React.useContext(\n    ModelRegistrySelectorContext,\n  );\n  const { isMUITheme } = useThemeContext();\n\n  const selection = modelRegistries.find((mr) => mr.name === modelRegistry);\n  const [favorites, setFavorites] = useBrowserStorage<string[]>(\n    MODEL_REGISTRY_FAVORITE_STORAGE_KEY,\n    [],\n  );\n\n  const selectionDisplayName = selection ? selection.displayName : modelRegistry;\n\n  const toggleLabel = modelRegistries.length === 0 ? 'No model registries' : selectionDisplayName;\n\n  const getMRSelectDescription = (mr: ModelRegistry) => {\n    const desc = mr.description || '';\n    if (!desc) {\n      return;\n    }\n    const tooltipContent = (\n      <DescriptionList>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{`${mr.displayName} description`}</DescriptionListTerm>\n          <DescriptionListDescription>{desc}</DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    );\n    return (\n      <Tooltip content={tooltipContent} isContentLeftAligned>\n        <span className={truncateStyles.truncate}>\n          <span className={truncateStyles.truncateStart}>{desc}</span>\n        </span>\n      </Tooltip>\n    );\n  };\n\n  const allOptions: SimpleSelectOption[] = modelRegistries.map((mr) => ({\n    key: mr.name,\n    label: mr.name,\n    dropdownLabel: mr.displayName,\n    description: getMRSelectDescription(mr),\n    isFavorited: favorites.includes(mr.name),\n  }));\n\n  const favoriteOptions = (favIds: string[]) =>\n    allOptions.filter((option) => favIds.includes(option.key));\n\n  const selector = (\n    <SimpleSelect\n      isScrollable\n      placeholder=\"Select a model registry\"\n      dataTestId=\"model-registry-selector-dropdown\"\n      toggleProps={{ id: 'download-steps-logs-toggle', status: hasError ? 'danger' : undefined }}\n      toggleLabel={toggleLabel}\n      aria-label=\"Model registry toggle\"\n      previewDescription={false}\n      onChange={(key) => {\n        updatePreferredModelRegistry(modelRegistries.find((obj) => obj.name === key));\n        onSelection(key);\n      }}\n      isFullWidth={isFullWidth}\n      maxMenuHeight=\"300px\"\n      popperProps={{ maxWidth: '400px' }}\n      value={selection?.name}\n      groupedOptions={[\n        ...(favorites.length > 0\n          ? [\n              {\n                key: 'favorites-group',\n                label: 'Favorites',\n                options: favoriteOptions(favorites),\n              },\n            ]\n          : []),\n        {\n          key: 'all',\n          label: 'All model registries',\n          options: allOptions,\n        },\n      ]}\n      onActionClick={(event: React.MouseEvent, value: string, actionId: string) => {\n        event.stopPropagation();\n        if (actionId === 'fav') {\n          const isFavorited = favorites.includes(value);\n          if (isFavorited) {\n            setFavorites(favorites.filter((id) => id !== value));\n          } else {\n            setFavorites([...favorites, value]);\n          }\n        }\n      }}\n    />\n  );\n\n  if (primary) {\n    return selector;\n  }\n\n  return (\n    <Flex spaceItems={{ default: 'spaceItemsSm' }} alignItems={{ default: 'alignItemsCenter' }}>\n      <FlexItem>\n        <Icon>\n          <BlueprintIcon />\n        </Icon>\n      </FlexItem>\n      <FlexItem>\n        <Bullseye>Model registry</Bullseye>\n      </FlexItem>\n      <FlexItem>{selector}</FlexItem>\n      {selection && (\n        <FlexItem>\n          <Popover\n            aria-label=\"Model registry description popover\"\n            data-testid=\"mr-details-popover\"\n            position=\"right\"\n            headerContent={`${selection.displayName} details`}\n            bodyContent={\n              <DescriptionList>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Description</DescriptionListTerm>\n                  <DescriptionListDescription\n                    className={!selection.description ? text.textColorDisabled : ''}\n                  >\n                    {selection.description || 'No description'}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Server URL</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    <InlineTruncatedClipboardCopy\n                      textToCopy={`https://${getServerAddress(selection)}`}\n                    />\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n              </DescriptionList>\n            }\n          >\n            <Button variant=\"link\" icon={<InfoCircleIcon />} data-testid=\"view-details-button\">\n              View details\n            </Button>\n          </Popover>\n        </FlexItem>\n      )}\n      <FlexItem align={{ default: 'alignRight' }}>\n        {isMUITheme ? (\n          <KubeflowDocs\n            buttonLabel=\"Need another registry?\"\n            linkTestId=\"model-registry-help-button\"\n          />\n        ) : (\n          <WhosMyAdministrator\n            buttonLabel=\"Need another registry?\"\n            headerContent=\"Need another registry?\"\n            leadText=\"To request access to a new or existing model registry, contact your administrator.\"\n            contentTestId=\"model-registry-help-content\"\n            linkTestId=\"model-registry-help-button\"\n            popoverPosition={PopoverPosition.left}\n          />\n        )}\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport default ModelRegistrySelector;\n","import {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { UpdateObjectAtPropAndValue, FormSection } from 'mod-arch-shared';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\nimport { MR_CHARACTER_LIMIT } from './const';\nimport { RegisterModelFormData } from './useRegisterModelData';\n\ntype RegisterModelDetailsFormSectionProp<D extends RegisterModelFormData> = {\n  formData: D;\n  setData: UpdateObjectAtPropAndValue<D>;\n  hasModelNameError: boolean;\n  isModelNameDuplicate?: boolean;\n};\nconst RegisterModelDetailsFormSection = <D extends RegisterModelFormData>({\n  formData,\n  setData,\n  hasModelNameError,\n  isModelNameDuplicate,\n}: RegisterModelDetailsFormSectionProp<D>): React.ReactNode => {\n  const modelNameInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"model-name\"\n      name=\"model-name\"\n      value={formData.modelName}\n      onChange={(_e, value) => setData('modelName', value)}\n      validated={hasModelNameError ? 'error' : 'default'}\n    />\n  );\n\n  const modelDescriptionInput = (\n    <TextArea\n      type=\"text\"\n      id=\"model-description\"\n      name=\"model-description\"\n      value={formData.modelDescription}\n      onChange={(_e, value) => setData('modelDescription', value)}\n    />\n  );\n\n  return (\n    <FormSection\n      title=\"Model details\"\n      description=\"Provide model details that apply to every version of this model.\"\n    >\n      <FormGroup label=\"Model name\" isRequired fieldId=\"model-name\">\n        <FormFieldset component={modelNameInput} field=\"model-name\" />\n        {hasModelNameError && (\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem variant=\"error\" data-testid=\"model-name-error\">\n                {isModelNameDuplicate\n                  ? 'Model name already exists'\n                  : `Cannot exceed ${MR_CHARACTER_LIMIT} characters`}\n              </HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        )}\n      </FormGroup>\n      <FormGroup label=\"Model description\" fieldId=\"model-description\">\n        <FormFieldset component={modelDescriptionInput} field=\"Model Description\" />\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>Enter a brief summary of the model&apos;s key details.</HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default RegisterModelDetailsFormSection;\n","import {\n  ModelRegistryAPIs,\n  ModelState,\n  ModelRegistryMetadataType,\n  ModelVersion,\n  RegisteredModel,\n} from '~/app/types';\n\ntype MinimalModelRegistryAPI = Pick<ModelRegistryAPIs, 'patchRegisteredModel'>;\n\nexport const bumpModelVersionTimestamp = async (\n  api: ModelRegistryAPIs,\n  modelVersion: ModelVersion,\n): Promise<void> => {\n  if (!modelVersion.id) {\n    throw new Error('Model version ID is required');\n  }\n\n  try {\n    const currentTime = new Date().toISOString();\n    await api.patchModelVersion(\n      {},\n      {\n        // This is a workaround to update the timestamp on the backend. There is a bug opened for model registry team\n        // to fix this issue.\n        state: ModelState.LIVE,\n        customProperties: {\n          ...modelVersion.customProperties,\n          _lastModified: {\n            metadataType: ModelRegistryMetadataType.STRING,\n            // eslint-disable-next-line camelcase\n            string_value: currentTime,\n          },\n        },\n      },\n      modelVersion.id,\n    );\n  } catch (error) {\n    throw new Error(\n      `Failed to update model version timestamp: ${\n        error instanceof Error ? error.message : String(error)\n      }`,\n    );\n  }\n};\n\nexport const bumpRegisteredModelTimestamp = async (\n  api: MinimalModelRegistryAPI,\n  registeredModel: RegisteredModel,\n): Promise<void> => {\n  if (!registeredModel.id) {\n    throw new Error('Registered model ID is required');\n  }\n\n  try {\n    const currentTime = new Date().toISOString();\n    await api.patchRegisteredModel(\n      {},\n      {\n        state: ModelState.LIVE,\n        customProperties: {\n          ...registeredModel.customProperties,\n          // This is a workaround to update the timestamp on the backend. There is a bug opened for model registry team\n          // to fix this issue.\n          _lastModified: {\n            metadataType: ModelRegistryMetadataType.STRING,\n            // eslint-disable-next-line camelcase\n            string_value: currentTime,\n          },\n        },\n      },\n      registeredModel.id,\n    );\n  } catch (error) {\n    throw new Error(\n      `Failed to update registered model timestamp: ${\n        error instanceof Error ? error.message : String(error)\n      }`,\n    );\n  }\n};\n\nexport const bumpBothTimestamps = async (\n  api: ModelRegistryAPIs,\n  registeredModel: RegisteredModel,\n  modelVersion: ModelVersion,\n): Promise<void> => {\n  await Promise.all([\n    bumpModelVersionTimestamp(api, modelVersion),\n    bumpRegisteredModelTimestamp(api, registeredModel),\n  ]);\n};\n","import {\n  APIOptions,\n  assembleModArchBody,\n  isModArchResponse,\n  restCREATE,\n  restGET,\n  restPATCH,\n  handleRestFailures,\n} from 'mod-arch-core';\nimport {\n  CreateModelArtifactData,\n  CreateModelVersionData,\n  CreateRegisteredModelData,\n  ModelArtifact,\n  ModelArtifactList,\n  ModelVersionList,\n  ModelVersion,\n  RegisteredModelList,\n  RegisteredModel,\n} from '~/app/types';\nimport { bumpRegisteredModelTimestamp } from '~/app/api/updateTimestamps';\n\nexport const createRegisteredModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, data: CreateRegisteredModelData): Promise<RegisteredModel> =>\n    handleRestFailures(\n      restCREATE(hostPath, `/registered_models`, assembleModArchBody(data), queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<RegisteredModel>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const createModelVersionForRegisteredModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    registeredModelId: string,\n    data: CreateModelVersionData,\n    registeredModel: RegisteredModel,\n    isFirstVersion?: boolean,\n  ): Promise<ModelVersion> =>\n    handleRestFailures(\n      restCREATE(\n        hostPath,\n        `/registered_models/${registeredModelId}/versions`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelVersion>(response)) {\n        const newVersion = response.data;\n\n        if (!isFirstVersion) {\n          return bumpRegisteredModelTimestamp(\n            { patchRegisteredModel: patchRegisteredModel(hostPath, queryParams) },\n            registeredModel,\n          ).then(() => newVersion);\n        }\n        return newVersion;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const createModelArtifactForModelVersion =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    modelVersionId: string,\n    data: CreateModelArtifactData,\n  ): Promise<ModelArtifact> =>\n    handleRestFailures(\n      restCREATE(\n        hostPath,\n        `/model_versions/${modelVersionId}/artifacts`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelArtifact>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getRegisteredModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, registeredModelId: string): Promise<RegisteredModel> =>\n    handleRestFailures(\n      restGET(hostPath, `/registered_models/${registeredModelId}`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<RegisteredModel>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getModelVersion =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, modelVersionId: string): Promise<ModelVersion> =>\n    handleRestFailures(\n      restGET(hostPath, `/model_versions/${modelVersionId}`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<ModelVersion>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getListModelArtifacts =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<ModelArtifactList> =>\n    handleRestFailures(restGET(hostPath, `/model_artifacts`, queryParams, opts)).then(\n      (response) => {\n        if (isModArchResponse<ModelArtifactList>(response)) {\n          return response.data;\n        }\n        throw new Error('Invalid response format');\n      },\n    );\n\nexport const getListModelVersions =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<ModelVersionList> =>\n    handleRestFailures(restGET(hostPath, `/model_versions`, queryParams, opts)).then((response) => {\n      if (isModArchResponse<ModelVersionList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getListRegisteredModels =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<RegisteredModelList> =>\n    handleRestFailures(restGET(hostPath, `/registered_models`, queryParams, opts)).then(\n      (response) => {\n        if (isModArchResponse<RegisteredModelList>(response)) {\n          return response.data;\n        }\n        throw new Error('Invalid response format');\n      },\n    );\n\nexport const getModelVersionsByRegisteredModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, registeredmodelId: string): Promise<ModelVersionList> =>\n    handleRestFailures(\n      restGET(hostPath, `/registered_models/${registeredmodelId}/versions`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<ModelVersionList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getModelArtifactsByModelVersion =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, modelVersionId: string): Promise<ModelArtifactList> =>\n    handleRestFailures(\n      restGET(hostPath, `/model_versions/${modelVersionId}/artifacts`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<ModelArtifactList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const patchRegisteredModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    data: Partial<RegisteredModel>,\n    registeredModelId: string,\n  ): Promise<RegisteredModel> =>\n    handleRestFailures(\n      restPATCH(\n        hostPath,\n        `/registered_models/${registeredModelId}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<RegisteredModel>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const patchModelVersion =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, data: Partial<ModelVersion>, modelVersionId: string): Promise<ModelVersion> =>\n    handleRestFailures(\n      restPATCH(\n        hostPath,\n        `/model_versions/${modelVersionId}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelVersion>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const patchModelArtifact =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    data: Partial<ModelArtifact>,\n    modelartifactId: string,\n  ): Promise<ModelArtifact> =>\n    handleRestFailures(\n      restPATCH(\n        hostPath,\n        `/model_artifacts/${modelartifactId}`,\n        assembleModArchBody(data),\n        queryParams,\n        opts,\n      ),\n    ).then((response) => {\n      if (isModArchResponse<ModelArtifact>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n","import React from 'react';\nimport { APIState, useAPIState } from 'mod-arch-core';\nimport { ModelRegistryAPIs } from '~/app/types';\nimport {\n  createModelArtifactForModelVersion,\n  createModelVersionForRegisteredModel,\n  createRegisteredModel,\n  getListModelArtifacts,\n  getListModelVersions,\n  getListRegisteredModels,\n  getModelArtifactsByModelVersion,\n  getModelVersion,\n  getModelVersionsByRegisteredModel,\n  getRegisteredModel,\n  patchModelArtifact,\n  patchModelVersion,\n  patchRegisteredModel,\n} from '~/app/api/service';\n\nexport type ModelRegistryAPIState = APIState<ModelRegistryAPIs>;\n\nconst useModelRegistryAPIState = (\n  hostPath: string | null,\n  queryParameters?: Record<string, unknown>,\n): [apiState: ModelRegistryAPIState, refreshAPIState: () => void] => {\n  const createAPI = React.useCallback(\n    (path: string) => ({\n      createRegisteredModel: createRegisteredModel(path, queryParameters),\n      createModelVersionForRegisteredModel: createModelVersionForRegisteredModel(\n        path,\n        queryParameters,\n      ),\n      createModelArtifactForModelVersion: createModelArtifactForModelVersion(path, queryParameters),\n      getRegisteredModel: getRegisteredModel(path, queryParameters),\n      getModelVersion: getModelVersion(path, queryParameters),\n      listModelArtifacts: getListModelArtifacts(path, queryParameters),\n      listModelVersions: getListModelVersions(path, queryParameters),\n      listRegisteredModels: getListRegisteredModels(path, queryParameters),\n      getModelVersionsByRegisteredModel: getModelVersionsByRegisteredModel(path, queryParameters),\n      getModelArtifactsByModelVersion: getModelArtifactsByModelVersion(path, queryParameters),\n      patchRegisteredModel: patchRegisteredModel(path, queryParameters),\n      patchModelVersion: patchModelVersion(path, queryParameters),\n      patchModelArtifact: patchModelArtifact(path, queryParameters),\n    }),\n    [queryParameters],\n  );\n\n  return useAPIState(hostPath, createAPI);\n};\n\nexport default useModelRegistryAPIState;\n","import * as React from 'react';\nimport { useQueryParamNamespaces } from 'mod-arch-core';\nimport useModelRegistryAPIState, {\n  ModelRegistryAPIState,\n} from '~/app/hooks/useModelRegistryAPIState';\nimport { BFF_API_VERSION, URL_PREFIX } from '~/app/utilities/const';\n\nexport type ModelRegistryContextType = {\n  apiState: ModelRegistryAPIState;\n  refreshAPIState: () => void;\n};\n\ntype ModelRegistryContextProviderProps = {\n  children: React.ReactNode;\n  modelRegistryName: string;\n};\n\nexport const ModelRegistryContext = React.createContext<ModelRegistryContextType>({\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  apiState: { apiAvailable: false, api: null as unknown as ModelRegistryAPIState['api'] },\n  refreshAPIState: () => undefined,\n});\n\nexport const ModelRegistryContextProvider: React.FC<ModelRegistryContextProviderProps> = ({\n  children,\n  modelRegistryName,\n}) => {\n  const hostPath = modelRegistryName\n    ? `${URL_PREFIX}/api/${BFF_API_VERSION}/model_registry/${modelRegistryName}`\n    : null;\n\n  const queryParams = useQueryParamNamespaces();\n\n  const [apiState, refreshAPIState] = useModelRegistryAPIState(hostPath, queryParams);\n\n  return (\n    <ModelRegistryContext.Provider\n      value={React.useMemo(\n        () => ({\n          apiState,\n          refreshAPIState,\n        }),\n        [apiState, refreshAPIState],\n      )}\n    >\n      {children}\n    </ModelRegistryContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { useFetchState, FetchState, FetchStateCallbackPromise } from 'mod-arch-core';\nimport { RegisteredModelList } from '~/app/types';\nimport { useModelRegistryAPI } from '~/app/hooks/useModelRegistryAPI';\n\nconst useRegisteredModels = (): FetchState<RegisteredModelList> => {\n  const { api, apiAvailable } = useModelRegistryAPI();\n  const callback = React.useCallback<FetchStateCallbackPromise<RegisteredModelList>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      return api.listRegisteredModels(opts);\n    },\n    [api, apiAvailable],\n  );\n  return useFetchState(\n    callback,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    { initialPromisePurity: true },\n  );\n};\n\nexport default useRegisteredModels;\n"],"names":["getListModelRegistries","hostPath","queryParams","opts","then","response","data","Error","getNamespaces","getGroups","getRoleBindings","items","getModelRegistrySettings","modelRegistryId","listModelRegistrySettings","createModelRegistrySettings","deleteModelRegistrySettings","createRoleBinding","patchRoleBinding","roleBindingName","deleteRoleBinding","generateRoleBindingPermissions","namespace","rbSubjectKind","rbSubjectName","rbRoleRefName","rbRoleRefKind","rbLabels","ownerReference","resource","owner","blockOwnerDeletion","ownerReferences","metadata","uid","name","find","r","push","apiVersion","kind","addOwnerReference","labels","roleRef","apiGroup","subjects","useModelRegistryAPI","apiState","refreshAPIState","refreshAllAPI","ModelSourceKind","modelSourcePropertiesToCatalogParams","properties","modelSourceKind","CATALOG","modelSourceClass","modelSourceName","sourceId","modelName","catalogParamsToModelSourceProperties","params","EMPTY_CUSTOM_PROPERTY_STRING","string_value","metadataType","STRING","getLabelsFromModelTasks","model","tasks","reduce","acc","cur","getLabelsFromCustomProperties","customProperties","filteredProperties","Object","keys","forEach","key","prop","isStringProperty","DEPLOY_BUTTON_TOOLTIP","ModelServingCompatibleTypes","modelServingCompatibleTypesMetadata","S3ObjectStorage","envVars","managedType","URI","OCI","getModelServingConnectionTypeName","type","uriToConnectionTypeName","uri","storageFields","urlObj","URL","toString","startsWith","bucket","pathSplit","hostname","pathname","split","filter","Boolean","path","join","searchParams","URLSearchParams","search","endpoint","get","region","s3Fields","undefined","ociUri","uriToModelLocation","getDeployButtonState","availablePlatformIds","requireKserve","length","enabled","tooltip","includes","component","field","className","isMUITheme","timeSinceEpoch","time","Date","parseInt","getTime","Number","isNaN","Timestamp","date","variant","TimestampTooltipVariant","default","now","AppContext","value","onChange","onClear","fieldLabel","placeholder","isDisabled","style","ariaLabel","dataTestId","onClick","rest","TextInput","_event","newValue","SearchInput","event","stopPropagation","formData","setData","isFirstVersion","latestVersion","isCatalogModel","isVersionNameValid","versionName","versionDescription","sourceModelFormat","sourceModelFormatVersion","modelLocationType","modelLocationEndpoint","modelLocationBucket","modelLocationRegion","modelLocationPath","modelLocationURI","versionNameInput","isRequired","id","_e","validated","versionDescriptionInput","TextArea","sourceModelFormatInput","sourceModelFormatVersionInput","endpointInput","bucketInput","regionInput","pathInput","TextInputGroup","TextInputGroupMain","icon","uriInput","autofillConnectionButtons","useExtensions","map","extension","SplitItem","LazyCodeRefComponent","props","title","description","FormGroup","label","fieldId","FormHelperText","HelperText","HelperTextItem","Split","isFilled","Radio","isChecked","ObjectStorage","mlLg","getLabels","mergeUpdatedLabels","updatedLabels","existingLabels","addedLabels","removedLabels","customPropertiesCopy","getProperties","test","mergeUpdatedProperty","args","op","oldKey","newPair","isMatchVersionKeyword","mv","keywordFilter","toLowerCase","some","filterModelVersions","unfilteredModelVersions","filterData","Keyword","authorFilter","Author","author","sortModelVersionsByCreateTime","registeredModels","toSorted","a","b","first","createTimeSinceEpoch","second","filterRegisteredModels","unfilteredRegisteredModels","ownerFilter","Owner","rm","modelVersions","registeredModelId","doesNotMatchModel","doesNotMatchVersions","getServerAddress","serverAddress","isValidHttpUrl","url","isHttp","protocol","getLatestVersionForRegisteredModel","rmId","filteredVersions","registerModel","async","registeredModel","error","api","createRegisteredModel","modelDescription","modelCustomProperties","state","LIVE","e","REGISTERED_MODEL","errors","modelVersion","modelArtifact","registerVersion","createModelVersionForRegisteredModel","versionCustomProperties","MODEL_VERSION","createModelArtifactForModelVersion","modelFormatName","modelFormatVersion","additionalArtifactProperties","artifactType","MODEL_ARTIFACT","isSubmitDisabledForCommonFields","isNameValid","isRegisterModelSubmitDisabled","isModelNameExisting","isRegisterVersionSubmitDisabled","isRegisterCatalogModelSubmitDisabled","modelRegistry","MR_CHARACTER_LIMIT","SubmitLabel","RegistrationErrorType","isAutofillConnectionButtonExtension","ModelState","ModelArtifactState","ModelRegistryMetadataType","modelRegistryUrl","preferredModelRegistry","registeredModelsUrl","registeredModelUrl","registeredModelArchiveUrl","registeredModelArchiveDetailsUrl","modelVersionListUrl","archiveModelVersionListUrl","modelVersionUrl","mvId","modelVersionArchiveUrl","archiveModelVersionDetailsUrl","modelVersionArchiveDetailsUrl","registerModelUrl","registerVersionUrl","registerVersionForModelUrl","modelVersionDeploymentsUrl","getModelName","index","indexOf","slice","decodeParams","fromEntries","entries","decodeURIComponent","encodeParams","encodeURIComponent","replace","filterEnabledCatalogSources","catalogSources","filteredItems","source","size","submitLabel","submitError","registrationErrorType","showAlert","setShowAlert","REGISTER_MODEL","StackItem","Alert","isInline","actionClose","AlertActionCloseButton","onClose","message","REGISTER_VERSION","isSubmitDisabled","isSubmitting","onSubmit","onCancel","PageSection","hasBodyWrapper","stickyOnBreakpoint","Stack","hasGutter","ActionList","ActionListGroup","ActionListItem","Button","isLoading","objectStorageFieldsToUri","fields","set","uriToStorageFields","getLastCreatedItem","createTimeA","createTimeB","filterArchiveVersions","ARCHIVED","filterLiveVersions","filterArchiveModels","filterLiveModels","paramsMemo","useDeepCompareMemoize","listModelRegistries","callback","useFetchState","initialPromisePurity","ModelRegistrySelectorContext","modelRegistriesLoaded","modelRegistriesLoadError","modelRegistries","updatePreferredModelRegistry","ModelRegistrySelectorContextProvider","children","EnabledModelRegistrySelectorContextProvider","useQueryParamNamespaces","isLoaded","setPreferredModelRegistry","firstModelRegistry","contextValue","Provider","getCatalogModelDetailsRoute","ModelLocationType","registrationCommonFormDataDefaults","registerModelFormDataDefaults","registerVersionFormDataDefaults","registerModelFormDataDefaultsForModelCatalog","useRegisterModelData","useRegisterVersionData","useRegisterCatalogModelData","initialData","onSelection","primary","isFullWidth","hasError","selection","mr","favorites","setFavorites","selectionDisplayName","displayName","toggleLabel","getMRSelectDescription","desc","tooltipContent","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","Tooltip","content","isContentLeftAligned","truncate","truncateStart","allOptions","dropdownLabel","isFavorited","selector","isScrollable","toggleProps","status","previewDescription","obj","maxMenuHeight","popperProps","maxWidth","groupedOptions","options","favIds","option","onActionClick","actionId","Flex","spaceItems","alignItems","FlexItem","Icon","Bullseye","Popover","position","headerContent","bodyContent","textColorDisabled","textToCopy","align","buttonLabel","linkTestId","leadText","contentTestId","popoverPosition","PopoverPosition","left","hasModelNameError","isModelNameDuplicate","modelNameInput","modelDescriptionInput","bumpModelVersionTimestamp","currentTime","toISOString","patchModelVersion","_lastModified","String","bumpRegisteredModelTimestamp","patchRegisteredModel","bumpBothTimestamps","Promise","all","newVersion","modelVersionId","getRegisteredModel","getModelVersion","getListModelArtifacts","getListModelVersions","getListRegisteredModels","getModelVersionsByRegisteredModel","registeredmodelId","getModelArtifactsByModelVersion","patchModelArtifact","modelartifactId","queryParameters","createAPI","listModelArtifacts","listModelVersions","listRegisteredModels","useAPIState","ModelRegistryContext","apiAvailable","ModelRegistryContextProvider","modelRegistryName","reject","pageSize","nextPageToken"],"sourceRoot":""}