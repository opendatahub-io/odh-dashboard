{"version":3,"file":"143.bundle.js","mappings":"wRAcA,MAAMA,EAAuC,CAC3CC,eAAgB,IAAeC,UAC/BC,WAAU,KACVC,gBAAe,KACfC,mBAAoB,wBA0BtB,EAvBsC,IAElC,kBAAC,IAAWC,SAAQ,CAClBC,MAAO,CAELC,OAAQ,CAAEC,OAAQ,CAAEC,aAAc,CAAEC,eAAe,KACnDC,KAAM,CAAEC,OAAQ,OAAQC,cAAc,KAGxC,kBAAC,IAA0B,CAACN,OAAQR,GAClC,kBAAC,IAAa,CAACe,MAAO,IAAMC,YAC1B,kBAAC,IAA6B,KAC5B,kBAAC,IAA2B,KAC1B,kBAAC,IAAoC,KACnC,kBAAC,IAAkB,W,6DChC5B,MAMMC,EAAgB,CAACC,EAAUV,IAAYW,IAAS,QAAmB,QAAQD,EAAU,GAAGV,EAAOL,kBAAkBK,EAAOJ,6BAA8B,CAAC,EAAGe,IAAOC,KAAMC,IAChL,IAAI,QAAkBA,GAClB,OAAOA,EAASC,KAEpB,MAAM,IAAIC,MAAM,4B,6DCTpB,MAKA,EALgB,KACd,MAAM,KAAEX,IAAS,IAAAY,YAAW,KAC5B,OAAOZ,E,kBCNF,IAAIa,EAQAC,E,iBAPX,SAAWD,GACPA,EAAsB,QAAI,UAC1BA,EAAqB,OAAI,SACzBA,EAAsB,QAAI,UAC1BA,EAAmB,KAAI,OACvBA,EAAqB,OAAI,QAC5B,CAND,CAMGA,IAAiBA,EAAe,CAAC,IAEpC,SAAWC,GACPA,EAA0C,iBAAI,mBAC9CA,EAA6C,oBAAI,qBACpD,CAHD,CAGGA,IAA4BA,EAA0B,CAAC,G,kFCTtC,QAAa,YAAyB,MAAU,IAAMV,YAExE,QAAa,YAA6B,MAAmB,IAAed,UAE5ByB,SAAS,WAJ3D,MASMxB,EAAa,kBACbC,EAAkB,I","sources":["webpack://model-registry-ui/./src/odh/ModelCatalogWrapper.tsx","webpack://model-registry-ui/./node_modules/mod-arch-core/dist/api/k8s.js","webpack://model-registry-ui/./src/app/hooks/useUser.ts","webpack://model-registry-ui/./node_modules/mod-arch-core/dist/types/common.js","webpack://model-registry-ui/./src/app/utilities/const.ts"],"sourcesContent":["import React from 'react';\nimport {\n  BrowserStorageContextProvider,\n  NotificationContextProvider,\n  ModularArchContextProvider,\n  ModularArchConfig,\n  DeploymentMode,\n} from 'mod-arch-core';\nimport { ThemeProvider, Theme } from 'mod-arch-kubeflow';\nimport { BFF_API_VERSION, URL_PREFIX } from '~/app/utilities/const';\nimport { AppContext } from '~/app/context/AppContext';\nimport ModelCatalogRoutes from '~/app/pages/modelCatalog/ModelCatalogRoutes';\nimport { ModelRegistrySelectorContextProvider } from '~/app/context/ModelRegistrySelectorContext';\n\nconst modularArchConfig: ModularArchConfig = {\n  deploymentMode: DeploymentMode.Federated,\n  URL_PREFIX,\n  BFF_API_VERSION,\n  mandatoryNamespace: 'odh-model-registries',\n};\n\nconst ModelCatalogWrapper: React.FC = () => {\n  return (\n    <AppContext.Provider\n      value={{\n        // TODO: remove this once we have a proper config\n        config: { common: { featureFlags: { modelRegistry: true } } },\n        user: { userId: 'test', clusterAdmin: true },\n      }}\n    >\n      <ModularArchContextProvider config={modularArchConfig}>\n        <ThemeProvider theme={Theme.Patternfly}>\n          <BrowserStorageContextProvider>\n            <NotificationContextProvider>\n              <ModelRegistrySelectorContextProvider>\n                <ModelCatalogRoutes />\n              </ModelRegistrySelectorContextProvider>\n            </NotificationContextProvider>\n          </BrowserStorageContextProvider>\n        </ThemeProvider>\n      </ModularArchContextProvider>\n    </AppContext.Provider>\n  );\n};\nexport default ModelCatalogWrapper;\n","import { handleRestFailures } from '../api/errorUtils';\nimport { isModArchResponse, restGET } from '../api/apiUtils';\n// Functions now accept config object\nexport const getUser = (hostPath, config) => (opts) => handleRestFailures(restGET(hostPath, `${config.URL_PREFIX}/api/${config.BFF_API_VERSION}/user`, {}, opts)).then((response) => {\n    if (isModArchResponse(response)) {\n        return response.data;\n    }\n    throw new Error('Invalid response format');\n});\nexport const getNamespaces = (hostPath, config) => (opts) => handleRestFailures(restGET(hostPath, `${config.URL_PREFIX}/api/${config.BFF_API_VERSION}/namespaces`, {}, opts)).then((response) => {\n    if (isModArchResponse(response)) {\n        return response.data;\n    }\n    throw new Error('Invalid response format');\n});\n//# sourceMappingURL=k8s.js.map","import { useContext } from 'react';\nimport { UserSettings } from 'mod-arch-core';\nimport { AppContext } from '~/app/context/AppContext';\n\nconst useUser = (): UserSettings => {\n  const { user } = useContext(AppContext);\n  return user;\n};\n\nexport default useUser;\n","export var AlertVariant;\n(function (AlertVariant) {\n    AlertVariant[\"success\"] = \"success\";\n    AlertVariant[\"danger\"] = \"danger\";\n    AlertVariant[\"warning\"] = \"warning\";\n    AlertVariant[\"info\"] = \"info\";\n    AlertVariant[\"custom\"] = \"custom\";\n})(AlertVariant || (AlertVariant = {}));\nexport var NotificationActionTypes;\n(function (NotificationActionTypes) {\n    NotificationActionTypes[\"ADD_NOTIFICATION\"] = \"add_notification\";\n    NotificationActionTypes[\"DELETE_NOTIFICATION\"] = \"delete_notification\";\n})(NotificationActionTypes || (NotificationActionTypes = {}));\n//# sourceMappingURL=common.js.map","import { DeploymentMode, asEnumMember } from 'mod-arch-core';\nimport { Theme } from 'mod-arch-kubeflow';\n\nconst STYLE_THEME = asEnumMember(process.env.STYLE_THEME, Theme) || Theme.Patternfly;\nconst DEPLOYMENT_MODE =\n  asEnumMember(process.env.DEPLOYMENT_MODE, DeploymentMode) || DeploymentMode.Federated;\nconst DEV_MODE = process.env.APP_ENV === 'development';\nconst POLL_INTERVAL = process.env.POLL_INTERVAL ? parseInt(process.env.POLL_INTERVAL) : 30000;\nconst KUBEFLOW_USERNAME = process.env.KUBEFLOW_USERNAME || 'user@example.com';\nconst IMAGE_DIR = process.env.IMAGE_DIR || 'images';\nconst LOGO_LIGHT = process.env.LOGO || 'logo-light-theme.svg';\nconst MANDATORY_NAMESPACE = process.env.MANDATORY_NAMESPACE || undefined;\nconst URL_PREFIX = '/model-registry';\nconst BFF_API_VERSION = 'v1';\nconst COMPANY_URI = process.env.COMPANY_URI || 'oci://kubeflow.io';\n\nexport {\n  STYLE_THEME,\n  POLL_INTERVAL,\n  DEV_MODE,\n  KUBEFLOW_USERNAME,\n  IMAGE_DIR,\n  LOGO_LIGHT,\n  URL_PREFIX,\n  DEPLOYMENT_MODE,\n  BFF_API_VERSION,\n  MANDATORY_NAMESPACE,\n  COMPANY_URI,\n};\n\nexport const FindAdministratorOptions = [\n  'The person who gave you your username, or who helped you to log in for the first time',\n  'Someone in your IT department or help desk',\n  'A project manager or developer',\n];\n"],"names":["modularArchConfig","deploymentMode","Federated","URL_PREFIX","BFF_API_VERSION","mandatoryNamespace","Provider","value","config","common","featureFlags","modelRegistry","user","userId","clusterAdmin","theme","Patternfly","getNamespaces","hostPath","opts","then","response","data","Error","useContext","AlertVariant","NotificationActionTypes","parseInt"],"sourceRoot":""}