{"version":3,"file":"859.bundle.js","mappings":"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","sources":["webpack://model-registry-ui/./src/app/hooks/useUser.ts","webpack://model-registry-ui/./src/app/hooks/useModelRegistriesSetting.ts","webpack://model-registry-ui/./src/app/pages/modelRegistrySettings/useModelRegistryRoleBindings.ts","webpack://model-registry-ui/./src/app/pages/settings/columns.ts","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistryTableRowStatus.tsx","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistriesTableRow.tsx","webpack://model-registry-ui/./src/app/pages/settings/DeleteModelRegistryModal.tsx","webpack://model-registry-ui/./src/app/shared/components/PasswordInput.tsx","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistryDatabasePassword.tsx","webpack://model-registry-ui/./src/concepts/k8s/ResourceNameDefinitionTootip.tsx","webpack://model-registry-ui/./src/concepts/k8s/K8sNameDescriptionField/ResourceNameField.tsx","webpack://model-registry-ui/./src/concepts/k8s/K8sNameDescriptionField/K8sNameDescriptionField.tsx","webpack://model-registry-ui/./src/app/pages/settings/components/ThemeAwareFormGroupWrapper.tsx","webpack://model-registry-ui/./src/app/pages/settings/CreateModal.tsx","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistriesTable.tsx","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistrySettings.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/types.ts","webpack://model-registry-ui/./src/app/hooks/useNamespaces.ts","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/utils.ts","webpack://model-registry-ui/./src/app/shared/components/utils.ts","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsNameInput.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsPermissionSelection.tsx","webpack://model-registry-ui/./src/app/shared/components/DeleteModal.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsChangeModal.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsTableRow.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/data.ts","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsTable.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissionsTableSection.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBinding/RoleBindingPermissions.tsx","webpack://model-registry-ui/./src/app/pages/settings/roleBindingUtils.ts","webpack://model-registry-ui/./src/app/pages/modelRegistrySettings/useModelRegistryPermissionsLogic.ts","webpack://model-registry-ui/./src/app/hooks/useGroups.ts","webpack://model-registry-ui/./src/app/hooks/useModelRegistryCR.ts","webpack://model-registry-ui/./src/app/pages/modelRegistrySettings/ModelRegistriesPermissions.tsx","webpack://model-registry-ui/./src/app/pages/settings/ModelRegistrySettingsRoutes.tsx"],"sourcesContent":["import { useContext } from 'react';\nimport { UserSettings } from 'mod-arch-core';\nimport { AppContext } from '~/app/context/AppContext';\n\nconst useUser = (): UserSettings => {\n  const { user } = useContext(AppContext);\n  return user;\n};\n\nexport default useUser;\n","import * as React from 'react';\nimport {\n  useDeepCompareMemoize,\n  FetchState,\n  FetchStateCallbackPromise,\n  useFetchState,\n} from 'mod-arch-core';\nimport { ModelRegistryKind } from 'mod-arch-shared';\nimport { listModelRegistrySettings } from '~/app/api/k8s';\n\nconst useModelRegistriesSettings = (\n  queryParams: Record<string, unknown>,\n): FetchState<ModelRegistryKind[]> => {\n  const paramsMemo = useDeepCompareMemoize(queryParams);\n\n  const listModelRegistriesSettings = React.useMemo(\n    () => listModelRegistrySettings('', paramsMemo),\n    [paramsMemo],\n  );\n  const callback = React.useCallback<FetchStateCallbackPromise<ModelRegistryKind[]>>(\n    (opts) => listModelRegistriesSettings(opts),\n    [listModelRegistriesSettings],\n  );\n  return useFetchState(callback, [], { initialPromisePurity: true });\n};\n\nexport default useModelRegistriesSettings;\n","import * as React from 'react';\nimport {\n  POLL_INTERVAL,\n  useFetchState,\n  FetchStateObject,\n  useDeepCompareMemoize,\n} from 'mod-arch-core';\nimport { RoleBindingKind } from 'mod-arch-shared';\nimport { getRoleBindings } from '~/app/api/k8s';\n\nconst useModelRegistryRoleBindings = (\n  queryParams: Record<string, unknown>,\n): FetchStateObject<RoleBindingKind[]> => {\n  const paramsMemo = useDeepCompareMemoize(queryParams);\n  const fetchRoleBindings = React.useCallback(\n    () =>\n      getRoleBindings(\n        '',\n        paramsMemo,\n      )({}).catch((e) => {\n        if (e.response?.status === 404) {\n          throw new Error('No rolebindings found.');\n        }\n        throw e;\n      }),\n    [paramsMemo],\n  );\n\n  const [data, loaded, error, refresh] = useFetchState<RoleBindingKind[]>(fetchRoleBindings, [], {\n    refreshRate: POLL_INTERVAL,\n  });\n  return { data, loaded, error, refresh };\n};\n\nexport default useModelRegistryRoleBindings;\n","import { kebabTableColumn, SortableData, ModelRegistryKind } from 'mod-arch-shared';\n\nexport const modelRegistryColumns: SortableData<ModelRegistryKind>[] = [\n  {\n    field: 'model regisry name',\n    label: 'Model registry name',\n    sortable: (a, b) => a.metadata.name.localeCompare(b.metadata.name),\n    width: 30,\n  },\n  {\n    field: 'status',\n    label: 'Status',\n    sortable: false,\n  },\n  {\n    field: 'manage permissions',\n    label: '',\n    sortable: false,\n  },\n  kebabTableColumn(),\n];\n","import React from 'react';\nimport { Label, Popover, Stack, StackItem } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { K8sCondition } from 'mod-arch-shared';\n\nenum ModelRegistryStatus {\n  Progressing = 'Progressing',\n  Degraded = 'Degraded',\n  Available = 'Available',\n  IstioAvailable = 'IstioAvailable',\n  GatewayAvailable = 'GatewayAvailable',\n}\n\nenum ModelRegistryStatusLabel {\n  Progressing = 'Progressing',\n  Available = 'Available',\n  Degrading = 'Degrading',\n  Unavailable = 'Unavailable',\n}\n\nenum ConditionStatus {\n  True = 'True',\n  False = 'False',\n}\ninterface ModelRegistryTableRowStatusProps {\n  conditions: K8sCondition[] | undefined;\n}\n\nexport const ModelRegistryTableRowStatus: React.FC<ModelRegistryTableRowStatusProps> = ({\n  conditions,\n}) => {\n  const conditionsMap =\n    conditions?.reduce((acc: Record<string, K8sCondition | undefined>, condition) => {\n      acc[condition.type] = condition;\n      return acc;\n    }, {}) ?? {};\n  let statusLabel: string = ModelRegistryStatusLabel.Progressing;\n  let icon = <InProgressIcon />;\n  let status: React.ComponentProps<typeof Label>['status'];\n  let popoverMessages: string[] = [];\n  let popoverTitle = '';\n\n  if (Object.values(conditionsMap).length) {\n    const {\n      [ModelRegistryStatus.Available]: availableCondition,\n      [ModelRegistryStatus.Progressing]: progressCondition,\n      [ModelRegistryStatus.Degraded]: degradedCondition,\n    } = conditionsMap;\n\n    popoverMessages =\n      availableCondition?.status === ConditionStatus.False\n        ? Object.values(conditionsMap).reduce((messages: string[], condition) => {\n            if (condition?.status === ConditionStatus.False && condition.message) {\n              messages.push(condition.message);\n            }\n            return messages;\n          }, [])\n        : [];\n\n    // Unavailable\n    if (\n      availableCondition?.status === ConditionStatus.False &&\n      !popoverMessages.some((message) => message.includes('ContainerCreating'))\n    ) {\n      statusLabel = ModelRegistryStatusLabel.Unavailable;\n      icon = <ExclamationTriangleIcon />;\n      status = 'warning';\n    }\n    // Degrading\n    else if (degradedCondition?.status === ConditionStatus.True) {\n      statusLabel = ModelRegistryStatusLabel.Degrading;\n      icon = <InProgressIcon className=\"kubeflow-u-spin\" />;\n      popoverTitle = 'Service is degrading';\n    }\n    // Available\n    else if (availableCondition?.status === ConditionStatus.True) {\n      statusLabel = ModelRegistryStatusLabel.Available;\n      icon = <CheckCircleIcon />;\n      status = 'success';\n    }\n    // Progressing\n    else if (progressCondition?.status === ConditionStatus.True) {\n      statusLabel = ModelRegistryStatusLabel.Progressing;\n      icon = <InProgressIcon className=\"kubeflow-u-spin\" />;\n      status = 'info';\n    }\n  }\n  // Handle popover logic for Unavailable status\n  if (statusLabel === ModelRegistryStatusLabel.Unavailable) {\n    const {\n      [ModelRegistryStatus.IstioAvailable]: istioAvailableCondition,\n      [ModelRegistryStatus.GatewayAvailable]: gatewayAvailableCondition,\n    } = conditionsMap;\n\n    if (\n      istioAvailableCondition?.status === ConditionStatus.False &&\n      gatewayAvailableCondition?.status === ConditionStatus.False\n    ) {\n      popoverTitle = 'Istio resources and Istio Gateway resources are both unavailable';\n    } else if (istioAvailableCondition?.status === ConditionStatus.False) {\n      popoverTitle = 'Istio resources are unavailable';\n    } else if (gatewayAvailableCondition?.status === ConditionStatus.False) {\n      popoverTitle = 'Istio Gateway resources are unavailable';\n    } else if (\n      istioAvailableCondition?.status === ConditionStatus.True &&\n      gatewayAvailableCondition?.status === ConditionStatus.True\n    ) {\n      popoverTitle = 'Deployment is unavailable';\n    } else {\n      popoverTitle = 'Service is unavailable';\n    }\n  }\n\n  const isClickable = popoverTitle && popoverMessages.length;\n\n  const label = (\n    <Label\n      {...(isClickable\n        ? {\n            onClick: () => {\n              /* intentional no-op - Click event is handled by the Popover parent,\n              this prop enables clickable styles in the PatternFly Label */\n            },\n          }\n        : {})}\n      data-testid=\"model-registry-label\"\n      icon={icon}\n      status={status}\n      isCompact\n    >\n      {statusLabel}\n    </Label>\n  );\n\n  return popoverTitle && popoverMessages.length ? (\n    <Popover\n      headerContent={popoverTitle}\n      {...(statusLabel === ModelRegistryStatusLabel.Degrading\n        ? {\n            alertSeverityVariant: 'warning',\n            headerIcon: <ExclamationTriangleIcon />,\n          }\n        : { alertSeverityVariant: 'danger', headerIcon: <ExclamationCircleIcon /> })}\n      bodyContent={\n        <Stack hasGutter>\n          {popoverMessages.map((message, index) => (\n            <StackItem key={`message-${index}`}>{message}</StackItem>\n          ))}\n        </Stack>\n      }\n    >\n      {label}\n    </Popover>\n  ) : (\n    label\n  );\n};\n","import React from 'react';\nimport { ActionsColumn, Td, Tr } from '@patternfly/react-table';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { FetchStateObject } from 'mod-arch-shared/dist/types/common';\nimport { ModelRegistryKind, ResourceNameTooltip, RoleBindingKind } from 'mod-arch-shared';\nimport { DeploymentMode, useModularArchContext } from 'mod-arch-core';\nimport { ModelRegistryTableRowStatus } from './ModelRegistryTableRowStatus';\n\ntype ModelRegistriesTableRowProps = {\n  modelRegistry: ModelRegistryKind;\n  roleBindings: FetchStateObject<RoleBindingKind[]>;\n  onEditRegistry: (obj: ModelRegistryKind) => void;\n  onDeleteRegistry: (obj: ModelRegistryKind) => void;\n};\n\nconst ModelRegistriesTableRow: React.FC<ModelRegistriesTableRowProps> = ({\n  modelRegistry: mr,\n  roleBindings,\n  onEditRegistry,\n  onDeleteRegistry,\n}) => {\n  const navigate = useNavigate();\n  const { config } = useModularArchContext();\n  const { deploymentMode } = config;\n  const isDeploymentKubeflow = deploymentMode === DeploymentMode.Kubeflow;\n  const filteredRoleBindings = roleBindings.data.filter(\n    (rb) =>\n      rb.metadata.labels?.['app.kubernetes.io/name'] ===\n      (mr.metadata.name || mr.metadata.annotations?.['openshift.io/display-name']),\n  );\n\n  return (\n    <Tr>\n      <Td dataLabel=\"Model registry name\">\n        <ResourceNameTooltip resource={mr}>\n          <strong>\n            {mr.metadata.annotations?.['openshift.io/display-name'] || mr.metadata.name}\n          </strong>\n        </ResourceNameTooltip>\n        {mr.metadata.annotations?.['openshift.io/description'] && (\n          <p>{mr.metadata.annotations['openshift.io/description']}</p>\n        )}\n      </Td>\n      <Td dataLabel=\"Status\">\n        <ModelRegistryTableRowStatus conditions={mr.status?.conditions} />\n      </Td>\n      <Td modifier=\"fitContent\">\n        {filteredRoleBindings.length === 0 ? (\n          <Tooltip content=\"You can manage permissions when the model registry becomes available.\">\n            <Button isAriaDisabled variant=\"link\">\n              Manage permissions\n            </Button>\n          </Tooltip>\n        ) : (\n          <Button\n            variant=\"link\"\n            onClick={() => navigate(`/model-registry-settings/permissions/${mr.metadata.name}`)}\n          >\n            Manage permissions\n          </Button>\n        )}\n      </Td>\n      <Td isActionCell>\n        <ActionsColumn\n          items={[\n            {\n              title: 'Edit model registry',\n              onClick: () => {\n                onEditRegistry(mr);\n              },\n            },\n            {\n              title: 'Delete model registry',\n              disabled: isDeploymentKubeflow,\n              onClick: () => {\n                onDeleteRegistry(mr);\n              },\n            },\n          ]}\n        />\n      </Td>\n    </Tr>\n  );\n};\n\nexport default ModelRegistriesTableRow;\n","import React from 'react';\nimport {\n  Content,\n  TextInput,\n  Stack,\n  StackItem,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n} from '@patternfly/react-core';\nimport { DashboardModalFooter, ModelRegistryKind } from 'mod-arch-shared';\nimport { deleteModelRegistrySettings } from '~/app/api/k8s';\n\ntype DeleteModelRegistryModalProps = {\n  modelRegistry: ModelRegistryKind;\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst DeleteModelRegistryModal: React.FC<DeleteModelRegistryModalProps> = ({\n  modelRegistry: mr,\n  onClose,\n  refresh,\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n  const [confirmInputValue, setConfirmInputValue] = React.useState('');\n  const isDisabled = confirmInputValue.trim() !== mr.metadata.name || isSubmitting;\n\n  const onBeforeClose = () => {\n    setConfirmInputValue('');\n    setIsSubmitting(false);\n    setError(undefined);\n    onClose();\n  };\n\n  const onConfirm = async () => {\n    setIsSubmitting(true);\n    setError(undefined);\n    try {\n      await deleteModelRegistrySettings('', {\n        namespace: mr.metadata.namespace,\n      })({}, mr, mr.metadata.name);\n      refresh();\n      onBeforeClose();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Modal data-testid=\"delete-mr-modal\" isOpen onClose={onClose} variant=\"medium\">\n      <ModalHeader title=\"Delete model registry?\" titleIconVariant=\"warning\" />\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>\n            <Content>\n              <Content component=\"p\">\n                The <strong>{mr.metadata.name}</strong> model registry, its default group, and any\n                permissions associated with it will be deleted. Data located in the database\n                connected to the registry will be unaffected.\n              </Content>\n              <Content component=\"p\">\n                Type <strong>{mr.metadata.name}</strong> to confirm deletion:\n              </Content>\n            </Content>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              id=\"confirm-delete-input\"\n              data-testid=\"confirm-delete-input\"\n              aria-label=\"Confirm delete input\"\n              value={confirmInputValue}\n              onChange={(_e, newValue) => setConfirmInputValue(newValue)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter' && !isDisabled) {\n                  onConfirm();\n                }\n              }}\n            />\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <DashboardModalFooter\n          submitLabel=\"Delete model registry\"\n          submitButtonVariant=\"danger\"\n          onSubmit={onConfirm}\n          onCancel={onBeforeClose}\n          isSubmitLoading={isSubmitting}\n          isSubmitDisabled={isDisabled}\n          error={error}\n          alertTitle=\"Error deleting model registry\"\n        />\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default DeleteModelRegistryModal;\n","import * as React from 'react';\nimport { Button, InputGroup, TextInput, InputGroupItem } from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  ariaLabelShow?: string;\n  ariaLabelHide?: string;\n};\n\nconst PasswordInput: React.FC<Props> = ({\n  ariaLabelShow = 'Show password',\n  ariaLabelHide = 'Hide password',\n  ...props\n}) => {\n  const [isPasswordHidden, setPasswordHidden] = React.useState(true);\n\n  return (\n    <InputGroup>\n      <InputGroupItem isFill>\n        <TextInput {...props} type={isPasswordHidden ? 'password' : 'text'} />\n      </InputGroupItem>\n      <InputGroupItem>\n        <Button\n          aria-label={isPasswordHidden ? ariaLabelShow : ariaLabelHide}\n          variant=\"control\"\n          onClick={() => setPasswordHidden(!isPasswordHidden)}\n        >\n          {isPasswordHidden ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n      </InputGroupItem>\n    </InputGroup>\n  );\n};\n\nexport default PasswordInput;\n","import React from 'react';\nimport PasswordInput from '~/app/shared/components/PasswordInput';\n\ntype ModelRegistryDatabasePasswordProps = {\n  password: string | undefined;\n  setPassword: (value: string) => void;\n  showPassword?: boolean;\n  isPasswordTouched?: boolean;\n  setIsPasswordTouched: (value: boolean) => void;\n  // editRegistry?: ModelRegistryKind;\n};\n\nconst ModelRegistryDatabasePassword: React.FC<ModelRegistryDatabasePasswordProps> = ({\n  password = '',\n  setPassword,\n  showPassword,\n  isPasswordTouched,\n  setIsPasswordTouched,\n  // editRegistry: mr,\n}) => {\n  // TODO: Implement this\n  // const [existingDbPassword, passwordLoaded, passwordLoadError] = useFetchState(\n  //   React.useCallback<FetchStateCallbackPromise<string | undefined>>(async () => {\n  //     if (!mr) {\n  //       return Promise.reject(new NotReadyError('Model registry does not exist'));\n  //     }\n\n  //     const { databasePassword } = await getModelRegistryBackend(mr.metadata.name);\n  //     return databasePassword;\n  //   }, [mr]),\n  //   undefined,\n  // );\n\n  // React.useEffect(() => {\n  //   if (existingDbPassword && mr) {\n  //     setPassword(existingDbPassword);\n  //   }\n  // }, [existingDbPassword, setPassword, mr]);\n\n  const hasContent = (value: string): boolean => !!value.trim().length;\n\n  // if (!passwordLoaded && !passwordLoadError && mr) {\n  //   return <Skeleton screenreaderText=\"Loading contents\" />;\n  // }\n\n  // if (passwordLoadError) {\n  //   return (\n  //     <Alert\n  //       variant=\"danger\"\n  //       isInline\n  //       isPlain\n  //       title=\"Failed to load the password. The Secret file is missing.\"\n  //     />\n  //   );\n  // }\n\n  return (\n    <>\n      <PasswordInput\n        isRequired\n        type={showPassword ? 'text' : 'password'}\n        id=\"mr-password\"\n        name=\"mr-password\"\n        value={password}\n        onBlur={() => setIsPasswordTouched(true)}\n        onChange={(_e, value) => setPassword(value)}\n        validated={isPasswordTouched && !hasContent(password) ? 'error' : 'default'}\n      />\n    </>\n  );\n};\n\nexport default ModelRegistryDatabasePassword;\n","import * as React from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { FieldGroupHelpLabelIcon } from 'mod-arch-shared';\n\nconst ResourceNameDefinitionTooltip: React.FC = () => (\n  <FieldGroupHelpLabelIcon\n    content={\n      <Stack hasGutter>\n        <StackItem>\n          The resource name is used to identify your resource, and is generated based on the name\n          you enter.\n        </StackItem>\n        <StackItem>The resource name cannot be edited after creation.</StackItem>\n      </Stack>\n    }\n  />\n);\n\nexport default ResourceNameDefinitionTooltip;\n","import * as React from 'react';\nimport { FormGroup, HelperText, HelperTextItem, TextInput } from '@patternfly/react-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\n\ntype ResourceNameFieldProps = {\n  allowEdit: boolean;\n  dataTestId: string;\n  //   k8sName: K8sNameDescriptionFieldData['k8sName'];\n  //   onDataChange?: K8sNameDescriptionFieldUpdateFunction;\n};\n\n/** Sub-resource; not for public consumption */\nconst ResourceNameField: React.FC<ResourceNameFieldProps> = ({\n  allowEdit,\n  dataTestId,\n  //   k8sName,\n  //   onDataChange,\n}) => {\n  // TODO: Implement this once we have the endpoint.\n\n  //   if (k8sName.state.immutable) {\n  //     return <FormGroup {...formGroupProps}>{k8sName.value}</FormGroup>;\n  //   }\n\n  const { isMUITheme } = useThemeContext();\n  if (!allowEdit) {\n    return null;\n  }\n\n  // TODO: Implement this once we have the endpoint.\n\n  //   let validated: ValidatedOptions = ValidatedOptions.default;\n  //   if (k8sName.state.invalidLength || k8sName.state.invalidCharacters) {\n  //     validated = ValidatedOptions.error;\n  //   } else if (k8sName.value.length > 0) {\n  //     validated = ValidatedOptions.success;\n  //   }\n\n  //   const usePrefix = k8sName.state.staticPrefix && !!k8sName.state.safePrefix;\n  const textInput = (\n    <TextInput\n      id={`${dataTestId}-resourceName`}\n      data-testid={`${dataTestId}-resourceName`}\n      name={`${dataTestId}-resourceName`}\n      type=\"text\"\n      isRequired\n      //   value={\n      //     usePrefix && k8sName.state.safePrefix\n      //       ? k8sName.value.replace(new RegExp(`^${k8sName.state.safePrefix}`), '')\n      //       : k8sName.value\n      //   }\n      //   onChange={(event, value) =>\n      //     onDataChange?.(\n      //       'k8sName',\n      //       usePrefix && k8sName.state.safePrefix ? `${k8sName.state.safePrefix}${value}` : value,\n      //     )\n      //   }\n      //   validated={validated}\n    />\n  );\n\n  const resourceNameFormGroup = (\n    <>\n      <FormGroup\n        label=\"Resource name\"\n        className=\"resource-name\"\n        isRequired\n        fieldId={`${dataTestId}-resource-name`}\n      >\n        <FormFieldset component={textInput} field=\"Host\" />\n      </FormGroup>\n      <HelperText>\n        <HelperTextItem>\n          The resource name is used to identify your resource, and is generated based on the name\n          you enter. The resource name cannot be edited after creation.\n        </HelperTextItem>\n        {/* <HelperTextItemMaxLength k8sName={k8sName} />\n         <HelperTextItemValidCharacters k8sName={k8sName} /> */}\n      </HelperText>\n    </>\n  );\n\n  // TODO: Implement this once we have the endpoint.\n  // return (\n  //   <FormGroup {...formGroupProps} isRequired>\n  //     {usePrefix ? (\n  //       <InputGroup>\n  //         <InputGroupText>{k8sName.state.safePrefix}</InputGroupText>\n  //         <InputGroupItem isFill>{textInput}</InputGroupItem>\n  //       </InputGroup>\n  //     ) : (\n  //       { textInput }\n  //     )}\n  //     <HelperText>\n  //       <HelperTextItemMaxLength k8sName={k8sName} />\n  //       <HelperTextItemValidCharacters k8sName={k8sName} />\n  //     </HelperText>\n  //   </FormGroup>\n  // );\n\n  return isMUITheme ? resourceNameFormGroup : textInput;\n};\n\nexport default ResourceNameField;\n","import * as React from 'react';\nimport {\n  Button,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport ResourceNameDefinitionTooltip from '~/concepts/k8s/ResourceNameDefinitionTootip';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\nimport ResourceNameField from './ResourceNameField';\n\n// TODO: replace with the actual call once we have the endpoint\n\n/** Companion data hook */\n// export const useK8sNameDescriptionFieldData = (\n//   configuration: UseK8sNameDescriptionDataConfiguration = {},\n// ): UseK8sNameDescriptionFieldData => {\n//   const [data, setData] = React.useState<K8sNameDescriptionFieldData>(() =>\n//     setupDefaults(configuration),\n//   );\n\n//   const onDataChange = React.useCallback<K8sNameDescriptionFieldUpdateFunction>((key, value) => {\n//     setData((currentData) => handleUpdateLogic(currentData)(key, value));\n//   }, []);\n\n//   return { data, onDataChange };\n// };\n\ntype NameDescType = {\n  name: string;\n  description: string;\n};\n\ntype K8sNameDescriptionFieldProps = {\n  data: NameDescType;\n  onDataChange: (data: NameDescType) => void;\n  dataTestId: string;\n  descriptionLabel?: string;\n  nameLabel?: string;\n  nameHelperText?: React.ReactNode;\n  hideDescription?: boolean;\n};\n\n/**\n * Use in place of any K8s Resource creation / edit.\n * @see useK8sNameDescriptionFieldData\n */\nconst K8sNameDescriptionField: React.FC<K8sNameDescriptionFieldProps> = ({\n  data,\n  onDataChange,\n  dataTestId,\n  descriptionLabel = 'Description',\n  nameLabel = 'Name',\n  nameHelperText,\n  hideDescription,\n}) => {\n  const [showK8sField, setShowK8sField] = React.useState(false);\n  const { isMUITheme } = useThemeContext();\n\n  const nameInput = (\n    <TextInput\n      data-testid={`${dataTestId}-name`}\n      id={`${dataTestId}-name`}\n      name={`${dataTestId}-name`}\n      value={data.name}\n      onChange={(_e, value) => onDataChange({ ...data, name: value })}\n      isRequired\n    />\n  );\n\n  const nameFormGroup = (\n    <>\n      <FormGroup label={nameLabel} isRequired fieldId={`${dataTestId}-name`}>\n        <FormFieldset component={nameInput} field=\"Name\" />\n      </FormGroup>\n      {nameHelperText || !showK8sField ? (\n        //  &&\n        // !k8sName.state.immutable\n        <HelperText>\n          {nameHelperText && <HelperTextItem>{nameHelperText}</HelperTextItem>}\n          {!showK8sField && (\n            // !k8sName.state.immutable\n            // &&\n            <>\n              {/* {k8sName.value && (\n                <HelperTextItem>\n                  The resource name will be <b>{k8sName.value}</b>.\n                </HelperTextItem>\n              )} */}\n              <HelperTextItem>\n                <Button\n                  data-testid={`${dataTestId}-editResourceLink`}\n                  variant=\"link\"\n                  isInline\n                  onClick={() => setShowK8sField(true)}\n                >\n                  Edit resource name\n                </Button>{' '}\n                <ResourceNameDefinitionTooltip />\n              </HelperTextItem>\n            </>\n          )}\n        </HelperText>\n      ) : null}\n    </>\n  );\n\n  const descriptionTextInput = (\n    <TextInput\n      data-testid={`${dataTestId}-description`}\n      id={`${dataTestId}-description`}\n      name={`${dataTestId}-description`}\n      type=\"text\"\n      value={data.description}\n      onChange={(_e, value) => onDataChange({ ...data, description: value })}\n    />\n  );\n\n  const descriptionTextArea = (\n    <TextArea\n      data-testid={`${dataTestId}-description`}\n      id={`${dataTestId}-description`}\n      name={`${dataTestId}-description`}\n      type=\"text\"\n      value={data.description}\n      onChange={(_e, value) => onDataChange({ ...data, description: value })}\n      resizeOrientation=\"vertical\"\n    />\n  );\n\n  const descriptionFormGroup = (\n    <FormGroup label={descriptionLabel} fieldId={`${dataTestId}-description`}>\n      <FormFieldset component={descriptionTextInput} field=\"Description\" />\n    </FormGroup>\n  );\n\n  return (\n    <>\n      {isMUITheme ? (\n        nameFormGroup\n      ) : (\n        <>\n          <FormGroup label={nameLabel} isRequired fieldId={`${dataTestId}-name`}>\n            {nameInput}\n            {nameHelperText}\n          </FormGroup>\n        </>\n      )}\n\n      <ResourceNameField allowEdit={showK8sField} dataTestId={dataTestId} />\n\n      {!hideDescription && isMUITheme ? (\n        descriptionFormGroup\n      ) : (\n        <FormGroup label={descriptionLabel} fieldId={`${dataTestId}-description`}>\n          {descriptionTextArea}\n        </FormGroup>\n      )}\n    </>\n  );\n};\n\nexport default K8sNameDescriptionField;\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport FormFieldset from '~/app/pages/modelRegistry/screens/components/FormFieldset';\n\n// Props required by this wrapper component\ntype ThemeAwareFormGroupWrapperProps = {\n  children: React.ReactNode; // The input component\n  label: string;\n  fieldId: string;\n  isRequired?: boolean;\n  helperTextNode?: React.ReactNode; // The pre-rendered HelperText component or null\n  className?: string; // Optional className for the outer FormGroup\n};\n\nconst ThemeAwareFormGroupWrapper: React.FC<ThemeAwareFormGroupWrapperProps> = ({\n  children,\n  label,\n  fieldId,\n  isRequired,\n  helperTextNode,\n  className,\n}) => {\n  const { isMUITheme } = useThemeContext();\n  const hasError = !!helperTextNode; // Determine error state based on helper text presence\n\n  if (isMUITheme) {\n    // For MUI theme, render FormGroup -> FormFieldset -> Input\n    // Helper text is rendered *after* the FormGroup wrapper\n    return (\n      <>\n        <FormGroup\n          className={`${className || ''} ${hasError ? 'pf-m-error' : ''}`.trim()} // Apply className and error state class\n          label={label}\n          isRequired={isRequired}\n          fieldId={fieldId}\n        >\n          <FormFieldset component={children} field={label} />\n        </FormGroup>\n        {helperTextNode}\n      </>\n    );\n  }\n\n  // For PF theme, render standard FormGroup\n  return (\n    <>\n      <FormGroup\n        className={`${className || ''} ${hasError ? 'pf-m-error' : ''}`.trim()} // Apply className and error state class\n        label={label}\n        isRequired={isRequired}\n        fieldId={fieldId}\n      >\n        {children}\n        {helperTextNode}\n      </FormGroup>\n    </>\n  );\n};\n\nexport default ThemeAwareFormGroupWrapper;\n","import * as React from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n  Alert,\n  Modal,\n  ModalVariant,\n  ModalFooter,\n  ModalHeader,\n  ModalBody,\n} from '@patternfly/react-core';\nimport { useNavigate } from 'react-router';\nimport { FormSection } from 'mod-arch-shared';\nimport { createModelRegistrySettings } from '~/app/api/k8s';\nimport ModelRegistryDatabasePassword from '~/app/pages/settings/ModelRegistryDatabasePassword';\nimport K8sNameDescriptionField from '~/concepts/k8s/K8sNameDescriptionField/K8sNameDescriptionField';\nimport ThemeAwareFormGroupWrapper from '~/app/pages/settings/components/ThemeAwareFormGroupWrapper';\n\ntype NameDescType = {\n  name: string;\n  description: string;\n};\n\ntype ModelRegistryPayload = {\n  modelRegistry: {\n    metadata: {\n      name: string;\n      annotations: {\n        'openshift.io/display-name': string;\n        'openshift.io/description': string;\n      };\n    };\n    spec: {\n      mysql: {\n        host: string;\n        port: number;\n        username: string;\n        database: string;\n      };\n    };\n  };\n};\n\ntype CreateModalProps = {\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst CreateModal: React.FC<CreateModalProps> = ({ onClose, refresh }) => {\n  const [error, setError] = React.useState<Error>();\n  const [nameDesc, setNameDesc] = React.useState<NameDescType>({\n    name: '',\n    description: '',\n  });\n  const [host, setHost] = React.useState('');\n  const [port, setPort] = React.useState('');\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [database, setDatabase] = React.useState('');\n  const [isHostTouched, setIsHostTouched] = React.useState(false);\n  const [isPortTouched, setIsPortTouched] = React.useState(false);\n  const [isUsernameTouched, setIsUsernameTouched] = React.useState(false);\n  const [isPasswordTouched, setIsPasswordTouched] = React.useState(false);\n  const [isDatabaseTouched, setIsDatabaseTouched] = React.useState(false);\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const navigate = useNavigate();\n\n  const onBeforeClose = () => {\n    setError(undefined);\n    setNameDesc({ name: '', description: '' });\n    setHost('');\n    setPort('');\n    setUsername('');\n    setPassword('');\n    setDatabase('');\n    setIsHostTouched(false);\n    setIsPortTouched(false);\n    setIsUsernameTouched(false);\n    setIsPasswordTouched(false);\n    setIsDatabaseTouched(false);\n    setShowPassword(false);\n    onClose();\n  };\n\n  const hasContent = (value: string): boolean => !!value.trim().length;\n\n  const canSubmit = () =>\n    hasContent(nameDesc.name) &&\n    hasContent(host) &&\n    hasContent(password) &&\n    hasContent(port) &&\n    hasContent(username) &&\n    hasContent(database);\n\n  const onSubmit = async () => {\n    setError(undefined);\n\n    // This is a simplified payload for the BFF, not a full K8s object.\n    const payload: ModelRegistryPayload = {\n      modelRegistry: {\n        metadata: {\n          name: nameDesc.name,\n          annotations: {\n            'openshift.io/display-name': nameDesc.name,\n            'openshift.io/description': nameDesc.description,\n          },\n        },\n        spec: {\n          mysql: {\n            host,\n            port: Number(port),\n            username,\n            database,\n          },\n        },\n      },\n    };\n\n    try {\n      await createModelRegistrySettings(window.location.origin, {\n        namespace: 'model-registry',\n      })({}, payload);\n      refresh();\n      navigate(`/model-registry-settings`);\n      onClose();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e);\n      }\n    }\n  };\n\n  const hostInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"mr-host\"\n      name=\"mr-host\"\n      value={host}\n      onBlur={() => setIsHostTouched(true)}\n      onChange={(_e, value) => setHost(value)}\n    />\n  );\n\n  const hostHelperText = isHostTouched && !hasContent(host) && (\n    <HelperText>\n      <HelperTextItem variant=\"error\" data-testid=\"mr-host-error\">\n        Host cannot be empty\n      </HelperTextItem>\n    </HelperText>\n  );\n\n  const portInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"mr-port\"\n      name=\"mr-port\"\n      value={port}\n      onBlur={() => setIsPortTouched(true)}\n      onChange={(_e, value) => setPort(value)}\n    />\n  );\n\n  const portHelperText = isPortTouched && !hasContent(port) && (\n    <HelperText>\n      <HelperTextItem variant=\"error\" data-testid=\"mr-port-error\">\n        Port cannot be empty\n      </HelperTextItem>\n    </HelperText>\n  );\n\n  const userNameInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"mr-username\"\n      name=\"mr-username\"\n      value={username}\n      onBlur={() => setIsUsernameTouched(true)}\n      onChange={(_e, value) => setUsername(value)}\n    />\n  );\n\n  const usernameHelperText = isUsernameTouched && !hasContent(username) && (\n    <HelperText>\n      <HelperTextItem variant=\"error\" data-testid=\"mr-username-error\">\n        Username cannot be empty\n      </HelperTextItem>\n    </HelperText>\n  );\n\n  const passwordInput = (\n    <ModelRegistryDatabasePassword\n      password={password || ''}\n      setPassword={setPassword}\n      isPasswordTouched={isPasswordTouched}\n      setIsPasswordTouched={setIsPasswordTouched}\n      showPassword={showPassword}\n    />\n  );\n\n  const passwordHelperText = isPasswordTouched && !hasContent(password) && (\n    <HelperText>\n      <HelperTextItem variant=\"error\" data-testid=\"mr-password-error\">\n        Password cannot be empty\n      </HelperTextItem>\n    </HelperText>\n  );\n\n  const databaseInput = (\n    <TextInput\n      isRequired\n      type=\"text\"\n      id=\"mr-database\"\n      name=\"mr-database\"\n      value={database}\n      onBlur={() => setIsDatabaseTouched(true)}\n      onChange={(_e, value) => setDatabase(value)}\n    />\n  );\n\n  const databaseHelperText = isDatabaseTouched && !hasContent(database) && (\n    <HelperText>\n      <HelperTextItem variant=\"error\" data-testid=\"mr-database-error\">\n        Database cannot be empty\n      </HelperTextItem>\n    </HelperText>\n  );\n\n  return (\n    <Modal\n      isOpen\n      variant={ModalVariant.medium}\n      onClose={onBeforeClose}\n      data-testid=\"create-model-registry-modal\"\n    >\n      <ModalHeader title=\"Create model registry\" />\n      <ModalBody>\n        <Form>\n          <K8sNameDescriptionField dataTestId=\"mr\" data={nameDesc} onDataChange={setNameDesc} />\n          <FormSection\n            title=\"Connect to external MySQL database\"\n            description=\"This external database is where model data is stored.\"\n          >\n            <ThemeAwareFormGroupWrapper\n              label=\"Host\"\n              fieldId=\"mr-host\"\n              isRequired\n              helperTextNode={hostHelperText}\n            >\n              {hostInput}\n            </ThemeAwareFormGroupWrapper>\n\n            <ThemeAwareFormGroupWrapper\n              label=\"Port\"\n              fieldId=\"mr-port\"\n              isRequired\n              helperTextNode={portHelperText}\n            >\n              {portInput}\n            </ThemeAwareFormGroupWrapper>\n\n            <ThemeAwareFormGroupWrapper\n              label=\"Username\"\n              fieldId=\"mr-username\"\n              isRequired\n              helperTextNode={usernameHelperText}\n            >\n              {userNameInput}\n            </ThemeAwareFormGroupWrapper>\n\n            <ThemeAwareFormGroupWrapper\n              label=\"Password\"\n              fieldId=\"mr-password\"\n              isRequired\n              helperTextNode={passwordHelperText}\n            >\n              {passwordInput}\n            </ThemeAwareFormGroupWrapper>\n\n            <ThemeAwareFormGroupWrapper\n              label=\"Database\"\n              fieldId=\"mr-database\"\n              isRequired\n              helperTextNode={databaseHelperText}\n            >\n              {databaseInput}\n            </ThemeAwareFormGroupWrapper>\n\n            {/* ... Optional TLS section ... */}\n          </FormSection>\n\n          {error && (\n            <FormGroup>\n              <Alert variant=\"danger\" isInline title={error.message} data-testid=\"mr-error\" />\n            </FormGroup>\n          )}\n        </Form>\n      </ModalBody>\n      <ModalFooter>\n        <Button key=\"create-button\" variant=\"primary\" isDisabled={!canSubmit()} onClick={onSubmit}>\n          Create\n        </Button>\n        <Button key=\"cancel-button\" variant=\"secondary\" onClick={onBeforeClose}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default CreateModal;\n","import React from 'react';\nimport { Button, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { ModelRegistryKind, RoleBindingKind, Table, FetchStateObject } from 'mod-arch-shared';\nimport { modelRegistryColumns } from './columns';\nimport ModelRegistriesTableRow from './ModelRegistriesTableRow';\nimport DeleteModelRegistryModal from './DeleteModelRegistryModal';\nimport CreateModal from './CreateModal';\n\ntype ModelRegistriesTableProps = {\n  modelRegistries: ModelRegistryKind[];\n  refresh: () => Promise<unknown>;\n  roleBindings: FetchStateObject<RoleBindingKind[]>;\n  onCreateModelRegistryClick: () => void;\n};\n\nconst ModelRegistriesTable: React.FC<ModelRegistriesTableProps> = ({\n  modelRegistries,\n  roleBindings,\n  refresh,\n  onCreateModelRegistryClick,\n}) => {\n  const [editRegistry, setEditRegistry] = React.useState<ModelRegistryKind>();\n  const [deleteRegistry, setDeleteRegistry] = React.useState<ModelRegistryKind>();\n  return (\n    <>\n      <Table\n        data-testid=\"model-registries-table\"\n        data={modelRegistries}\n        columns={modelRegistryColumns}\n        toolbarContent={\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"create-model-registry-button\"\n                  variant=\"primary\"\n                  onClick={onCreateModelRegistryClick}\n                >\n                  Create model registry\n                </Button>\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        }\n        rowRenderer={(mr) => (\n          <ModelRegistriesTableRow\n            key={mr.metadata.name}\n            modelRegistry={mr}\n            roleBindings={roleBindings}\n            onEditRegistry={() => setEditRegistry(mr)}\n            onDeleteRegistry={() => setDeleteRegistry(mr)}\n          />\n        )}\n        variant=\"compact\"\n      />\n      {editRegistry ? (\n        <CreateModal onClose={() => setEditRegistry(undefined)} refresh={refresh} />\n      ) : null}\n      {deleteRegistry ? (\n        <DeleteModelRegistryModal\n          modelRegistry={deleteRegistry}\n          onClose={() => setDeleteRegistry(undefined)}\n          refresh={refresh}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default ModelRegistriesTable;\n","import React from 'react';\nimport {\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { ProjectObjectType, TitleWithIcon, ApplicationsPage } from 'mod-arch-shared';\nimport { useQueryParamNamespaces } from 'mod-arch-core';\n// import { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport useModelRegistriesSettings from '~/app/hooks/useModelRegistriesSetting';\nimport useModelRegistryRoleBindings from '~/app/pages/modelRegistrySettings/useModelRegistryRoleBindings';\nimport ModelRegistriesTable from './ModelRegistriesTable';\nimport CreateModal from './CreateModal';\n\nconst ModelRegistrySettings: React.FC = () => {\n  const queryParams = useQueryParamNamespaces();\n  const [\n    modelRegistries,\n    mrloaded,\n    loadError,\n    // refreshModelRegistries\n  ] = useModelRegistriesSettings(queryParams);\n  const roleBindings = useModelRegistryRoleBindings(queryParams);\n  const [createModalOpen, setCreateModalOpen] = React.useState(false);\n  // TODO: [Midstream] Implement this when adding logic for rules review\n  // const { refreshRulesReview } = React.useContext(ModelRegistrySelectorContext);\n\n  const loaded = mrloaded && roleBindings.loaded;\n\n  // TODO: implement when refreshModelRegistries() and refreshRulesReview() are added\n  // const refreshAll = React.useCallback(\n  //   () => Promise.all([refreshModelRegistries(), refreshRulesReview()]),\n  //   [refreshModelRegistries, refreshRulesReview],\n  // );\n\n  return (\n    <>\n      <ApplicationsPage\n        title={\n          <TitleWithIcon\n            title=\"Model Registry Settings\"\n            objectType={ProjectObjectType.modelRegistrySettings}\n          />\n        }\n        description={\n          <Stack hasGutter>\n            <StackItem>\n              Manage model registry settings for all users in your organization.\n            </StackItem>\n            <StackItem>\n              <Divider />\n            </StackItem>\n          </Stack>\n        }\n        loaded={loaded}\n        loadError={loadError}\n        errorMessage=\"Unable to load model registries.\"\n        empty={modelRegistries.length === 0}\n        emptyStatePage={\n          <EmptyState\n            headingLevel=\"h5\"\n            icon={PlusCircleIcon}\n            titleText=\"No model registries\"\n            variant={EmptyStateVariant.lg}\n            data-testid=\"mr-settings-empty-state\"\n          >\n            <EmptyStateBody>\n              To get started, create a model registry. You can manage permissions after creation.\n            </EmptyStateBody>\n          </EmptyState>\n        }\n        provideChildrenPadding\n      >\n        <ModelRegistriesTable\n          modelRegistries={modelRegistries}\n          roleBindings={roleBindings}\n          onCreateModelRegistryClick={() => {\n            setCreateModalOpen(true);\n          }}\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          refresh={() => Promise.resolve()}\n        />\n      </ApplicationsPage>\n      {createModalOpen ? (\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        <CreateModal onClose={() => setCreateModalOpen(false)} refresh={() => Promise.resolve()} />\n      ) : null}\n    </>\n  );\n};\n\nexport default ModelRegistrySettings;\n","export enum RoleBindingPermissionsRBType {\n  USER = 'User',\n  GROUP = 'Group',\n}\n\nexport enum RoleBindingPermissionsRoleType {\n  EDIT = 'edit',\n  ADMIN = 'admin',\n  DEFAULT = 'default',\n  CUSTOM = 'custom',\n}\n","import { useFetchState, APIOptions, FetchStateCallbackPromise } from 'mod-arch-core';\nimport React from 'react';\nimport { getNamespaces } from '~/app/api/k8s';\nimport { NamespaceKind } from '~/app/shared/components/types';\n\nexport const useNamespaces = (): [NamespaceKind[], boolean, Error | undefined] => {\n  const callback = React.useCallback<FetchStateCallbackPromise<NamespaceKind[]>>(\n    (opts: APIOptions) => getNamespaces('')(opts),\n    [],\n  );\n  const [namespaces, loaded, error] = useFetchState<NamespaceKind[]>(callback, []);\n\n  return [namespaces, loaded, error];\n};\n","import { capitalize } from '@patternfly/react-core';\nimport { RoleBindingKind } from 'mod-arch-shared';\nimport { patchRoleBinding } from '~/app/api/k8s';\nimport { getDisplayNameFromK8sResource } from '~/app/shared/components/utils';\nimport { ProjectKind, NamespaceKind } from '~/app/shared/components/types';\nimport { RoleBindingPermissionsRBType, RoleBindingPermissionsRoleType } from './types';\n\nexport const filterRoleBindingSubjects = (\n  roleBindings: RoleBindingKind[],\n  type: RoleBindingPermissionsRBType,\n): RoleBindingKind[] =>\n  roleBindings.filter(\n    (roles) =>\n      roles.subjects[0]?.kind === type &&\n      !(roles.metadata.labels?.['opendatahub.io/rb-project-subject'] === 'true'),\n  );\n\nexport const castRoleBindingPermissionsRoleType = (\n  role: string,\n): RoleBindingPermissionsRoleType => {\n  if (role === RoleBindingPermissionsRoleType.ADMIN) {\n    return RoleBindingPermissionsRoleType.ADMIN;\n  }\n  if (role === RoleBindingPermissionsRoleType.EDIT) {\n    return RoleBindingPermissionsRoleType.EDIT;\n  }\n  if (role.includes('registry-user')) {\n    return RoleBindingPermissionsRoleType.DEFAULT;\n  }\n  return RoleBindingPermissionsRoleType.CUSTOM;\n};\n\nexport const firstSubject = (\n  roleBinding: RoleBindingKind,\n  isProjectSubject?: boolean,\n  project?: ProjectKind[],\n): string =>\n  (isProjectSubject && project\n    ? namespaceToProjectDisplayName(\n        roleBinding.subjects[0]?.name.replace(/^system:serviceaccounts:/, ''),\n        project,\n      )\n    : roleBinding.subjects[0]?.name) || '';\n\nexport const roleLabel = (value: RoleBindingPermissionsRoleType): string => {\n  if (value === RoleBindingPermissionsRoleType.EDIT) {\n    return 'Contributor';\n  }\n  return capitalize(value);\n};\n\nexport const isCurrentUserChanging = (\n  roleBinding: RoleBindingKind | undefined,\n  currentUsername: string,\n): boolean => {\n  if (!roleBinding) {\n    return false;\n  }\n  return currentUsername === roleBinding.subjects[0].name;\n};\n\nexport const tryPatchRoleBinding = async (\n  oldRBObject: RoleBindingKind,\n  newRBObject: RoleBindingKind,\n): Promise<boolean> => {\n  // Trying to patch roleRef will always fail\n  if (oldRBObject.roleRef.name !== newRBObject.roleRef.name) {\n    return false;\n  }\n  try {\n    await patchRoleBinding('', { namespace: oldRBObject.metadata.namespace, dryRun: true })(\n      {},\n      newRBObject,\n      oldRBObject.metadata.name,\n    );\n  } catch {\n    return false;\n  }\n  try {\n    // Actual patch\n    await patchRoleBinding('', { namespace: oldRBObject.metadata.namespace, dryRun: false })(\n      {},\n      newRBObject,\n      oldRBObject.metadata.name,\n    );\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const namespaceToProjectDisplayName = (\n  namespace: string,\n  projects: ProjectKind[],\n): string => {\n  const project = projects.find((p) => p.metadata.name === namespace);\n  return project ? getDisplayNameFromK8sResource(project) : namespace;\n};\n\nexport const projectDisplayNameToNamespace = (\n  displayName: string,\n  projects: ProjectKind[],\n): string => {\n  const project = projects.find(\n    (p) => p.metadata.annotations?.['openshift.io/display-name'] === displayName,\n  );\n  return project?.metadata.name || displayName;\n};\n\n// New utility functions for NamespaceKind\n/**\n * Get the display name for a namespace.\n * @param namespaceName The name of the namespace\n * @param namespaces Array of NamespaceKind objects\n * @returns The display name or namespace name if not found\n */\nexport const namespaceToDisplayName = (\n  namespaceName: string,\n  namespaces: NamespaceKind[],\n): string => namespaces.find((ns) => ns.name === namespaceName)?.displayName || namespaceName;\n\n/**\n * Find a namespace by its display name.\n * @param displayName The display name to search for\n * @param namespaces Array of NamespaceKind objects\n * @returns The namespace name or the display name if not found\n */\nexport const displayNameToNamespace = (displayName: string, namespaces: NamespaceKind[]): string =>\n  namespaces.find((ns) => ns.displayName === displayName)?.name || displayName;\n","import { K8sResourceCommon, genRandomChars } from 'mod-arch-shared';\nimport { K8sCondition, K8sDSGResource } from '~/app/shared/components/types';\n\nexport const PreInstalledName = 'Pre-installed';\n\nexport const isOOTB = (resource: K8sResourceCommon): boolean =>\n  !!resource.metadata?.labels?.['platform.opendatahub.io/part-of'];\nexport const isK8sDSGResource = (x?: K8sResourceCommon): x is K8sDSGResource =>\n  x?.metadata?.name != null;\nexport const getDisplayNameFromK8sResource = (resource: K8sDSGResource): string =>\n  resource.metadata.annotations?.['openshift.io/display-name'] || resource.metadata.name;\nexport const getResourceNameFromK8sResource = (resource: K8sDSGResource): string =>\n  resource.metadata.name;\nexport const getDescriptionFromK8sResource = (resource: K8sDSGResource): string =>\n  resource.metadata.annotations?.['openshift.io/description'] || '';\nexport const getCreatorFromK8sResource = (resource: K8sDSGResource): string =>\n  isOOTB(resource)\n    ? PreInstalledName\n    : resource.metadata.annotations?.['opendatahub.io/username'] || 'unknown';\n\ntype AdditionalCriteriaForTranslation = {\n  /**\n   * If pure digits, prevent it with this safe string.\n   * Also used when we translate to nothing, uses prefix & generated value.\n   * Note: Do not exceed maxLength otherwise it will replace content with it\n   */\n  safeK8sPrefix?: string;\n  /** If the safe prefix is to be statically applied */\n  staticPrefix?: boolean;\n  /**\n   * Cap the characters allowed.\n   * Note: This value can be problematic at very short sizes (< 3)\n   */\n  maxLength?: number;\n};\ntype AdditionalCriteriaApplied = Record<\n  keyof AdditionalCriteriaForTranslation | 'autoGenerated',\n  boolean\n>;\n\n/**\n * Converts a display name to a k8s safe variant.\n * Provide additional criteria to help trim the value\n */\nexport const translateDisplayNameForK8sAndReport = (\n  name: string,\n  { safeK8sPrefix, staticPrefix, maxLength }: AdditionalCriteriaForTranslation = {},\n): [string, AdditionalCriteriaApplied] => {\n  const appliedCriteria: AdditionalCriteriaApplied = {\n    autoGenerated: false,\n    safeK8sPrefix: false,\n    maxLength: false,\n    staticPrefix: false,\n  };\n\n  let translatedName = name\n    .trim()\n    .toLowerCase()\n    .replace(/\\s/g, '-') // spaces to dashes\n    .replace(/[^a-z0-9-]/g, '') // remove inverse of good k8s characters\n    .replace(/^-*/, '') // remove any leading dashes\n    .replace(/-*$/, '') // remove any trailing dashes\n    .replace(/[-]+/g, '-'); // simplify double dashes ('A - B' turns into 'a---b' where 'a-b' is enough)\n\n  /** Allows constant length checks -- modifies translatedName & appliedCriteria */\n  const keepLength = () => {\n    if (maxLength && translatedName.length > maxLength) {\n      // Avoid too long\n      translatedName = translatedName.slice(0, maxLength); // shorten to length\n      appliedCriteria.maxLength = true;\n    }\n\n    // Trim out extra dashes that come with truncation\n    translatedName = translatedName.replace(/-*$/, '');\n  };\n\n  keepLength();\n\n  if (safeK8sPrefix) {\n    if (staticPrefix && translatedName) {\n      if (!translatedName.startsWith(safeK8sPrefix)) {\n        translatedName = `${safeK8sPrefix}${translatedName}`;\n      }\n      appliedCriteria.safeK8sPrefix = true;\n      appliedCriteria.staticPrefix = true;\n    } else if (/^\\d+/.test(translatedName)) {\n      // Avoid names that start with a digit\n      translatedName = `${safeK8sPrefix}${translatedName}`;\n      appliedCriteria.safeK8sPrefix = true;\n    }\n  }\n\n  keepLength();\n\n  if (name.trim().length > 0 && translatedName.trim().length === 0) {\n    // We trimmed it down to nothing, generate a new value\n    translatedName = `${safeK8sPrefix || 'gen-'}${genRandomChars()}`;\n    appliedCriteria.autoGenerated = true;\n    if (safeK8sPrefix) {\n      appliedCriteria.safeK8sPrefix = true;\n    }\n  }\n\n  keepLength();\n\n  return [translatedName, appliedCriteria];\n};\n\n/**\n * Simplified if you don't care what happened.\n * @see translateDisplayNameForK8sAndReport\n */\nexport const translateDisplayNameForK8s = (\n  name: string,\n  additionalCriteria: AdditionalCriteriaForTranslation = {},\n): string => translateDisplayNameForK8sAndReport(name, additionalCriteria)[0];\n\nexport const isValidK8sName = (\n  name?: string,\n  regExp = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/,\n): boolean => name === undefined || (name.length > 0 && regExp.test(name));\n\ntype ResourceWithConditions = K8sResourceCommon & { status?: { conditions?: K8sCondition[] } };\n\nexport const getConditionForType = (\n  resource: ResourceWithConditions,\n  type: string,\n): K8sCondition | undefined => resource.status?.conditions?.find((c) => c.type === type);\n\nexport const isConditionInStatus = (\n  resource: ResourceWithConditions,\n  type: string,\n  status: string,\n): boolean => getConditionForType(resource, type)?.status === status;\n","import * as React from 'react';\nimport { RoleBindingSubject, TypeaheadSelect } from 'mod-arch-shared';\nimport { useNamespaces } from '~/app/hooks/useNamespaces';\n\ntype RoleBindingPermissionsNameInputProps = {\n  subjectKind: RoleBindingSubject['kind'];\n  value: string;\n  onChange?: (selection: string) => void;\n  onClear?: () => void;\n  placeholderText?: string;\n  typeAhead?: string[];\n  isProjectSubject?: boolean;\n};\n\nexport const RoleBindingPermissionsNameInput: React.FC<RoleBindingPermissionsNameInputProps> = ({\n  subjectKind,\n  value,\n  onChange,\n  onClear,\n  placeholderText,\n  typeAhead,\n  isProjectSubject,\n}) => {\n  const [namespaces] = useNamespaces();\n\n  const selectOptions = React.useMemo(() => {\n    let options: Array<{ value: string; content: string }> = [];\n\n    if (subjectKind === 'Group' && typeAhead) {\n      options = typeAhead.map((name) => ({ value: name, content: name }));\n    }\n\n    if (isProjectSubject) {\n      const namespaceOptions = namespaces.map((namespace) => ({\n        value: namespace.name,\n        content: namespace.displayName || namespace.name,\n      }));\n      options = [...options, ...namespaceOptions];\n    }\n\n    // If we've selected an option that doesn't exist via isCreatable, include it in the options so it remains selected\n    if (value && !options.some((option) => option.value === value)) {\n      options.push({ value, content: value });\n    }\n\n    return options;\n  }, [subjectKind, typeAhead, isProjectSubject, namespaces, value]);\n\n  return (\n    <TypeaheadSelect\n      dataTestId={`role-binding-name-select ${value}`}\n      isScrollable\n      selectOptions={selectOptions}\n      selected={value}\n      isCreatable\n      onClearSelection={onClear}\n      onSelect={(_ev, selectedValue) => {\n        if (typeof selectedValue === 'string') {\n          onChange?.(selectedValue);\n        }\n      }}\n      placeholder={placeholderText || `Enter ${subjectKind.toLowerCase()} name`}\n      createOptionMessage={(newValue) => `Select \"${newValue}\"`}\n    />\n  );\n};\n","import React from 'react';\nimport { SimpleSelect } from 'mod-arch-shared';\nimport { SimpleSelectOption } from 'mod-arch-shared/dist/components/SimpleSelect';\nimport { RoleBindingPermissionsRoleType } from './types';\nimport { castRoleBindingPermissionsRoleType, roleLabel } from './utils';\n\ntype RoleBindingPermissionsPermissionSelectionProps = {\n  selection: RoleBindingPermissionsRoleType;\n  permissionOptions: {\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }[];\n  onSelect: (roleType: RoleBindingPermissionsRoleType) => void;\n};\n\nconst RoleBindingPermissionsPermissionSelection: React.FC<\n  RoleBindingPermissionsPermissionSelectionProps\n> = ({ selection, onSelect, permissionOptions }) => (\n  <SimpleSelect\n    isFullWidth\n    options={permissionOptions.map(\n      (option): SimpleSelectOption => ({\n        ...option,\n        label: roleLabel(option.type),\n        key: option.type,\n      }),\n    )}\n    value={selection}\n    toggleLabel={roleLabel(selection)}\n    onChange={(newSelection) => {\n      onSelect(castRoleBindingPermissionsRoleType(newSelection));\n    }}\n    popperProps={{ direction: 'down' }}\n    previewDescription={false}\n  />\n);\n\nexport default RoleBindingPermissionsPermissionSelection;\n","// // TODO: Move this code to shared library once the migration completes.\nimport * as React from 'react';\nimport {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  TextInput,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n} from '@patternfly/react-core';\n\ntype DeleteModalProps = {\n  title: string;\n  onClose: () => void;\n  deleting: boolean;\n  onDelete: () => void;\n  deleteName: string;\n  submitButtonLabel?: string;\n  error?: Error;\n  children: React.ReactNode;\n  testId?: string;\n  genericLabel?: boolean;\n};\n\nconst DeleteModal: React.FC<DeleteModalProps> = ({\n  children,\n  title,\n  onClose,\n  deleting,\n  onDelete,\n  deleteName,\n  error,\n  submitButtonLabel = 'Delete',\n  testId,\n  genericLabel,\n}) => {\n  const [value, setValue] = React.useState('');\n\n  const deleteNameSanitized = React.useMemo(\n    () => deleteName.trim().replace(/\\s+/g, ' '),\n    [deleteName],\n  );\n\n  const onBeforeClose = (deleted: boolean) => {\n    if (deleted) {\n      onDelete();\n    } else {\n      onClose();\n    }\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={() => onBeforeClose(false)}\n      variant=\"small\"\n      data-testid={testId || 'delete-modal'}\n    >\n      <ModalHeader title={title} titleIconVariant=\"warning\" />\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>{children}</StackItem>\n\n          <StackItem>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsSm' }}>\n              <FlexItem>\n                Type <strong>{deleteNameSanitized}</strong> to confirm\n                {genericLabel ? '' : ' deletion'}:\n              </FlexItem>\n\n              <TextInput\n                id=\"delete-modal-input\"\n                data-testid=\"delete-modal-input\"\n                aria-label=\"Delete modal input\"\n                value={value}\n                onChange={(_e, newValue) => setValue(newValue)}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter' && value.trim() === deleteNameSanitized && !deleting) {\n                    onDelete();\n                  }\n                }}\n              />\n            </Flex>\n          </StackItem>\n\n          {error && (\n            <StackItem>\n              <Alert\n                data-testid=\"delete-model-error-message-alert\"\n                title={`Error deleting ${deleteNameSanitized}`}\n                isInline\n                variant=\"danger\"\n              >\n                {error.message}\n              </Alert>\n            </StackItem>\n          )}\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          key=\"delete-button\"\n          variant=\"danger\"\n          isLoading={deleting}\n          isDisabled={deleting || value.trim() !== deleteNameSanitized}\n          onClick={() => onBeforeClose(true)}\n        >\n          {submitButtonLabel}\n        </Button>\n        <Button key=\"cancel-button\" variant=\"link\" onClick={() => onBeforeClose(false)}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default DeleteModal;\n","import * as React from 'react';\nimport DeleteModal from '~/app/shared/components/DeleteModal';\n\ntype RoleBindingPermissionsChangeModalProps = {\n  onClose: () => void;\n  onEdit: () => void;\n  onDelete: () => void;\n  isDeleting: boolean;\n  roleName?: string;\n};\n\nconst RoleBindingPermissionsChangeModal: React.FC<RoleBindingPermissionsChangeModalProps> = ({\n  onClose,\n  onEdit,\n  onDelete,\n  isDeleting,\n  roleName,\n}) => {\n  const textToShow = isDeleting ? 'Delete' : 'Edit';\n  const [submitted, setSubmitted] = React.useState(false);\n  return (\n    <DeleteModal\n      title={`Confirm ${textToShow.toLowerCase()}`}\n      onClose={onClose}\n      deleting={submitted}\n      onDelete={() => {\n        setSubmitted(true);\n        if (isDeleting) {\n          onDelete();\n        } else {\n          onEdit();\n        }\n      }}\n      deleteName={roleName || 'delete'}\n      submitButtonLabel={isDeleting ? 'Delete' : 'Save'}\n      genericLabel\n    >\n      Are you sure you want to {isDeleting ? 'delete' : 'edit'} permissions for{' '}\n      <strong>{roleName || 'this role binding'}</strong>? {isDeleting ? 'Deleting' : 'Editing'}{' '}\n      these permissions may result in loss of access to this resource.\n    </DeleteModal>\n  );\n};\n\nexport default RoleBindingPermissionsChangeModal;\n","import * as React from 'react';\nimport { ActionsColumn, Tbody, Td, Tr } from '@patternfly/react-table';\nimport {\n  Button,\n  Split,\n  SplitItem,\n  Timestamp,\n  TimestampTooltipVariant,\n  Truncate,\n  Skeleton,\n} from '@patternfly/react-core';\nimport { CheckIcon, TimesIcon, EllipsisVIcon } from '@patternfly/react-icons';\nimport {\n  DashboardPopupIconButton,\n  relativeTime,\n  RoleBindingKind,\n  RoleBindingSubject,\n} from 'mod-arch-shared';\nimport useUser from '~/app/hooks/useUser';\nimport { useNamespaces } from '~/app/hooks/useNamespaces';\nimport { NamespaceKind } from '~/app/shared/components/types';\nimport {\n  castRoleBindingPermissionsRoleType,\n  roleLabel,\n  isCurrentUserChanging,\n  displayNameToNamespace,\n} from './utils';\nimport { RoleBindingPermissionsRoleType } from './types';\nimport { RoleBindingPermissionsNameInput } from './RoleBindingPermissionsNameInput';\nimport RoleBindingPermissionsPermissionSelection from './RoleBindingPermissionsPermissionSelection';\nimport RoleBindingPermissionsChangeModal from './RoleBindingPermissionsChangeModal';\n\ntype RoleBindingPermissionsTableRowProps = {\n  roleBindingObject?: RoleBindingKind;\n  subjectKind: RoleBindingSubject['kind'];\n  defaultRoleBindingName?: string;\n  permissionOptions: {\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }[];\n  typeAhead?: string[];\n  isProjectSubject?: boolean;\n  isEditing?: boolean;\n  isAdding?: boolean;\n  onChange?: (subjectName: string, roleRefName: string) => void;\n  onCancel?: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n};\n\nconst defaultValueName = (\n  obj: RoleBindingKind,\n  isProjectSubject?: boolean,\n  namespaces?: NamespaceKind[],\n): string =>\n  isProjectSubject && namespaces\n    ? namespaces.find(\n        (ns) => ns.name === obj.subjects[0]?.name.replace(/^system:serviceaccounts:/, ''),\n      )?.displayName ||\n      obj.subjects[0]?.name ||\n      ''\n    : obj.subjects[0]?.name || '';\n\nconst defaultValueRole = (obj: RoleBindingKind) =>\n  castRoleBindingPermissionsRoleType(obj.roleRef.name);\n\nconst RoleBindingPermissionsTableRow: React.FC<RoleBindingPermissionsTableRowProps> = ({\n  roleBindingObject: obj,\n  subjectKind,\n  isEditing,\n  isAdding,\n  defaultRoleBindingName,\n  permissionOptions,\n  typeAhead,\n  isProjectSubject,\n  onChange,\n  onCancel,\n  onEdit,\n  onDelete,\n}) => {\n  const [namespaces, namespacesLoaded] = useNamespaces();\n  const currentUser = useUser();\n  const isCurrentUserBeingChanged = isCurrentUserChanging(obj, currentUser.userId);\n  const [roleBindingName, setRoleBindingName] = React.useState(() => {\n    if (isAdding || !obj) {\n      return '';\n    }\n    return defaultValueName(obj, isProjectSubject, namespaces);\n  });\n  const [roleBindingRoleRef, setRoleBindingRoleRef] =\n    React.useState<RoleBindingPermissionsRoleType>(() => {\n      if (isAdding || !obj) {\n        return permissionOptions[0]?.type;\n      }\n      return defaultValueRole(obj);\n    });\n  const [isLoading, setIsLoading] = React.useState(false);\n  const createdDate = obj?.metadata.creationTimestamp\n    ? new Date(obj.metadata.creationTimestamp)\n    : null;\n  const isDefaultGroup = obj?.metadata.name === defaultRoleBindingName;\n  const [showModal, setShowModal] = React.useState(false);\n  const [isDeleting, setIsDeleting] = React.useState(false);\n\n  // Update name when namespaces load or change\n  React.useEffect(() => {\n    if (namespacesLoaded && obj && !isAdding && isProjectSubject) {\n      setRoleBindingName(defaultValueName(obj, isProjectSubject, namespaces));\n    }\n  }, [namespacesLoaded, obj, isAdding, isProjectSubject, namespaces]);\n\n  //Sync local state with props if exiting edit mode\n  React.useEffect(() => {\n    if (!isEditing && obj) {\n      setRoleBindingName(\n        isProjectSubject\n          ? defaultValueName(obj, isProjectSubject, namespaces)\n          : defaultValueName(obj),\n      );\n      setRoleBindingRoleRef(defaultValueRole(obj));\n    }\n  }, [obj, isEditing, isProjectSubject, namespaces]);\n\n  const showLoadingSkeleton = isProjectSubject && !namespacesLoaded;\n\n  return (\n    <>\n      <Tbody>\n        <Tr>\n          <Td dataLabel=\"Username\">\n            {isEditing || isAdding ? (\n              showLoadingSkeleton ? (\n                <Skeleton height=\"36px\" />\n              ) : (\n                <RoleBindingPermissionsNameInput\n                  subjectKind={subjectKind}\n                  value={roleBindingName}\n                  onChange={(selection) => setRoleBindingName(selection)}\n                  onClear={() => setRoleBindingName('')}\n                  placeholderText={`Type ${\n                    isProjectSubject\n                      ? 'project name'\n                      : subjectKind === 'Group'\n                        ? 'group name'\n                        : 'username'\n                  }`}\n                  typeAhead={typeAhead}\n                  isProjectSubject={isProjectSubject}\n                />\n              )\n            ) : showLoadingSkeleton ? (\n              <Skeleton height=\"20px\" />\n            ) : (\n              <Truncate content={roleBindingName} />\n            )}\n          </Td>\n          <Td dataLabel=\"Permission\">\n            {isEditing || isAdding ? (\n              <RoleBindingPermissionsPermissionSelection\n                permissionOptions={permissionOptions}\n                selection={roleBindingRoleRef}\n                onSelect={(roleType) => setRoleBindingRoleRef(roleType)}\n              />\n            ) : (\n              roleLabel(roleBindingRoleRef)\n            )}\n          </Td>\n          <Td dataLabel=\"Date added\">\n            {createdDate && !isAdding ? (\n              <Timestamp\n                date={createdDate}\n                tooltip={{\n                  variant: TimestampTooltipVariant.default,\n                }}\n              >\n                {relativeTime(Date.now(), createdDate.getTime())}\n              </Timestamp>\n            ) : null}\n          </Td>\n          <Td isActionCell>\n            {isEditing || isAdding ? (\n              <Split hasGutter>\n                <SplitItem>\n                  <Button\n                    data-testid=\"save-rolebinding-button\"\n                    aria-label=\"Save role binding edits\"\n                    variant=\"link\"\n                    icon={<CheckIcon />}\n                    onClick={async () => {\n                      if (!roleBindingName) {\n                        return;\n                      }\n                      setIsLoading(true);\n                      try {\n                        await onChange?.(\n                          isProjectSubject\n                            ? `system:serviceaccounts:${displayNameToNamespace(\n                                roleBindingName,\n                                namespaces,\n                              )}`\n                            : roleBindingName,\n                          roleBindingRoleRef,\n                        );\n                      } finally {\n                        setIsLoading(false);\n                      }\n                    }}\n                    isLoading={isLoading}\n                    isDisabled={isLoading || !roleBindingName || showLoadingSkeleton}\n                  />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    aria-label=\"Cancel role binding edits\"\n                    variant=\"plain\"\n                    icon={<TimesIcon />}\n                    onClick={() => {\n                      onCancel?.();\n                    }}\n                    isDisabled={isLoading}\n                  />\n                </SplitItem>\n              </Split>\n            ) : (\n              <ActionsColumn\n                items={[\n                  {\n                    title: 'Edit',\n                    onClick: () => {\n                      if (isCurrentUserBeingChanged) {\n                        setIsDeleting(false);\n                        setShowModal(true);\n                      } else {\n                        onEdit?.();\n                      }\n                    },\n                    isDisabled: showLoadingSkeleton,\n                  },\n                  {\n                    isSeparator: true,\n                  },\n                  {\n                    title: 'Delete',\n                    onClick: () => {\n                      if (isCurrentUserBeingChanged) {\n                        setIsDeleting(true);\n                        setShowModal(true);\n                      } else {\n                        onDelete?.();\n                      }\n                    },\n                    isDisabled: isDefaultGroup || showLoadingSkeleton,\n                  },\n                ]}\n                rowData={{}}\n                actionsToggle={(props) => (\n                  <DashboardPopupIconButton\n                    icon={<EllipsisVIcon />}\n                    aria-label=\"Role binding table row actions\"\n                    {...props}\n                  />\n                )}\n              />\n            )}\n          </Td>\n        </Tr>\n      </Tbody>\n      {showModal && (\n        <RoleBindingPermissionsChangeModal\n          onClose={() => setShowModal(false)}\n          onEdit={() => {\n            setShowModal(false);\n            const finalSubjectName = isProjectSubject\n              ? `system:serviceaccounts:${displayNameToNamespace(roleBindingName, namespaces)}`\n              : roleBindingName;\n            onChange?.(finalSubjectName, roleBindingRoleRef);\n          }}\n          onDelete={() => {\n            setShowModal(false);\n            onDelete?.();\n          }}\n          isDeleting={isDeleting}\n          roleName={roleBindingName}\n        />\n      )}\n    </>\n  );\n};\n\nexport default RoleBindingPermissionsTableRow;\n","import { RoleBindingKind, SortableData } from 'mod-arch-shared';\nimport { firstSubject } from './utils';\n\nexport const columnsRoleBindingPermissions: SortableData<RoleBindingKind>[] = [\n  {\n    field: 'username',\n    label: 'Name',\n    width: 30,\n    sortable: (a, b) => firstSubject(a).localeCompare(firstSubject(b)),\n  },\n  {\n    field: 'permission',\n    label: 'Permission',\n    width: 20,\n    sortable: (a, b) => a.roleRef.name.localeCompare(b.roleRef.name),\n  },\n  {\n    field: 'date',\n    label: 'Date added',\n    width: 25,\n    sortable: (a, b) =>\n      new Date(b.metadata.creationTimestamp || 0).getTime() -\n      new Date(a.metadata.creationTimestamp || 0).getTime(),\n  },\n];\n","import * as React from 'react';\nimport {\n  K8sResourceCommon,\n  K8sStatus,\n  RoleBindingKind,\n  RoleBindingRoleRef,\n  RoleBindingSubject,\n  Table,\n} from 'mod-arch-shared';\nimport { generateRoleBindingPermissions } from '~/app/api/k8s';\nimport RoleBindingPermissionsTableRow from './RoleBindingPermissionsTableRow';\nimport { columnsRoleBindingPermissions } from './data';\nimport { RoleBindingPermissionsRoleType } from './types';\nimport { firstSubject, tryPatchRoleBinding } from './utils';\n\ntype RoleBindingPermissionsTableProps = {\n  ownerReference?: K8sResourceCommon;\n  subjectKind: RoleBindingSubject['kind'];\n  namespace: string;\n  roleRefKind: RoleBindingRoleRef['kind'];\n  roleRefName?: RoleBindingRoleRef['name'];\n  labels?: { [key: string]: string };\n  isProjectSubject?: boolean;\n  defaultRoleBindingName?: string;\n  permissions: RoleBindingKind[];\n  permissionOptions: {\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }[];\n  isAdding: boolean;\n  typeAhead?: string[];\n  createRoleBinding: (roleBinding: RoleBindingKind) => Promise<RoleBindingKind>;\n  deleteRoleBinding: (name: string, namespace: string) => Promise<K8sStatus>;\n  onDismissNewRow: () => void;\n  onError: (error: React.ReactNode) => void;\n  refresh: () => void;\n};\n\nconst RoleBindingPermissionsTable: React.FC<RoleBindingPermissionsTableProps> = ({\n  ownerReference,\n  subjectKind,\n  namespace,\n  roleRefKind,\n  roleRefName,\n  labels,\n  isProjectSubject,\n  defaultRoleBindingName,\n  permissions,\n  permissionOptions,\n  isAdding,\n  typeAhead,\n  createRoleBinding,\n  deleteRoleBinding,\n  onDismissNewRow,\n  onError,\n  refresh,\n}) => {\n  const [editCell, setEditCell] = React.useState<string[]>([]);\n\n  const createProjectRoleBinding = async (\n    newRBObject: RoleBindingKind,\n    oldRBObject?: RoleBindingKind,\n  ) => {\n    if (isAdding) {\n      // Add new role binding\n      createRoleBinding(newRBObject)\n        .then(() => {\n          onDismissNewRow();\n          refresh();\n        })\n        .catch((e) => {\n          onError(<>{e}</>);\n        });\n    } else if (oldRBObject) {\n      const patchSucceeded = await tryPatchRoleBinding(oldRBObject, newRBObject);\n      if (patchSucceeded) {\n        setEditCell((prev) => prev.filter((cell) => cell !== oldRBObject.metadata.name));\n        onDismissNewRow();\n        refresh();\n      } else {\n        createRoleBinding(newRBObject)\n          .then(() => {\n            deleteRoleBinding(oldRBObject.metadata.name, oldRBObject.metadata.namespace)\n              .then(() => refresh())\n              .catch((e) => {\n                onError(<>{e}</>);\n                setEditCell((prev) => prev.filter((cell) => cell !== oldRBObject.metadata.name));\n              });\n          })\n          .then(() => {\n            onDismissNewRow();\n            refresh();\n          })\n          .catch((e) => {\n            onError(<>{e}</>);\n            setEditCell((prev) => prev.filter((cell) => cell !== oldRBObject.metadata.name));\n          });\n      }\n    }\n  };\n  return (\n    <Table\n      variant=\"compact\"\n      data={permissions}\n      data-testid={`role-binding-table ${subjectKind}`}\n      columns={columnsRoleBindingPermissions}\n      disableRowRenderSupport\n      footerRow={() =>\n        isAdding ? (\n          <RoleBindingPermissionsTableRow\n            key=\"add-permissions-row\"\n            subjectKind={subjectKind}\n            permissionOptions={permissionOptions}\n            isProjectSubject={isProjectSubject}\n            typeAhead={typeAhead}\n            isEditing={false}\n            isAdding\n            onChange={(subjectName, rbRoleRefName) => {\n              const newRBObject = generateRoleBindingPermissions(\n                namespace,\n                subjectKind,\n                subjectName,\n                roleRefName || rbRoleRefName,\n                roleRefKind,\n                labels,\n                ownerReference,\n              );\n              createRoleBinding(newRBObject)\n                .then(() => {\n                  onDismissNewRow();\n                  refresh();\n                })\n                .catch((e) => onError(e?.message || e || 'Unknown error'));\n            }}\n            onCancel={onDismissNewRow}\n          />\n        ) : null\n      }\n      rowRenderer={(rb) => (\n        <RoleBindingPermissionsTableRow\n          isProjectSubject={isProjectSubject}\n          defaultRoleBindingName={defaultRoleBindingName}\n          key={rb.metadata.name || ''}\n          permissionOptions={permissionOptions}\n          roleBindingObject={rb}\n          subjectKind={subjectKind}\n          isEditing={\n            firstSubject(rb, isProjectSubject) === '' || editCell.includes(rb.metadata.name)\n          }\n          isAdding={false}\n          typeAhead={typeAhead}\n          onChange={(subjectName, rbRoleRefName) => {\n            const newRBObject = generateRoleBindingPermissions(\n              namespace,\n              subjectKind,\n              subjectName,\n              roleRefName || rbRoleRefName,\n              roleRefKind,\n              labels,\n              ownerReference,\n            );\n            createProjectRoleBinding(newRBObject, rb);\n            refresh();\n          }}\n          onDelete={() => {\n            deleteRoleBinding(rb.metadata.name, rb.metadata.namespace).then(() => refresh());\n          }}\n          onEdit={() => {\n            setEditCell((prev) => [...prev, rb.metadata.name]);\n          }}\n          onCancel={() => {\n            setEditCell((prev) => prev.filter((cell) => cell !== rb.metadata.name));\n            onDismissNewRow();\n          }}\n        />\n      )}\n    />\n  );\n};\nexport default RoleBindingPermissionsTable;\n","import * as React from 'react';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  HeaderIcon,\n  K8sResourceCommon,\n  K8sStatus,\n  ProjectObjectType,\n  RoleBindingKind,\n  RoleBindingRoleRef,\n  RoleBindingSubject,\n} from 'mod-arch-shared';\nimport { RoleBindingPermissionsRBType, RoleBindingPermissionsRoleType } from './types';\nimport RoleBindingPermissionsTable from './RoleBindingPermissionsTable';\n\nexport type RoleBindingPermissionsTableSectionAltProps = {\n  ownerReference?: K8sResourceCommon;\n  roleBindings: RoleBindingKind[];\n  projectName: string;\n  roleRefKind: RoleBindingRoleRef['kind'];\n  roleRefName?: RoleBindingRoleRef['name'];\n  subjectKind: RoleBindingSubject['kind'];\n  permissionOptions: {\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }[];\n  typeAhead?: string[];\n  createRoleBinding: (roleBinding: RoleBindingKind) => Promise<RoleBindingKind>;\n  deleteRoleBinding: (name: string, namespace: string) => Promise<K8sStatus>;\n  refresh: () => void;\n  typeModifier: string;\n  defaultRoleBindingName?: string;\n  labels?: { [key: string]: string };\n  isProjectSubject?: boolean;\n};\n\nconst RoleBindingPermissionsTableSection: React.FC<RoleBindingPermissionsTableSectionAltProps> = ({\n  ownerReference,\n  roleBindings,\n  projectName,\n  roleRefKind,\n  roleRefName,\n  subjectKind,\n  permissionOptions,\n  typeAhead,\n  createRoleBinding,\n  deleteRoleBinding,\n  refresh,\n  typeModifier,\n  defaultRoleBindingName,\n  labels,\n  isProjectSubject,\n}) => {\n  const [addField, setAddField] = React.useState(false);\n  const [error, setError] = React.useState<React.ReactNode>();\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Flex\n          direction={{ default: 'row' }}\n          gap={{ default: 'gapSm' }}\n          alignItems={{ default: 'alignItemsCenter' }}\n          className={typeModifier}\n        >\n          <HeaderIcon\n            type={\n              isProjectSubject\n                ? ProjectObjectType.project\n                : subjectKind === RoleBindingPermissionsRBType.USER\n                  ? ProjectObjectType.user\n                  : ProjectObjectType.group\n            }\n          />\n          <FlexItem>\n            <Title id={`user-permission-${typeModifier}`} headingLevel=\"h2\" size=\"xl\">\n              {isProjectSubject\n                ? 'Projects'\n                : subjectKind === RoleBindingPermissionsRBType.USER\n                  ? 'Users'\n                  : 'Groups'}\n            </Title>\n          </FlexItem>\n        </Flex>\n      </StackItem>\n      <StackItem>\n        <RoleBindingPermissionsTable\n          ownerReference={ownerReference}\n          defaultRoleBindingName={defaultRoleBindingName}\n          permissions={roleBindings}\n          permissionOptions={permissionOptions}\n          namespace={projectName}\n          roleRefKind={roleRefKind}\n          roleRefName={roleRefName}\n          isProjectSubject={isProjectSubject}\n          labels={labels}\n          subjectKind={subjectKind}\n          typeAhead={typeAhead}\n          isAdding={addField}\n          onDismissNewRow={() => {\n            setAddField(false);\n            setError(undefined);\n          }}\n          onError={(e) => {\n            setError(e);\n          }}\n          refresh={() => {\n            refresh();\n          }}\n          createRoleBinding={createRoleBinding}\n          deleteRoleBinding={deleteRoleBinding}\n        />\n      </StackItem>\n      {error && (\n        <StackItem>\n          <Alert\n            isInline\n            variant=\"danger\"\n            title=\"Error\"\n            actionClose={<AlertActionCloseButton onClose={() => setError(undefined)} />}\n          >\n            <p>{error}</p>\n          </Alert>\n        </StackItem>\n      )}\n      <StackItem>\n        <Button\n          data-testid={`add-button ${typeModifier}`}\n          variant=\"link\"\n          isInline\n          icon={<PlusCircleIcon />}\n          iconPosition=\"left\"\n          onClick={() => setAddField(true)}\n          style={{ paddingLeft: 'var(--pf-t--global--spacer--lg)' }}\n        >\n          {isProjectSubject\n            ? 'Add project'\n            : subjectKind === RoleBindingPermissionsRBType.USER\n              ? 'Add user'\n              : 'Add group'}\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default RoleBindingPermissionsTableSection;\n","import * as React from 'react';\nimport {\n  Alert,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  FetchStateObject,\n  GroupKind,\n  K8sResourceCommon,\n  K8sStatus,\n  RoleBindingKind,\n  RoleBindingRoleRef,\n} from 'mod-arch-shared';\nimport RoleBindingPermissionsTableSection from './RoleBindingPermissionsTableSection';\nimport { RoleBindingPermissionsRBType, RoleBindingPermissionsRoleType } from './types';\nimport { filterRoleBindingSubjects } from './utils';\n\ntype RoleBindingPermissionsProps = {\n  ownerReference?: K8sResourceCommon;\n  roleBindingPermissionsRB: FetchStateObject<RoleBindingKind[]>;\n  defaultRoleBindingName?: string;\n  permissionOptions: {\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }[];\n  createRoleBinding: (roleBinding: RoleBindingKind) => Promise<RoleBindingKind>;\n  deleteRoleBinding: (name: string, namespace: string) => Promise<K8sStatus>;\n  projectName: string;\n  roleRefKind: RoleBindingRoleRef['kind'];\n  roleRefName?: RoleBindingRoleRef['name'];\n  labels?: { [key: string]: string };\n  description: React.ReactElement | string;\n  groups: GroupKind[];\n  isGroupFirst?: boolean;\n  isProjectSubject?: boolean;\n};\n\nconst RoleBindingPermissions: React.FC<RoleBindingPermissionsProps> = ({\n  ownerReference,\n  roleBindingPermissionsRB,\n  defaultRoleBindingName,\n  permissionOptions,\n  projectName,\n  createRoleBinding,\n  deleteRoleBinding,\n  roleRefKind,\n  roleRefName,\n  labels,\n  description,\n  groups,\n  isGroupFirst = false,\n  isProjectSubject = false,\n}) => {\n  const {\n    data: roleBindings,\n    loaded,\n    error: loadError,\n    refresh: refreshRB,\n  } = roleBindingPermissionsRB;\n  if (loadError) {\n    return (\n      <EmptyState\n        headingLevel=\"h2\"\n        icon={ExclamationCircleIcon}\n        titleText=\"There was an issue loading permissions.\"\n        variant={EmptyStateVariant.lg}\n        data-id=\"error-empty-state\"\n        id=\"permissions\"\n      >\n        <EmptyStateBody>{loadError.message}</EmptyStateBody>\n      </EmptyState>\n    );\n  }\n\n  if (!loaded) {\n    return (\n      <EmptyState\n        headingLevel=\"h2\"\n        titleText=\"Loading\"\n        variant={EmptyStateVariant.lg}\n        data-id=\"loading-empty-state\"\n        id=\"permissions\"\n      >\n        <Spinner size=\"xl\" />\n      </EmptyState>\n    );\n  }\n\n  const userTable = (\n    <RoleBindingPermissionsTableSection\n      ownerReference={ownerReference}\n      defaultRoleBindingName={defaultRoleBindingName}\n      projectName={projectName}\n      roleRefKind={roleRefKind}\n      roleRefName={roleRefName}\n      labels={labels}\n      permissionOptions={permissionOptions}\n      roleBindings={filterRoleBindingSubjects(roleBindings, RoleBindingPermissionsRBType.USER)}\n      subjectKind={RoleBindingPermissionsRBType.USER}\n      refresh={refreshRB}\n      typeModifier=\"user\"\n      createRoleBinding={createRoleBinding}\n      deleteRoleBinding={deleteRoleBinding}\n      isProjectSubject={isProjectSubject}\n    />\n  );\n\n  const groupTable = (\n    <RoleBindingPermissionsTableSection\n      ownerReference={ownerReference}\n      defaultRoleBindingName={defaultRoleBindingName}\n      projectName={projectName}\n      roleRefKind={roleRefKind}\n      roleRefName={roleRefName}\n      permissionOptions={permissionOptions}\n      labels={labels}\n      roleBindings={filterRoleBindingSubjects(roleBindings, RoleBindingPermissionsRBType.GROUP)}\n      subjectKind={RoleBindingPermissionsRBType.GROUP}\n      refresh={refreshRB}\n      typeAhead={\n        groups.length > 0 ? groups.map((group: GroupKind) => group.metadata.name) : undefined\n      }\n      typeModifier=\"group\"\n      createRoleBinding={createRoleBinding}\n      deleteRoleBinding={deleteRoleBinding}\n      isProjectSubject={isProjectSubject}\n    />\n  );\n\n  return (\n    <PageSection\n      hasBodyWrapper={false}\n      isFilled\n      aria-label=\"project-sharing-page-section\"\n      id=\"permissions\"\n    >\n      <Stack hasGutter>\n        <Alert variant=\"warning\" title=\"Warning\" isInline>\n          Changing user or group permissions may remove their access to this resource.\n        </Alert>\n        <StackItem>{description}</StackItem>\n        <StackItem>{isGroupFirst ? groupTable : userTable}</StackItem>\n        <StackItem>{isGroupFirst ? userTable : groupTable}</StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport default RoleBindingPermissions;\n","import { RoleBindingKind, K8sStatus } from 'mod-arch-shared';\nimport { createRoleBinding, deleteRoleBinding } from '~/app/api/k8s';\n\nexport const createModelRegistryRoleBindingWrapper = async (\n  roleBinding: RoleBindingKind,\n): Promise<RoleBindingKind> => {\n  const hostPath = window.location.origin;\n  return createRoleBinding(hostPath, {})({}, roleBinding);\n};\n\nexport const deleteModelRegistryRoleBindingWrapper = async (\n  name: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  namespace: string,\n): Promise<K8sStatus> => {\n  const hostPath = window.location.origin;\n  await deleteRoleBinding(hostPath, {})({}, name);\n  return {\n    apiVersion: 'v1',\n    kind: 'Status',\n    status: 'Success' as const,\n    code: 200,\n    message: 'Role binding deleted successfully',\n    reason: 'Deleted',\n  };\n};\n\nexport const createModelRegistryNamespaceRoleBinding = async (\n  roleBinding: RoleBindingKind,\n): Promise<RoleBindingKind> => {\n  const hostPath = window.location.origin;\n  // Add namespace-specific labels\n  const namespaceRoleBinding = {\n    ...roleBinding,\n    metadata: {\n      ...roleBinding.metadata,\n      labels: {\n        ...roleBinding.metadata.labels,\n        'app.kubernetes.io/component': 'model-registry-namespace-rbac',\n      },\n    },\n  };\n  return createRoleBinding(hostPath, {})({}, namespaceRoleBinding);\n};\n\nexport const deleteModelRegistryNamespaceRoleBinding = async (\n  name: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  namespace: string,\n): Promise<K8sStatus> => {\n  const hostPath = window.location.origin;\n  await deleteRoleBinding(hostPath, {})({}, name);\n  return {\n    apiVersion: 'v1',\n    kind: 'Status',\n    status: 'Success' as const,\n    code: 200,\n    message: 'Namespace role binding deleted successfully',\n    reason: 'Deleted',\n  };\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { GroupKind, RoleBindingKind, FetchStateObject, ModelRegistryKind } from 'mod-arch-shared';\nimport { useQueryParamNamespaces } from 'mod-arch-core';\nimport { useGroups } from '~/app/hooks/useGroups';\nimport useModelRegistryRoleBindings from '~/app/pages/modelRegistrySettings/useModelRegistryRoleBindings';\nimport { useModelRegistryCR } from '~/app/hooks/useModelRegistryCR';\nimport { RoleBindingPermissionsRoleType } from '~/app/pages/settings/roleBinding/types';\nimport {\n  createModelRegistryRoleBindingWrapper,\n  deleteModelRegistryRoleBindingWrapper,\n  createModelRegistryNamespaceRoleBinding,\n  deleteModelRegistryNamespaceRoleBinding,\n} from '~/app/pages/settings/roleBindingUtils';\n\nexport interface ModelRegistryPermissionsConfig {\n  activeTabKey: number;\n  setActiveTabKey: (key: number) => void;\n  ownerReference: ModelRegistryKind | undefined;\n  groups: GroupKind[];\n  filteredRoleBindings: RoleBindingKind[];\n  filteredNamespaceRoleBindings: RoleBindingKind[];\n  queryParams: ReturnType<typeof useQueryParamNamespaces>;\n  mrName: string | undefined;\n  modelRegistryNamespace: string;\n  roleBindings: FetchStateObject<RoleBindingKind[]>;\n  userPermissionOptions: Array<{\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }>;\n  namespacePermissionOptions: Array<{\n    type: RoleBindingPermissionsRoleType;\n    description: string;\n  }>;\n  createUserRoleBinding: typeof createModelRegistryRoleBindingWrapper;\n  deleteUserRoleBinding: typeof deleteModelRegistryRoleBindingWrapper;\n  createNamespaceRoleBinding: typeof createModelRegistryNamespaceRoleBinding;\n  deleteNamespaceRoleBinding: typeof deleteModelRegistryNamespaceRoleBinding;\n  userRoleRefName: string;\n  namespaceRoleRefName: string;\n  shouldShowError: boolean;\n  shouldRedirect: boolean;\n}\n\nexport const useModelRegistryPermissionsLogic = (): ModelRegistryPermissionsConfig => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n  const modelRegistryNamespace = 'model-registry'; // TODO: This is a placeholder\n  const [ownerReference, setOwnerReference] = React.useState<ModelRegistryKind>();\n  const queryParams = useQueryParamNamespaces();\n  const [groups] = useGroups(queryParams);\n  const roleBindings = useModelRegistryRoleBindings(queryParams);\n  const { mrName } = useParams<{ mrName: string }>();\n  const [modelRegistryCR, crLoaded] = useModelRegistryCR(modelRegistryNamespace, queryParams);\n\n  const filteredRoleBindings = roleBindings.data.filter(\n    (rb: RoleBindingKind) => rb.metadata.labels?.['app.kubernetes.io/name'] === mrName,\n  );\n\n  const filteredNamespaceRoleBindings = roleBindings.data.filter(\n    (rb: RoleBindingKind) =>\n      rb.metadata.labels?.['app.kubernetes.io/name'] === mrName &&\n      rb.metadata.labels?.['app.kubernetes.io/component'] === 'model-registry-namespace-rbac',\n  );\n\n  React.useEffect(() => {\n    if (modelRegistryCR) {\n      setOwnerReference(modelRegistryCR);\n    } else {\n      setOwnerReference(undefined);\n    }\n  }, [modelRegistryCR]);\n\n  const userPermissionOptions = [\n    {\n      type: RoleBindingPermissionsRoleType.DEFAULT,\n      description: 'Default role for all users',\n    },\n  ];\n\n  const namespacePermissionOptions = [\n    {\n      type: RoleBindingPermissionsRoleType.DEFAULT,\n      description: 'Default namespace access role',\n    },\n  ];\n\n  const userRoleRefName = `registry-user-${mrName ?? ''}`;\n  const namespaceRoleRefName = `registry-namespace-${mrName ?? ''}`;\n\n  const shouldShowError = !queryParams.namespace;\n  const shouldRedirect =\n    (roleBindings.loaded && filteredRoleBindings.length === 0) || (crLoaded && !modelRegistryCR);\n\n  return {\n    activeTabKey,\n    setActiveTabKey,\n    ownerReference,\n    groups,\n    filteredRoleBindings,\n    filteredNamespaceRoleBindings,\n    queryParams,\n    mrName,\n    modelRegistryNamespace,\n    roleBindings,\n    userPermissionOptions,\n    namespacePermissionOptions,\n    createUserRoleBinding: createModelRegistryRoleBindingWrapper,\n    deleteUserRoleBinding: deleteModelRegistryRoleBindingWrapper,\n    createNamespaceRoleBinding: createModelRegistryNamespaceRoleBinding,\n    deleteNamespaceRoleBinding: deleteModelRegistryNamespaceRoleBinding,\n    userRoleRefName,\n    namespaceRoleRefName,\n    shouldShowError,\n    shouldRedirect,\n  };\n};\n","import { GroupKind } from 'mod-arch-shared';\nimport { useFetchState, APIOptions, FetchStateCallbackPromise } from 'mod-arch-core';\nimport React from 'react';\nimport { getGroups } from '~/app/api/k8s';\n\nexport const useGroups = (\n  queryParams: Record<string, unknown> = {},\n): [GroupKind[], boolean, Error | undefined] => {\n  const callback = React.useCallback<FetchStateCallbackPromise<GroupKind[]>>(\n    (opts: APIOptions) => getGroups('', queryParams)(opts),\n    [queryParams],\n  );\n  const [groups, loaded, error] = useFetchState<GroupKind[]>(callback, []);\n\n  return [groups, loaded, error];\n};\n","import React from 'react';\nimport {\n  APIOptions,\n  useFetchState,\n  useDeepCompareMemoize,\n  FetchState,\n  FetchStateCallbackPromise,\n} from 'mod-arch-core';\nimport { ModelRegistryKind } from 'mod-arch-shared';\nimport { getModelRegistrySettings } from '~/app/api/k8s';\n\nconst useModelRegistryCR = (\n  name: string,\n  queryParams: Record<string, unknown>,\n): FetchState<ModelRegistryKind | null> => {\n  const paramsMemo = useDeepCompareMemoize(queryParams);\n  const getModelRegistry = React.useMemo(\n    () => getModelRegistrySettings('', paramsMemo),\n    [paramsMemo],\n  );\n\n  const callback = React.useCallback<FetchStateCallbackPromise<ModelRegistryKind | null>>(\n    (opts: APIOptions) =>\n      name ? getModelRegistry(opts, name).then((res) => res.modelRegistry) : Promise.resolve(null),\n    [getModelRegistry, name],\n  );\n\n  return useFetchState(callback, null, { initialPromisePurity: true });\n};\n\nexport { useModelRegistryCR };\n","import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport RoleBindingPermissions from '~/app/pages/settings/roleBinding/RoleBindingPermissions';\nimport { useModelRegistryPermissionsLogic } from './useModelRegistryPermissionsLogic';\n\nconst ModelRegistriesPermissions: React.FC = () => {\n  const {\n    activeTabKey,\n    setActiveTabKey,\n    ownerReference,\n    groups,\n    filteredRoleBindings,\n    filteredNamespaceRoleBindings,\n    mrName,\n    modelRegistryNamespace,\n    roleBindings,\n    userPermissionOptions,\n    namespacePermissionOptions,\n    createUserRoleBinding,\n    deleteUserRoleBinding,\n    createNamespaceRoleBinding,\n    deleteNamespaceRoleBinding,\n    userRoleRefName,\n    namespaceRoleRefName,\n    shouldShowError,\n    shouldRedirect,\n  } = useModelRegistryPermissionsLogic();\n\n  if (shouldShowError) {\n    return (\n      <EmptyState\n        headingLevel=\"h2\"\n        icon={ExclamationCircleIcon}\n        titleText=\"There was an issue loading permissions.\"\n        variant={EmptyStateVariant.lg}\n        data-id=\"error-empty-state\"\n        id=\"permissions\"\n      >\n        <EmptyStateBody>\n          Unable to load model registry permissions. Refresh the page to try again.\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  }\n\n  if (shouldRedirect) {\n    return <Navigate to=\"/modelRegistrySettings\" replace />;\n  }\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Manage {mrName} permissions\n      </Title>\n      <Tabs\n        activeKey={activeTabKey}\n        onSelect={(event, tabIndex) => setActiveTabKey(Number(tabIndex))}\n        usePageInsets\n        id=\"manage-permissions-tabs\"\n      >\n        <Tab eventKey={0} title={<TabTitleText>Users</TabTitleText>}>\n          <RoleBindingPermissions\n            ownerReference={ownerReference}\n            roleBindingPermissionsRB={{ ...roleBindings, data: filteredRoleBindings }}\n            groups={groups}\n            createRoleBinding={createUserRoleBinding}\n            deleteRoleBinding={deleteUserRoleBinding}\n            projectName={modelRegistryNamespace}\n            permissionOptions={userPermissionOptions}\n            description=\"To enable access for all cluster users, add system:authenticated to the group list.\"\n            roleRefKind=\"ClusterRole\"\n            roleRefName={userRoleRefName}\n          />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Namespaces</TabTitleText>}>\n          <RoleBindingPermissions\n            ownerReference={ownerReference}\n            roleBindingPermissionsRB={{ ...roleBindings, data: filteredNamespaceRoleBindings }}\n            groups={[]} // Namespaces don't use groups\n            createRoleBinding={createNamespaceRoleBinding}\n            deleteRoleBinding={deleteNamespaceRoleBinding}\n            projectName={modelRegistryNamespace}\n            permissionOptions={namespacePermissionOptions}\n            description=\"Grant access to model registry for service accounts within specific namespaces.\"\n            roleRefKind=\"ClusterRole\"\n            roleRefName={namespaceRoleRefName}\n            isProjectSubject\n          />\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\n\nexport default ModelRegistriesPermissions;\n","import * as React from 'react';\nimport { Navigate, Routes, Route } from 'react-router-dom';\nimport ModelRegistrySettings from '~/app/pages/settings/ModelRegistrySettings';\nimport ModelRegistriesManagePermissions from '~/app/pages/modelRegistrySettings/ModelRegistriesPermissions';\n\nconst ModelRegistrySettingsRoutes: React.FC = () => (\n  <Routes>\n    <Route path=\"/\" element={<ModelRegistrySettings />} />\n    <Route path=\"permissions/:mrName\" element={<ModelRegistriesManagePermissions />} />\n    <Route path=\"*\" element={<Navigate to=\"/\" />} />\n  </Routes>\n);\n\nexport default ModelRegistrySettingsRoutes;\n"],"names":["user","useContext","queryParams","paramsMemo","useDeepCompareMemoize","listModelRegistriesSettings","callback","opts","useFetchState","initialPromisePurity","fetchRoleBindings","catch","e","response","status","Error","data","loaded","error","refresh","refreshRate","modelRegistryColumns","field","label","sortable","a","b","metadata","name","localeCompare","width","ModelRegistryStatus","ModelRegistryStatusLabel","ConditionStatus","ModelRegistryTableRowStatus","conditions","conditionsMap","reduce","acc","condition","type","statusLabel","Progressing","icon","popoverMessages","popoverTitle","Object","values","length","Available","availableCondition","progressCondition","Degraded","degradedCondition","False","messages","message","push","some","includes","True","Degrading","className","Unavailable","IstioAvailable","istioAvailableCondition","GatewayAvailable","gatewayAvailableCondition","isClickable","Label","onClick","isCompact","Popover","headerContent","alertSeverityVariant","headerIcon","bodyContent","Stack","hasGutter","map","index","StackItem","key","modelRegistry","mr","roleBindings","onEditRegistry","onDeleteRegistry","navigate","useNavigate","config","useModularArchContext","deploymentMode","isDeploymentKubeflow","Kubeflow","filteredRoleBindings","filter","rb","labels","annotations","Tr","Td","dataLabel","ResourceNameTooltip","resource","modifier","Tooltip","content","Button","isAriaDisabled","variant","isActionCell","ActionsColumn","items","title","disabled","onClose","isSubmitting","setIsSubmitting","setError","confirmInputValue","setConfirmInputValue","isDisabled","trim","onBeforeClose","undefined","onConfirm","async","namespace","Modal","isOpen","ModalHeader","titleIconVariant","ModalBody","Content","component","TextInput","id","value","onChange","_e","newValue","onKeyDown","event","ModalFooter","DashboardModalFooter","submitLabel","submitButtonVariant","onSubmit","onCancel","isSubmitLoading","isSubmitDisabled","alertTitle","ariaLabelShow","ariaLabelHide","props","isPasswordHidden","setPasswordHidden","InputGroup","InputGroupItem","isFill","password","setPassword","showPassword","isPasswordTouched","setIsPasswordTouched","isRequired","onBlur","validated","FieldGroupHelpLabelIcon","allowEdit","dataTestId","isMUITheme","useThemeContext","textInput","resourceNameFormGroup","FormGroup","fieldId","FormFieldset","HelperText","HelperTextItem","onDataChange","descriptionLabel","nameLabel","nameHelperText","hideDescription","showK8sField","setShowK8sField","nameInput","nameFormGroup","isInline","descriptionTextInput","description","descriptionTextArea","TextArea","resizeOrientation","descriptionFormGroup","children","helperTextNode","hasError","nameDesc","setNameDesc","host","setHost","port","setPort","username","setUsername","database","setDatabase","isHostTouched","setIsHostTouched","isPortTouched","setIsPortTouched","isUsernameTouched","setIsUsernameTouched","isDatabaseTouched","setIsDatabaseTouched","setShowPassword","hasContent","hostInput","hostHelperText","portInput","portHelperText","userNameInput","usernameHelperText","passwordInput","passwordHelperText","databaseInput","databaseHelperText","ModalVariant","medium","Form","FormSection","Alert","payload","spec","mysql","Number","window","location","origin","modelRegistries","onCreateModelRegistryClick","editRegistry","setEditRegistry","deleteRegistry","setDeleteRegistry","Table","columns","toolbarContent","Toolbar","ToolbarContent","ToolbarItem","rowRenderer","useQueryParamNamespaces","mrloaded","loadError","useModelRegistriesSetting","createModalOpen","setCreateModalOpen","ApplicationsPage","A","TitleWithIcon","objectType","modelRegistrySettings","Divider","errorMessage","empty","emptyStatePage","EmptyState","headingLevel","titleText","EmptyStateVariant","lg","EmptyStateBody","provideChildrenPadding","Promise","resolve","RoleBindingPermissionsRBType","RoleBindingPermissionsRoleType","useNamespaces","namespaces","filterRoleBindingSubjects","roles","subjects","kind","castRoleBindingPermissionsRoleType","role","ADMIN","EDIT","DEFAULT","CUSTOM","firstSubject","roleBinding","isProjectSubject","project","namespaceToProjectDisplayName","replace","roleLabel","capitalize","projects","find","p","displayNameToNamespace","displayName","ns","RoleBindingPermissionsNameInput","subjectKind","onClear","placeholderText","typeAhead","selectOptions","options","namespaceOptions","option","TypeaheadSelect","isScrollable","selected","isCreatable","onClearSelection","onSelect","_ev","selectedValue","placeholder","toLowerCase","createOptionMessage","selection","permissionOptions","SimpleSelect","isFullWidth","toggleLabel","newSelection","popperProps","direction","previewDescription","deleting","onDelete","deleteName","submitButtonLabel","testId","genericLabel","setValue","deleteNameSanitized","deleted","Flex","default","spaceItems","FlexItem","isLoading","onEdit","isDeleting","roleName","textToShow","submitted","setSubmitted","defaultValueName","obj","defaultValueRole","roleRef","roleBindingObject","isEditing","isAdding","defaultRoleBindingName","namespacesLoaded","currentUser","useUser","isCurrentUserBeingChanged","currentUsername","userId","roleBindingName","setRoleBindingName","roleBindingRoleRef","setRoleBindingRoleRef","setIsLoading","createdDate","creationTimestamp","Date","isDefaultGroup","showModal","setShowModal","setIsDeleting","showLoadingSkeleton","Tbody","Skeleton","height","Truncate","roleType","Timestamp","date","tooltip","TimestampTooltipVariant","now","getTime","Split","SplitItem","isSeparator","rowData","actionsToggle","DashboardPopupIconButton","finalSubjectName","columnsRoleBindingPermissions","ownerReference","roleRefKind","roleRefName","permissions","createRoleBinding","deleteRoleBinding","onDismissNewRow","onError","editCell","setEditCell","createProjectRoleBinding","newRBObject","oldRBObject","then","patchSucceeded","dryRun","tryPatchRoleBinding","prev","cell","disableRowRenderSupport","footerRow","subjectName","rbRoleRefName","projectName","typeModifier","addField","setAddField","gap","alignItems","HeaderIcon","USER","group","Title","size","actionClose","AlertActionCloseButton","iconPosition","style","paddingLeft","roleBindingPermissionsRB","groups","isGroupFirst","refreshRB","Spinner","userTable","groupTable","GROUP","PageSection","hasBodyWrapper","isFilled","createModelRegistryRoleBindingWrapper","hostPath","deleteModelRegistryRoleBindingWrapper","apiVersion","code","reason","createModelRegistryNamespaceRoleBinding","namespaceRoleBinding","deleteModelRegistryNamespaceRoleBinding","useModelRegistryPermissionsLogic","activeTabKey","setActiveTabKey","modelRegistryNamespace","setOwnerReference","useGroups","mrName","useParams","modelRegistryCR","crLoaded","getModelRegistry","res","useModelRegistryCR","filteredNamespaceRoleBindings","userPermissionOptions","namespacePermissionOptions","userRoleRefName","namespaceRoleRefName","shouldShowError","shouldRedirect","createUserRoleBinding","deleteUserRoleBinding","createNamespaceRoleBinding","deleteNamespaceRoleBinding","Navigate","to","Tabs","activeKey","tabIndex","usePageInsets","Tab","eventKey","TabTitleText","Routes","Route","path","element"],"sourceRoot":""}