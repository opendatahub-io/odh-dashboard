{"version":3,"file":"180.bundle.js","mappings":"0KAGIA,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,GAAI,yzBAA0zB,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,8DAA8D,MAAQ,GAAG,SAAW,wOAAwO,eAAiB,CAAC,w9BAAw9B,WAAa,MAEjrE,S,mCCcO,MAAMC,EACXC,GAEmB,6CAAnBA,EAAUC,I,gIChBL,MAAMC,EACX,CAACC,EAAkBC,EAAuC,CAAC,IAC3D,CACEC,EACAC,EACAC,EAMAC,KAEA,MAAMC,EAAY,CAChBC,OAAQJ,KACLC,KACCC,GAAiB,CAAEG,EAAGH,MACvBJ,GAEL,OAAO,QAAmB,QAAQD,EAAU,UAAWM,EAAWJ,IAAOO,KAAMC,IAC7E,IAAI,QAAoCA,GACtC,OAAOA,EAASC,KAElB,MAAM,IAAIC,MAAM,8BAITC,EACX,CAACb,EAAkBC,EAAuC,CAAC,IAC1DC,IACC,QAAmB,QAAQF,EAAU,WAAYC,EAAaC,IAAOO,KAAMC,IACzE,IAAI,QAAqCA,GACvC,OAAOA,EAASC,KAElB,MAAM,IAAIC,MAAM,6BAGTE,EACX,CAACd,EAAkBC,EAAuC,CAAC,IAC3D,CAACC,EAAkBC,EAAkBY,KACnC,QACE,QAAQf,EAAU,YAAYG,YAAmBY,IAAad,EAAaC,IAC3EO,KAAMC,IACN,IAAI,QAAgCA,GAClC,OAAOA,EAASC,KAElB,MAAM,IAAIC,MAAM,6BAGTI,EACX,CAAChB,EAAkBC,EAAuC,CAAC,IAC3D,CAACC,EAAkBC,EAAkBY,KACnC,QACE,QAAQf,EAAU,YAAYG,eAAsBY,IAAad,EAAaC,IAC9EO,KAAMC,IACN,IAAI,QAA4CA,GAC9C,OAAOA,EAASC,KAElB,MAAM,IAAIC,MAAM,6BCrCtB,EAjBgC,CAC9BZ,EACAiB,KAEA,MAAMC,EAAY,gBACfC,IAAiB,CAChBpB,yBAA0BA,EAAyBoB,EAAMF,GACzDJ,eAAgBA,EAAeM,EAAMF,GACrCH,gBAAiBA,EAAgBK,EAAMF,GACvCD,6BAA8BA,EAA6BG,EAAMF,KAEnE,CAACA,IAGH,OAAO,EAAAG,EAAA,GAAYpB,EAAUkB,I,eCHxB,MAAMG,EAAsB,gBAA6C,CAC9EC,sBAAsB,EACtBC,6BAAyBC,EACzBC,eAAgB,KAChBC,oBAAgBF,EAChBG,qBAAsB,OAEtBC,SAAU,CAAEC,cAAc,EAAOC,IAAK,MACtCC,gBAAiB,SAGNC,EAA0E,EACrFC,eAEA,MAAMjC,EAAW,GAAG,YAAkB,qBAChCC,GAAc,EAAAiC,EAAA,MACbN,EAAUG,GAAmB,EAAwB/B,EAAUC,IAC/DwB,EAAgBU,EAAUC,GCnCF,CAC/BR,IAEA,MAAMS,EAAO,gBACVnC,GACM0B,EAASC,aAIPD,EAASE,IAAIjB,eAAeX,GAH1BoC,QAAQC,OAAO,IAAI3B,MAAM,0BAKpC,CAACgB,IAEH,OAAO,EAAAY,EAAA,IACLH,EACA,CAAEI,MAAO,GAAIC,KAAM,EAAGC,SAAU,EAAGC,cAAe,IAClD,CAAEC,sBAAsB,KDmBgBC,CAAkBlB,IACrDF,EAAgBqB,GACrB,gBAA0DvB,GAEtDwB,EAAe,UACnB,KAAM,CACJ1B,qBAAsBa,EACtBZ,wBAAyBa,EACzBX,iBACAC,eAAgBA,QAAkBF,EAClCG,qBAAsBoB,EACtBnB,WACAG,oBAEF,CAACI,EAAUC,EAAOX,EAAgBC,EAAgBE,EAAUG,IAG9D,OACE,gBAACV,EAAoB4B,SAAQ,CAACC,MAAOF,GAAef,I,eExDjD,MAAMkB,EAAkB,CAAChD,EAAW,KAAe,kBAAkBA,I,4FCiB5E,MAsBA,EAtBqE,EACnEiD,SACAC,QACAC,cACAC,aACAtB,WACAuB,kBAEA,kBAAC,EAAAC,WAAU,CACTC,KAAMH,GAAc,KACpBI,UAAWN,EACXO,QAAS,EAAAC,kBAAkBC,GAAE,cAChBV,GAEb,kBAAC,EAAAW,eAAc,KAAET,GAChBrB,EACD,kBAAC,EAAA+B,iBAAgB,KACdR,GAAgB,kBAAC,EAAAS,kBAAiB,KAAET,K,2DCP3C,MAiIA,EAjI8E,EAC5ErD,WACA+D,cACAC,aACAC,WACAC,gBACAC,cAEA,MAAOC,EAAMC,GAAW,cAAe,IAChCC,EAAYC,GAAiB,aAAeP,GAAc,KAC3D,eAAE1C,EAAc,qBAAEE,EAAoB,eAAED,GAC5C,eAAiBL,GACbsD,EAAYlD,GAAgBgB,MAAMmC,KAAMrE,GAAWA,EAAOZ,KAAOQ,IACjE,WAAE0E,IAAe,EAAAC,EAAA,KAEjBC,GAAwB,QAA4BtD,GAyBpDuD,EACJ,kBAAC,EAAAC,SAAQ,CACPC,2BAAyB,EACzBC,OAASC,GACP,kBAAC,EAAAC,WAAU,eACG,kBACZ1F,GAAG,gCACH2F,IAAKF,EAAS,aACH,gBACXG,QAAS,IAAMf,GAASD,GACxBiB,WAAYjB,EACZb,KAAM,kBAAC,KAAU,OAEhBiB,GAAWc,MAGhBC,OAAQnB,EACRoB,YAAa,CAAEC,SAAU,WAEzB,kBAAC,EAAAC,aAAY,KACVd,GAAuBtC,MAAMqD,IAAKvF,GACjC,kBAAC,EAAAwF,aAAY,CACXC,WAAYzF,EAAOZ,KAAO+B,GAAgB/B,GAC1CsG,IAAK1F,EAAOZ,GACZA,GAAIY,EAAOZ,GACX4F,QAAS,KACPf,GAAQ,GACR,MAAM0B,EAAgBnB,EAAsBtC,MAAMmC,KAC/CuB,GAAkBA,EAAcxG,KAAOY,EAAOZ,IAEjDgC,EAAqBuE,GACrBhC,EAAY3D,EAAOZ,MAGpBY,EAAOkF,SAOlB,OAAInB,EACKU,EAIP,kBAAC,EAAAoB,QAAO,KACN,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,KAAI,KACH,kBAAC,EAAAC,mBAAkB,CAACC,WAAW,KAAKC,WAAY,kBAAC,KAAU,OACzD,kBAAC,EAAAC,aAAY,CAAC9C,QAAQ,eAAe+C,IAAK,CAAEC,QAAS,SAAWC,WAAW,UACzE,kBAAC,EAAAC,YAAW,KAAE9B,GACd,kBAAC,EAAA8B,YAAW,KACV,kBAACC,EAAA,EAAqB,CACpBC,WAAW,2CAA0C,aAC1C,4BACXC,UAAU,2BACVC,YAAY,2CACZhE,MAAOuB,EACP0C,MAAO,CACLC,SAAU,SAEZC,SAxEiBnE,IAC/BwB,EAAcxB,IAwEAkB,SArEgB,CAACkD,EAA4CpE,KACvEkB,GACFA,EAASlB,EAAMqE,SAoEHC,QAjFI,KAClB9C,EAAc,IACVL,GACFA,KA+EYkB,QAAS,IAAMf,GAAQ,MAG3B,kBAAC,EAAAsC,YAAW,KACTjC,GACC,kBAAC,EAAA4C,OAAM,CACLC,UAAQ,eACG,qBAAoB,cACnB,sBACZ9D,QAAQ,OACRF,KAAM,kBAAC,KAAc,MACrBiE,aAAa,QACbpC,QApGQ,KACpBnB,GAAYK,EAAW8C,SAAWpD,GACpCC,EAASK,EAAW8C,kBCP1B,EA3BgG,EAC9FK,kBACAzD,aACAC,WACAC,gBACAwD,gBAEA,MAAMC,GAAW,IAAAC,eACXC,GAAS,IAAAC,aACTC,GAAgB,QAAaF,GAEnC,OACE,kBAAC,EAA0B,CACzB7H,SAAU+H,EAAc/H,UAAY,GACpC+D,YAAcvE,IACRA,IAAOuI,EAAc/H,UACvB2H,EAASF,EAAgBjI,GAAM,MAGnCwE,WAAYA,EACZC,SAAUA,EACVC,cAAeA,EACfC,QAASuD,KCdf,EAZkE,EAAGxE,QAAOlD,cAC1E,kBAACgI,EAAA,EAAsB,CACrB9E,MAAOA,GAAS,mBAChB+E,UAAajI,EAAW,kBAAkBA,IAAa,sBAA7C,kBAEV,kBAAC,EAAmC,CAClCyH,gBAAkBjI,GAAewD,EAAgBxD,GACjDkI,WAAS,KC+Gf,EAnGuE,EACrEQ,6BAEA,MAAM,SAAElI,IAAa,IAAA8H,cAEf,eACJxG,EAAc,qBACdH,EAAoB,wBACpBC,EAAuB,eACvBG,EAAc,qBACdC,GACE,aAAiBN,IAEf,WAAEwD,IAAe,EAAAC,EAAA,KAEjBwD,EAAwB7G,GAAgBgB,MAAMmC,KAAMrE,GAAWA,EAAOZ,KAAOQ,GAQnF,GANA,YAAgB,KACVmI,IAA0B5G,GAC5BC,EAAqB2G,IAEtB,CAACA,EAAuB3G,EAAsBD,IAE7CH,EACF,OACE,gBAAC,EAAAgH,SAAQ,KACP,gBAAC,EAAAC,MAAK,CAACnF,MAAM,kCAAkCO,QAAQ,SAAS8D,UAAQ,GACrEnG,EAAwBkH,UAMjC,IAAKnH,EACH,OACE,gBAACoH,EAAAC,EAAgB,CACftF,MAAO,gBAACuF,EAAA,EAAa,CAACvF,MAAM,gBAAgBwF,WAAY,KAAkBC,eAC1ExF,YAAY,+FACZyF,cAAe,KACfC,OAAK,EACLC,eAAgB,gBAAC,EAAAV,SAAQ,mCACzBW,QAAQ,IAKd,IAAIC,EACJ,GAAqC,IAAjC1H,GAAgBgB,MAAM2G,OACxBD,EAAmB,CACjBH,OAAO,EACPC,eACE,gBAAC,EAAsB,CACrB7F,OAAO,4BACPC,MAAOwB,EAAa,yBAA2B,kCAC/CvB,YACEuB,EACI,sEACA,0GAENtB,WAAY,IAEV,uBAAK8F,KAAK,QAAgB,KAAkBC,uBAAwBC,IAAI,KAE1E/F,aAAcqB,EAAa,gBAAC2E,EAAA,EAAY,MAAM,gBAACC,EAAA,EAAmB,QAGtEV,cAAe,UAEZ,KAAI5I,EAWJ,CAEL,MAAMuJ,EAAwBhI,GAAkBD,GAAgBgB,MAAM,GACtE,OAAO,gBAAC,EAAAkH,SAAQ,CAACC,GAAIvB,EAAuBqB,GAAuB/J,IAAM,IAAKkK,SAAO,GACvF,CAfqB,CACnB,MAAMC,EAAqBrI,GAAgBgB,MAAMmC,KAAMrE,GAAWA,EAAOZ,KAAOQ,GAChF,GAAI2J,EAEF,OAAO,gBAAC,EAAAC,OAAM,MAGhBZ,EAAmB,CACjBH,OAAO,EACPC,eAAgB,gBAAC,EAAoB,CAAC9I,SAAUA,IAEpD,CAIA,CAEA,OACE,gBAACuI,EAAAC,EAAgB,CACftF,MAAO,gBAACuF,EAAA,EAAa,CAACvF,MAAM,gBAAgBwF,WAAY,KAAkBC,eAC1ExF,YAAY,+FACZyF,cACE,gBAAC,EAAmC,CAACnB,gBAAkBjI,GAAOwD,EAAgBxD,QAE5EwJ,EACJD,QAAM,EACNc,wBAAsB,K,gDCnHrB,MAAMC,EAAqB,KAChC,MAAM,SAAErI,EAAUG,gBAAiBmI,GAAkB,eAAiB7I,GAEtE,MAAO,CACL6I,mBACGtI,ICRMuI,EAA2B,CACtChK,EACAY,KAEA,MAAM,IAAEe,EAAG,aAAED,GAAiBoI,IAExB5H,EAAO,gBACVnC,GACM2B,EAGA1B,EAGAY,EAGEe,EAAId,6BAA6Bd,EAAMC,EAAUY,GAF/CuB,QAAQC,OAAO,IAAI,KAAc,kBAHjCD,QAAQC,OAAO,IAAI,KAAc,iBAHjCD,QAAQC,OAAO,IAAI3B,MAAM,0BAUpC,CAACkB,EAAKD,EAAc1B,EAAUY,IAEhC,OAAO,EAAAyB,EAAA,IACLH,EACA,CAAEI,MAAO,GAAIC,KAAM,EAAGC,SAAU,EAAGC,cAAe,IAClD,CACEC,sBAAsB,KCD5B,EApB8D,EAC5DuH,QAAQ,GACRC,UACAC,cAEA,gBAAC,EAAAC,WAAU,CAACC,UAAW,EAAGC,WAAS,GAChCL,EAAMtE,IAAK4E,GACV,gBAAC,EAAAC,MAAK,eAAa,sBAAsB1E,IAAKyE,EAAM9G,QAAQ,WACzD8G,IAGJL,GACC,gBAAC,EAAAM,MAAK,CAACC,MAAM,SAASH,WAAS,GAC5BJ,GAGJC,GAAY,gBAAC,EAAAK,MAAK,CAACF,WAAS,GAAEH,I,eCfnC,MAeA,EAfkD,EAAGO,OAAMjB,KAAIkB,YAC7D,gBAAC,EAAArD,OAAM,CACL7D,QAAQ,OAAM,cACDkH,EACbpD,UAAQ,EACRnC,QAAS,KACPwF,OAAOxG,KAAKqF,IAEdlG,KAAM,gBAAC,IAAmB,MAC1BiE,aAAa,OAEZkD,G,uRCVDG,GAAU,CAAC,EAEfA,GAAQC,kBAAoB,KAC5BD,GAAQE,cAAgB,KACxBF,GAAQG,OAAS,UAAc,KAAM,QACrCH,GAAQI,OAAS,KACjBJ,GAAQK,mBAAqB,KAEhB,KAAI,KAASL,IAKJ,MAAW,KAAQM,QAAS,KAAQA,OAAnD,MCtBDC,GAA8C,CAClD,EAAG,EAAAC,gBAAgBC,GACnB,EAAG,EAAAD,gBAAgBE,GACnB,EAAG,EAAAF,gBAAgBG,GACnB,EAAG,EAAAH,gBAAgBI,GACnB,EAAG,EAAAJ,gBAAgBK,GACnB,EAAG,EAAAL,gBAAgBM,IAGRC,GAAoB,CAACC,EAAeC,KAC/C,MAAMC,EAAWC,KAAKC,IAAIJ,EAAQC,EAAa,EAAG,GAClD,OAAOV,GAAWW,ICOpB,GAXoD,EAAGjK,WAAUoK,OAAO,IAAKpF,eAC3E,kBAAC,EAAAQ,OAAM,CACL7D,QAAQ,OACRqD,UAAWA,EACXS,UAAQ,EACRnC,QAAS,IAAe,MAAT8G,GAAgBtB,OAAOxG,KAAK8H,EAAM,SAAU,wBAE1DpK,G,4BCNL,MA8BA,GA9B0D,EAAGA,WAAUqK,UAASrF,gBAC9E,MAAOzB,EAAY+G,IAAiB,IAAAC,WAAS,GACvCC,EAAmBH,EAAQzC,QAAQ,OAAQ,KAAKtC,OAChDmF,EAAoB,aAAe5G,IAAI7D,EAAW0K,GAClD,mBAAqBA,IAAyB,SAAfA,EAAM7M,KAErC,kBAAC,EAAA8M,UAAS,KACR,kBAAC,EAAAC,cAAa,KAAEC,OAAOH,EAAMI,MAAM9K,UAAU4H,QAAQ,OAAQ,QAI5D8C,GAGT,OACE,yBAAK1F,UAAWA,GACd,kBAAC,EAAAQ,OAAM,CACL7D,QAAQ,OACR2B,QAAS,IAAMgH,GAAe/G,GAC9B2B,MAAO,CAAE6F,QAAS,EAAGC,OAAQ,EAAGC,UAAW,SAE1C1H,EAAa,kBAAC,MAAa,MAAM,kBAAC,MAAc,M,IAAMiH,GAExDjH,GACC,kBAAC,EAAA2H,QAAO,CAAChG,MAAO,CAAEiG,WAAY,SAAUC,UAAW,WAAaX,KCpBxE,GAN8D,EAAGzK,WAAUgF,eACzE,kBAAC,EAAA2F,UAAS,CAAC3F,UAAWA,GACpB,kBAAC,EAAA4F,cAAa,KAAE5K,IC0JpB,GA/I0B,EACxBtB,OACA2M,aACArB,aAAa,KAEb,yBAAKhF,UAAU,mBAAkB,cAAcqG,GAC7C,kBAAC,KAAQ,CACPC,WAAY,CACVC,EAAG,EAAGvL,cAAa8K,KACjB,kBAAC,EAAAI,QAAO,CAACM,UAAW,EAAAjC,gBAAgBgC,KAAOT,GACxC9K,GAGLyL,EAAG,EAAGzL,WAAUoK,UAASU,KACvB,kBAAC,GAAa,CAACV,KAAMA,KAAUU,GAC5B9K,GAGL0L,QAAS,EAAG1L,cAAa8K,MACvB,MAAMT,EAAU,aAAesB,QAAQ3L,GAAU2C,KAC9C+H,GAAU,mBAAqBA,IAAyB,YAAfA,EAAM7M,MAE5C+N,EAAU,aAAeD,QAAQ3L,GAAU6L,OAC9CnB,KAAY,mBAAqBA,IAAyB,YAAfA,EAAM7M,OAEpD,OACE,kBAAC,GAAgB,CACfwM,QACEA,GAAW,mBAAqBA,IACM,iBAA3BA,EAAQS,MAAM9K,SACnBqK,EAAQS,MAAM9K,SAEhB,aAEF8K,GAEHc,IAIPvB,QAAS,EAAGrK,cAAa8K,KAAY,kBAAC,EAAAI,QAAO,IAAKJ,GAAQ9K,GAC1D8L,KAAM,EAAGC,OAAM/G,YAAWhF,cAAa8K,MACrC,MAAMgB,EAAO,aAAeH,QAAQ3L,GACjC6D,IAAK6G,GAA4B,iBAAVA,EAAqBA,EAAQ,IACpDsB,KAAK,IACLpE,QAAQ,MAAO,IAElB,IAAKmE,EACH,OACE,0BAAM/G,UAAWA,KAAe8F,GAC7B9K,GAMP,MADc,YAAa+L,GAAyB,QAAjBA,EAAKE,QAE/B,kBAAC,GAAkB,IAAKnB,GAAQgB,GAIvC,0BAAM9G,UAAWA,KAAe8F,GAC7B9K,IAIPwJ,GAAI,EAAGxJ,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGLyJ,GAAI,EAAGzJ,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGL0J,GAAI,EAAG1J,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGL2J,GAAI,EAAG3J,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGL4J,GAAI,EAAG5J,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGL6J,GAAI,EAAG7J,cAAa8K,KAClB,kBAAC,EAAAI,QAAO,CAACM,UAAW1B,GAAkB,EAAGE,MAAiBc,GACvD9K,GAGLkM,WAAY,EAAGlM,cAAa8K,KAC1B,kBAAC,EAAAI,QAAO,CAACM,UAAW,EAAAjC,gBAAgB2C,cAAgBpB,GACjD9K,GAGLmM,GAAI,EAAGnM,cAAa8K,KAClB,kBAAC,EAAAsB,KAAI,CAACZ,UAAU,QAASV,GACtB9K,GAGLqM,GAAI,EAAGrM,cAAa8K,MAGlB,MAAM,KAAEjN,KAASyO,GAASxB,EAC1B,OACE,kBAAC,EAAAsB,KAAI,CAACZ,UAAU,QAASc,GACtBtM,IAIPuM,GAAI,EAAGvM,cAAa8K,KAAY,kBAAC,EAAA0B,SAAQ,IAAK1B,GAAQ9K,GACtDyM,MAAO,EAAGzM,cAAa8K,KAAY,kBAAC4B,EAAA,EAAK,IAAK5B,GAAQ9K,GACtD2M,MAAO,EAAG3M,cAAa8K,KAAY,kBAAC8B,GAAA,EAAK,IAAK9B,GAAQ9K,GACtD6M,MAAO,EAAG7M,cAAa8K,KAAY,kBAACgC,GAAA,EAAK,IAAKhC,GAAQ9K,GACtD+M,GAAI,EAAG/M,cAAa8K,KAAY,kBAACkC,GAAAA,GAAE,IAAKlC,GAAQ9K,GAChDiN,GAAI,EAAGjN,cAAa8K,MAGlB,MAAM,MAAEoC,KAAUZ,GAASxB,EAC3B,OAAO,kBAACqC,GAAAA,GAAE,IAAKb,GAAOtM,IAExBoN,GAAI,EAAGpN,cAAa8K,KAAY,kBAACuC,GAAAA,GAAE,IAAKvC,GAAQ9K,GAChDsN,IAAK,EAAGlG,MAAKE,SAAQwD,KACd1D,EAGE,yBAAKA,IAAKA,EAAKE,IAAKA,GAAO,+BAAiCwD,IAF1D,MAKbyC,cAAe,CAAC,IAAW,IAAoB,KAC/CC,cAAe,CAAC,MAEf9O,I,gBCjIP,MAsFA,GAtF0D,EAAG+O,QAAOxH,oBAClE,MAAOyH,EAAWC,EAAgBC,GAAsB1F,EACtDjC,EAAc/H,UAAY,GAC1B2P,mBAAmB,GAAG5H,EAAcnH,cAGtC,OACE,gBAAC,EAAAgP,YAAW,CAACC,gBAAgB,EAAOC,UAAQ,GAC1C,gBAAC,EAAAC,QAAO,CAACC,WAAS,EAACC,WAAS,EAACC,cAAY,GACvC,gBAAC,EAAAC,eAAc,KACb,gBAAC,EAAAnD,QAAO,KACN,yCACA,mCAAe,0BAA0BuC,EAAMpM,aAAe,kBAC9D,yCACEoM,EAAMa,QAAU,qBAAGtJ,UAAW,IAAKuJ,mBAAiB,kBAEvDd,EAAMa,QACL,gBAAC,GAAiB,CAChB5P,KAAM+O,EAAMa,OACZjD,WAAW,sBACXrB,WAAY,KAIlB,gBAAC,EAAAwE,aAAY,KACX,gBAAC,EAAAC,gBAAe,CAACC,eAAa,GAC5B,gBAAC,EAAAC,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,eACpB,gBAAC,EAAAC,2BAA0B,KACzB,gBAAC,EAAkB,CAAC1G,MAAOsF,EAAMtF,OAAS,GAAIC,QAASqF,EAAMrF,YAGjE,gBAAC,EAAAuG,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,gBACpB,gBAAC,EAAY,CACXhG,KAAK,YACLjB,GAAI8F,EAAMqB,aAAe,GACzBjG,OAAO,wBAGX,gBAAC,EAAA8F,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,iBACpB,gBAAC,EAAAC,2BAA0B,KAAEpB,EAAMpF,UAAY,QAEjD,gBAAC,EAAAsG,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,uBACnBhB,EACC,gBAAC,EAAArH,MAAK,CAAC5E,QAAQ,SAAS8D,UAAQ,EAACrE,MAAOwM,EAAmBpK,MACxDoK,EAAmBpH,SAEnBmH,EAEDD,EAAUlN,MAAM2G,OAAS,EAC3B,gBAAC4H,EAAA,EAA4B,CAC3BlG,OAAO,wBACPmG,WAAYtB,EAAUlN,MAAMqD,IAAKoL,GAAaA,EAASC,KAAK,IAAM,KAGpE,qBAAGlK,UAAW,IAAKuJ,mBAAiB,0BAPpC,gBAAC,EAAAY,QAAO,CAAC1O,KAAK,QAUlB,gBAAC,EAAAkO,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,sBACpB,gBAAC,EAAAC,2BAA0B,KACzB,gBAAC,EAAAO,KAAI,CAAC3J,UAAQ,EAACP,MAAO,CAAEmK,YAAa,IACnC,gBAAC,KAAiB,OAEpB,gBAACC,GAAA,EAAc,CAACC,eAAgB9B,EAAM+B,6BAG1C,gBAAC,EAAAb,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,kBACpB,gBAAC,EAAAC,2BAA0B,KACzB,gBAAC,EAAAO,KAAI,CAAC3J,UAAQ,EAACP,MAAO,CAAEmK,YAAa,IACnC,gBAAC,KAAiB,OAEpB,gBAACC,GAAA,EAAc,CAACC,eAAgB9B,EAAMgC,8BCnGzCC,GAAkB,CAACxR,EAAkBY,KAChD,MAAM,IAAEe,EAAG,aAAED,GAAiBoI,IAExB5H,EAAO,gBACVnC,GACM2B,EAGA1B,EAGAY,EAGEe,EAAIhB,gBAAgBZ,EAAMC,EAAUY,GAFlCuB,QAAQC,OAAO,IAAI,KAAc,kBAHjCD,QAAQC,OAAO,IAAI,KAAc,iBAHjCD,QAAQC,OAAO,IAAI3B,MAAM,0BAUpC,CAACkB,EAAKD,EAAc1B,EAAUY,IAEhC,OAAO,EAAAyB,EAAA,IAAcH,EAAM,KAAM,CAC/BQ,sBAAsB,K,uDCR1B,MA6EA,GA7E0F,EACxF6M,QACAkC,aAEA,MAAM9J,GAAW,IAAAC,gBACV8J,EAAYC,IAAoB,KAAAC,uBAAsB,OAEtDC,EAAWC,GAAgB,cAAe,IAE1CC,EAAsBC,GAA2B,aAAyB,IAC3EC,GAAc,SAAqBF,GAAsB,GAEzDG,EAAc,gBAAkB,KACpCJ,GAAa,IACZ,CAACA,IAEEK,EAAmB,YACvB,IAAMR,GAAoBD,EAAWzI,OAAS,EAC9C,CAAC0I,EAAkBD,IAGf7J,GAAS,IAAAC,aACTC,GAAgB,QAAaF,IAC5B2H,EAAWC,EAAgBC,GAAsB1F,EACtDjC,EAAc/H,UAAY,GAC1B2P,mBAAmB,GAAG5H,EAAcnH,cAEhCoQ,EAAMxB,EAAUlN,MAAM,GAAG0O,IACzBjI,EAASoJ,GAAoB1C,IAAmBC,EAIhD0C,EAAqB,YAAc,KAGhC,CACL5R,KAAM,CACJI,UAAW2O,EAAMjK,KACjB+M,iBAAkBrB,EAClBsB,mBAAoBtB,GAAKuB,SAAS,UAAY,MAAQ,MAExDxJ,QAAQ,EACR9G,WAAOZ,IAER,CAACkO,IAEEiD,EAAe,gBAAkB,KACrCV,GAAa,GACbnK,EAAS,kBACR,CAACA,IAEJ,OACE,oCACG+J,EAAW/L,IAAKjG,GACRA,EAAU+S,WAAWC,yBAC1B,kBAAC,GAAAC,WAAU,CACT7M,IAAKpG,EAAUkT,IACfC,QAASnT,EAAU+S,WAAWC,wBAC9BI,SAAW/P,GAAUiP,EAAwBjP,GAAS,OAI3D0O,EAAOQ,EAAaC,EAAanJ,GACjC8I,GAAaH,EAAW/L,IAAKjG,GACrBA,EAAU+S,WAAWM,gBAC1B,kBAACrT,EAAU+S,WAAWM,eAAc,CAClCjN,IAAKpG,EAAUkT,IACfR,mBAAoBA,EACpBY,SAAUR,EACVS,QAAS,IAAMnB,GAAa,QClF3BoB,GAA2B,EACtC3D,QACA4D,0BAKA,kBAAC,GAAgC,CAC/B5D,MAAOA,EACPkC,OAAQ,CAACQ,EAAaC,EAAaC,KACjC,MAAMiB,EACJ,kBAAC,EAAA9L,OAAM,CACL9H,GAAG,gBAAe,aACP,eACXiE,QAAS,EAAA4P,cAAclP,QACvBiB,QAAS6M,GAAaqB,QAAUpB,OAAc7Q,EAC9CkS,gBAAiBtB,GAAaqB,QAAO,cACzB,iBAAe,gBAMzBE,EAAsBrB,EAC1BF,EAAYwB,QACV,kBAAC,EAAAC,QAAO,CAAChG,QAASuE,EAAYwB,SAAUL,GACtC,EAGF,KAEJ,OACE,oCACGI,EACAL,IAAuBhB,OCkIlC,GA7ImC,KACjC,MAAMtK,GAAS,IAAAC,aACTC,GAAgB,QAAaF,GAC7BF,GAAW,IAAAC,eAEX+L,EAAQnC,GACZzJ,EAAc/H,UAAY,GAC1B2P,mBAAmB,GAAG5H,EAAcnH,eAE/B2O,EAAOqE,EAAaC,GAAkBF,GACvC,gBAAEG,EAAe,yBAAEC,EAAwB,sBAAEC,GAA0B,eAC3EC,GAAA,IAGKzE,EAAWC,EAAgBC,GAAsB1F,EACtDjC,EAAc/H,UAAY,GAC1B2P,mBAAmBA,mBAAmB,GAAG5H,EAAcnH,eAAiB,IAGpEsT,EAAwB,CAACtL,EAAuBuL,EAAqB1Q,EAAmC,YAC5G,kBAAC,EAAA2Q,QAAO,CACNxL,cAAeA,EACfyL,cAAc,QAAO,cACT,iCACZF,YAAa,6BAAMA,IAEnB,kBAAC,EAAA7M,OAAM,CAAC7D,QAASA,EAAS8P,gBAAc,gBAAa,yBAAuB,mBAM1Ee,EAAsB,CAAC7Q,EAAmC,aAE3DuQ,GACDD,IACCtE,GACDC,EAEO,KAGyB,IAA3BoE,EAAgB7K,OACrBiL,EACE,qCACA,8HACAzQ,GAE2B,IAA3B+L,EAAUlN,MAAM2G,OAClBiL,EAAsB,GAAI,gCAAiCzQ,GAE3D,kBAAC,EAAA6D,OAAM,eACO,wBACZ7D,QAASA,EACT2B,QAAS,KACPuC,ECjFkC,EAACnI,EAAK,GAAI8F,EAAO,MAC3D,MAAM,SAAEtF,EAAW,GAAE,UAAEY,EAAY,KAAO,QAAa,CACrDZ,SAAUR,EACVoB,UAAW0E,IAEb,MAAO,kBAAkBtF,KAAYY,cAAwB,KD4E5C2T,CAA6BxM,EAAc/H,SAAU+H,EAAcnH,cAC7E,kBAOP,OACE,kBAAC2H,EAAAC,EAAgB,CACfgM,WACE,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,KAAI,CAAClL,GAAG,kBAAgB,kBAE3B,kBAAC,EAAAiL,eAAc,CAACE,UAAQ,IAAE,QAAarF,GAAOjK,MAAQ,KAAO,YAGjEpC,MACEqM,EACE,kBAAC,EAAApJ,KAAI,CACH0O,WAAY,CAAEpO,QAAS,gBACvBC,WAAY,CAAED,QAAS,qBAEtB8I,EAAMuF,KACL,yBAAK5L,IAAKqG,EAAMuF,KAAM1L,IAAI,aAAapC,MAAO,CAAE+N,OAAQ,OAAQ/F,MAAO,UAEvE,kBAAC,EAAAgG,SAAQ,CACPC,MAAM,SACNjG,MAAM,OACN+F,OAAO,OACPG,iBAAiB,wBAGrB,kBAAC,EAAAC,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAjP,KAAI,CACH0O,WAAY,CAAEpO,QAAS,gBACvBC,WAAY,CAAED,QAAS,qBAEvB,kBAAC,EAAA4O,SAAQ,MAAE,QAAa9F,EAAMjK,SAGlC,kBAAC,EAAA8P,UAAS,KACR,kBAAC,EAAApI,QAAO,CAACM,UAAW,EAAAjC,gBAAgBiK,O,eAAoB/F,EAAMpF,aAIlE,gBAINtB,OAAQ0G,EACRzG,eACGyG,OAIGlO,EAHF,6B,gCAC+B,kBAAC,EAAAsT,KAAI,CAAClL,GAAG,kBAAgB,kBAI5D8L,UAAW1B,EACX9K,OAAQ6K,EACR4B,aAAa,+BACb3L,wBAAsB,EACtB4L,aACE7B,IACCC,GACDtE,GACE,kBAAC,EAAAmG,WAAU,KACT,kBAAC,EAAAC,gBAAe,KACd,kBAACzC,GAAwB,CACvB3D,MAAOA,EACP4D,qBAAuByC,GACrBtB,EAAoBsB,EAAoB,YAAc,gBAQjErG,GAAS,kBAAC,GAAgB,CAACA,MAAOA,EAAOxH,cAAeA,M,gKEvH/D,MAwLA,GAxL0E,EACxEwH,QACAsG,yBACArG,YACAzH,gBACA+N,+BAEA,MAAMnO,GAAW,IAAAC,gBACX,SAAEnG,GAAa,eAAiBsU,GAAA,IAC/BC,EAAkBC,IAA0B,EAAAC,GAAA,KAC7CC,GAAO,EAAAC,GAAA,MAENC,EAAcC,GAAmB,cAAe,IAChDC,EAAaC,GAAkB,kBAAkCnV,GAElEoV,GAAmB,SAAqC1O,GACxDkC,GAAQ,SAAwBsF,GAChCyB,EAAMxB,EAAU,GAAKA,EAAU,GAAGwB,IAAM,GAExC0F,EAAgD,CACpD9V,WAAW,QAAamH,EAAcnH,WAAa,IACnD+V,iBAAkBpH,GAAOpM,aAAe,GACxCyT,YAAa,YACbC,mBAAoB,GACpBC,kBAAmB,GACnBC,yBAA0B,GAC1BC,kBAAmB,MAAkBC,IACrCC,sBAAuB,GACvBC,oBAAqB,GACrBC,oBAAqB,GACrBC,kBAAmB,GACnBC,iBAAkBtG,GAAO,GACzBuG,cAAe1B,EAAuBvQ,KACtCkS,sBAAuB,KAAK,SAA8BjI,GAAOkI,qBAAsBxN,GACvFyN,wBAAyB,IACpBnI,GAAOkI,iBACVE,QAAS,CAEPC,aAAcrI,GAAOqB,aAAe,GACpCiH,aAAc,KAA0BC,QAE1ChV,SAAU,CAER8U,aAAcrI,GAAOpF,UAAY,GACjC0N,aAAc,KAA0BC,WAEvC7N,GAEL8N,6BAA8BtB,IAGzBuB,EAAUC,IAAW,SAA4BvB,IAEjDwB,EAA8BC,GACnC,aAAuB,KAClBC,EAAsBC,GAA2B,aAAuB,KACxEC,EAAuBC,GAA4B,kBACxDlX,GAGImX,GAAmB,SAAYR,EAASpX,WACxC6X,IAAuBxC,IACzB,SAAoB+B,EAASpX,UAAWoV,GAEtC0C,GAAqBF,GAAoBC,EAEzCE,EACJtC,IAAgB,SAAqC2B,EAAUhC,GAoDjE,OACE,oCACE,kBAAC,EAAApG,YAAW,CACVC,gBAAgB,EAChB7I,MAAO8O,EAA2B,CAAE8C,WAAY,QAAMvX,EACtDyO,UAAQ,GAER,kBAAC,EAAA+I,KAAI,CAACC,gBAAc,GAClB,kBAAC,EAAA3D,MAAK,CAAClF,WAAS,GACd,kBAAC,EAAAmF,UAAS,KACR,kBAAC,EAAA2D,UAAS,CACRvZ,GAAG,2BACHwZ,MAAM,iBACNC,YAAU,EACVC,QAAQ,uBAER,kBAACC,GAAA,EAAqB,CACpB5B,cAAeS,EAAST,cACxBxT,YAAcqV,GAAOnB,EAAQ,gBAAiBmB,GAC9CjV,SAAO,EACPkV,aAAW,EACXC,UAAU,MAIhB,kBAAC,EAAAlE,UAAS,KACR,kBAAC,EAAA/M,MAAK,CACJ5E,QAAQ,OACR8D,UAAQ,EACRgS,SAAO,EACPrW,MAAM,0IAGV,kBAAC,EAAAkS,UAAS,KACR,kBAACoE,GAAA,EAA+B,CAC9BxB,SAAUA,EACVC,QAASA,EACTS,kBAAmBA,EACnBD,qBAAsBA,IAExB,kBAACgB,GAAA,EAA8B,CAC7BzB,SAAUA,EACVC,QAASA,EACTyB,gBAAgB,EAChBC,gBAAc,QAMxB,kBAACC,GAAA,EAAsB,CACrBC,YAAa,MAAYC,eACzBvD,YAAaA,EACboC,iBAAkBA,EAClBtC,aAAcA,EACdrD,SAzGe+G,UAKnB,GAJAzD,GAAgB,GAChBE,OAAenV,IAGV2W,EAASV,kBAAyD,KAArCU,EAASV,iBAAiBlQ,OAG1D,OAFAoP,EAAe,IAAI/V,MAAM,wCACzB6V,GAAgB,GAKlB,IAAK7U,EAASE,IAGZ,OAFA6U,EAAe,IAAI/V,MAAM,6CACzB6V,GAAgB,GAIlB,IACE,MACE9V,MAAM,gBAAEwZ,EAAe,aAAEC,EAAY,cAAEC,GAAe,OACtDC,SACQ,SAAc1Y,EAAUuW,EAAU7B,EAAKiE,QAAU,QAE3D,GAAIJ,GAAmBC,GAAgBC,EAAe,CACpD,MAAMG,GAAiB,SAAmBL,EAAgBxa,GAAIqW,EAAuBvQ,MACrFqC,EAAS0S,EACX,MAAO,GAAIC,OAAOC,KAAKJ,GAAQlR,OAAS,EAAG,CACzCqN,GAAgB,GAChB6B,EAAgCH,EAASpX,WACzCyX,EAAwBL,EAASpB,aACjC,MAAM4D,EAAeF,OAAOC,KAAKJ,GAAQ,GACzC5B,EAAyBiC,GACzBhE,EAAe2D,EAAOK,GACxB,CACF,CAAE,MAAOvY,GACPuU,EAAevU,aAAiBxB,MAAQwB,EAAQ,IAAIxB,MAAM,wBAC1D6V,GAAgB,EAClB,GAoEImE,SAjEW,KACf9S,GACE,OAA4B,CAC1B3H,SAAU+H,EAAc/H,SACxBY,UAAWmH,EAAcnH,cA8DzB0X,sBAAuBA,EACvB1B,YAAawB,EACbxX,UAAWsX,MC/MbwC,GAA0C,KAC9C,MAAM7S,GAAS,IAAAC,aACTC,GAAgB,QAAaF,IAC7B,gBAAEiM,EAAe,sBAAEE,GAA0B,aAAiBC,GAAA,GAE9DN,EAAQnC,GACZzJ,EAAc/H,UAAY,GAC1B2P,mBAAmB,GAAG5H,EAAcnH,eAE/B2O,EAAOqE,EAAaC,GAAkBF,GACtCnE,EAAWC,EAAgBC,GAAsB1F,EACtDjC,EAAc/H,UAAY,GAC1B2P,mBAAmB,GAAG5H,EAAcnH,cAGhCiV,EAAyB/B,EAAgB7K,OAAS,EAAI6K,EAAgB,GAAK,KAG3E6G,EACJ/G,GACAnE,IACCC,IACAmE,GACDtE,GACAyE,GACAF,EAAgB7K,OAAS,EAE3B,OACE,gBAACV,EAAAC,EAAgB,CACftF,MAAO,aAAY,QAAaqM,GAAOjK,MAAQ,KAAO,WACtDnC,YAAY,wDACZqR,WACE,gBAAC,EAAAC,WAAU,KACT,gBAAC,EAAAC,eAAc,CAACjD,OAAQ,IAAM,gBAAC,EAAAkD,KAAI,CAAClL,GAAG,kBAAgB,mBACvD,gBAAC,EAAAiL,eAAc,eACD,wBACZjD,OAAQ,IACLlC,GAAOjK,KAGN,gBAAC,EAAAqP,KAAI,CACHlL,IAAI,OAA4B,CAC9BzJ,SAAU+H,EAAc/H,SACxBY,UAAWmH,EAAcnH,cAG1B,QAAa2O,EAAMjK,OATT,eAcnB,gBAAC,EAAAoP,eAAc,eAAa,0BAA0BE,UAAQ,sBAKlE7L,OAAQ6K,EACR2B,UAAW1B,EACXhL,OAAO,GAEN8R,GAAe9E,EACd,gBAACE,GAAA,EAA4B,CAAC6E,kBAAmB/E,EAAuBvQ,MACtE,gBAAC,GAAwB,CACvBiK,MAAOA,EACPsG,uBAAwBA,EACxBrG,UAAWA,EAAUlN,MACrByF,cAAeA,EACf+N,0BAAwB,KAI5B,2CAYR,GAN2C,IACzC,gBAAC7B,GAAA,EAAoC,KACnC,gBAACyG,GAA6B,OC7ElC,GAZ4D,EAAGG,mBAC7D,MAAM1V,EAAM,SAA6B,MAQzC,OANA,YAAgB,KACV0V,GAAgB1V,EAAI2V,SACtB3V,EAAI2V,QAAQC,kBAEb,CAACF,IAEG,uBAAK1V,IAAKA,K,gBCiBZ,MC+EP,GAnF0D,EAAGoK,QAAOnP,SAAQ4a,YAAW,MACrF,MAAMrT,GAAW,IAAAC,eAEjB,OACE,kBAAC,EAAAqT,KAAI,CAACC,cAAY,gBAAa,qBAAqBpV,IAAK,GAAGyJ,EAAMjK,QAAQiK,EAAM4L,aAC9E,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAlV,KAAI,CAACO,WAAY,CAAED,QAAS,qBAC1B8I,EAAMuF,KACL,yBAAK5L,IAAKqG,EAAMuF,KAAM1L,IAAI,aAAapC,MAAO,CAAE+N,OAAQ,OAAQ/F,MAAO,UAEvE,kBAAC,EAAAgG,SAAQ,CACPC,MAAM,SACNjG,MAAM,OACN+F,OAAO,OACPG,iBAAiB,wBAGrB,kBAAC,EAAAG,SAAQ,CAACiG,MAAO,CAAE7U,QAAS,eACzBrG,GAAU,kBAAC,EAAAoK,MAAK,KAAEpK,EAAOkF,UAKlC,kBAAC,EAAAiW,SAAQ,KACP,kBAAC,EAAApG,MAAK,CAAClF,WAAS,GACd,kBAAC,EAAAmF,UAAS,CAACtF,UAAQ,GACjB,kBAAC,EAAAxI,OAAM,eACO,4BACZ7D,QAAQ,OACR8D,UAAQ,EACR+F,UAAU,IACVlI,QAAS,KACPuC,E1BzD4B,EAAC6T,EAAmB,GAAIxb,EAAW,MAC7E,OAA4B,CAAEA,WAAUY,UAAW4a,I0BwD5BC,CAA6BlM,EAAMjK,KAAMlF,GAAQZ,MAE5DwH,MAAO,CACL0U,SAAU,iDACVC,WAAY,kDAGbX,EACC,kBAAC,EAAAY,SAAQ,eACK,0BACZlO,QAAS6B,EAAMjK,KACfuW,SAAS,SACTC,gBAAgB,MAChB9U,MAAO,CAAE+U,eAAgB,eAG3B,+BAAO,QAAaxM,EAAMjK,SAIhC,kBAAC,EAAA8P,UAAS,CAACtF,UAAQ,gBAAa,kCAC7BkL,EACC,yBACEhU,MAAO,CACLgV,SAAU,SACVC,aAAc,WACdC,gBAAiB,EACjBC,gBAAiB,WACjBC,QAAS,gBAGV7M,EAAMpM,aAGToM,EAAiB,eAKzB,kBAAC,EAAA8M,WAAU,KACT,kBAAC,EAAkB,CACjBpS,MAAOsF,EAAMtF,OAAS,GACtBC,QAASqF,EAAMrF,QACfC,SAAUoF,EAAMpF,cCP1B,GA5E0D,EAAGnG,iBAC3D,MAAM,eAAEzC,GAAmB,eAAiBL,IACrCob,EAAeC,EAAqBC,EAAwBC,GFS5B,EACvCzc,EACAwC,EAAW,GACXka,EAAc,MAEd,MAAM,IAAE/a,EAAG,aAAED,GAAiBoI,KAEvB6J,EAAOgJ,GAAY,aAAmC,CAC3Dra,MAAO,GACPG,cAAe,GACfma,UAAW,EACXC,WAAW,EACXC,eAAe,EACf/T,QAAQ,EACR9G,WAAOZ,IAGH0b,EAAc,gBAClBhD,MAAOtX,IACL,MAAMua,EAAaC,QAAQxa,GAE3Bka,EAAUO,IAAS,IACdA,EACHL,WAAYG,EACZF,cAAeE,KAGjB,IACE,IAAKtb,EACH,aAAaS,QAAQC,OAAO,IAAI3B,MAAM,0BAExC,IAAKT,EACH,aAAamC,QAAQC,OAAO,IAAI,KAAc,iBAEhD,MAAM7B,QAAiBoB,EAAI/B,yBACzB,CAAC,EACDI,EACA,CACEwC,SAAUA,EAAS2a,cACf1a,GAAiB,CAAEA,kBAEzBia,GAAeA,EAAYtV,OAASsV,EAAYtV,YAAS/F,GAG3Dsb,EAAUO,IAAS,CACjB5a,MAAO0a,EAAa,IAAIE,EAAK5a,SAAU/B,EAAS+B,OAAS/B,EAAS+B,MAClEG,cAAelC,EAASkC,cACxBma,UAAWrc,EAASgC,KACpBsa,WAAW,EACXC,eAAe,EACf/T,QAAQ,EACR9G,WAAOZ,IAEX,CAAE,MAAOY,GACP0a,EAAUO,IAAS,IACdA,EACHL,WAAW,EACXC,eAAe,EACf/T,QAAQ,EACR9G,MAAO,IAAIxB,MACT,yBAAyBwB,aAAiBxB,MAAQwB,EAAMqG,QAAUqE,OAAO1K,QAG/E,GAEF,CAACN,EAAK3B,EAAUwC,EAAUd,EAAcgb,IAG1C,cAAgB,KACdK,KACC,CAACA,IAEJ,MAAMK,EAAW,gBAAkB,KAC7BzJ,EAAMlR,gBAAkBkR,EAAMmJ,eAChCC,EAAYpJ,EAAMlR,gBAEnB,CAACsa,EAAapJ,EAAMlR,cAAekR,EAAMmJ,gBAEtCL,EAAU,gBAAkB,KAChCE,EAAUO,IAAS,IAAMA,EAAM5a,MAAO,GAAIG,cAAe,MACzDsa,KACC,CAACA,IAEJ,MAAO,CACL,CACEza,MAAOqR,EAAMrR,MACbC,KAAMoR,EAAMiJ,UACZpa,SAAU,GACVC,cAAekR,EAAMlR,cACrB2a,WACAN,cAAenJ,EAAMmJ,cACrBO,QAASJ,QAAQtJ,EAAMlR,gBAEzBkR,EAAM5K,OACN4K,EAAM1R,MACNwa,IEvGAa,CAA0B/b,GAAgB/B,IAAM,GAAI,GAAIwE,GAE1D,OAAKuY,EAWDC,EAEA,kBAAC,EAAAnU,MAAK,CAAC5E,QAAQ,SAASP,MAAM,+BAA+BqE,UAAQ,GAClEiV,EAAuBlU,QACxB,kBAAC,EAAAhB,OAAM,CAAC7D,QAAQ,OAAO2B,QAASqX,GAAO,cAOV,IAA/BH,EAAcha,MAAM2G,OAEpB,kBAAC,EAAsB,CACrBhG,OAAO,4BACPC,MAAM,kBACNE,WAAY,MACZD,YACE,oC,sBACqB,2BAAI5B,GAAgB+D,M,yFAS/C,oCACE,kBAAC,EAAAiY,QAAO,CAACtN,WAAS,EAACuN,UAAW,CAAE/W,QAAS,UACtC6V,EAAcha,MAAMqD,IAAK4J,GACxB,kBAAC,GAAgB,CACfA,MAAOA,EACPnP,OAAQmB,EACRuE,IAAK,GAAGyJ,EAAMjK,QAAQiK,EAAM4L,gBAIjCmB,EAAce,SACb,yBAAKrW,MAAO,CAAEkG,UAAW,SACvB,kBAAC,EAAA9E,SAAQ,KACNkU,EAAcQ,cACb,oCACE,kBAAC,EAAA7L,QAAO,CAAC1O,KAAK,KAAKuE,UAAU,kBAC7B,kBAAC,EAAA2W,MAAK,CAAClb,KAAK,KAAKmb,aAAa,MAAI,mCAKpC,kBAAC,EAAApW,OAAM,CAAC7D,QAAQ,WAAW2B,QAASkX,EAAcc,SAAU7a,KAAK,MAAI,uBA1D7E,kBAAC,EAAAe,WAAU,KACT,kBAAC,EAAA2N,QAAO,MACR,kBAAC,EAAAwM,MAAK,CAACC,aAAa,KAAKnb,KAAK,MAAI,8BCe1C,GArC+B,KAC7B,MAAOyB,EAAY2Z,GAAiB,WAAe,IAE7CC,EAAe,cAAmBC,IACtCF,EAAcE,IACb,IAEGC,EAAoB,cAAkB,KAC1CH,EAAc,KACb,IAEH,OACE,gCACE,gBAAC,GAAiB,CAAC9C,cAAY,IAC/B,gBAACtS,EAAAC,EAAgB,CACftF,MAAO,gBAACuF,EAAA,EAAa,CAACvF,MAAM,gBAAgBwF,WAAY,KAAkBC,eAC1ExF,YAAY,+FACZ0F,OAAO,EACPD,cACE,gBAAC,EAAmC,CAClCnB,gBAAkBzH,GAAqBgD,EAAgBhD,GACvDgE,WAAYA,EACZC,SAAU2Z,EACV1Z,cAAe4Z,IAGnB/U,QAAM,EACNc,wBAAsB,GAEtB,gBAAC,EAAA+F,YAAW,CAACE,UAAQ,GACnB,gBAAC,GAAgB,CAAC9L,WAAYA,QCNxC,GAvBqC,IACnC,gBAACnC,EAA2B,KAC1B,gBAAC,EAAAkc,OAAM,KACL,gBAAC,EAAAC,MAAK,CACJhd,KAAK,gBACLid,QACE,gBAAC,EAAsB,CACrB/V,uBAAyBlI,GAAagD,EAAgBhD,MAI1D,gBAAC,EAAAge,MAAK,CAACE,OAAK,EAACD,QAAS,gBAAC,GAAY,QACnC,gBAAC,EAAAD,MAAK,CAAChd,KAAK,cACV,gBAAC,EAAAgd,MAAK,CAACE,OAAK,EAACD,QAAS,gBAAC,GAAgB,QACvC,gBAAC,EAAAD,MAAK,CAAChd,KAAK,WAAWid,QAAS,gBAAC,GAAwB,QACzD,gBAAC,EAAAD,MAAK,CAAChd,KAAK,IAAIid,QAAS,gBAAC,EAAAzU,SAAQ,CAACC,GAAG,SAExC,gBAAC,EAAAuU,MAAK,CAAChd,KAAK,IAAIid,QAAS,gBAAC,EAAAzU,SAAQ,CAACC,GAAG,U","sources":["webpack://model-registry-ui/./src/app/shared/markdown/MarkdownComponent.scss","webpack://model-registry-ui/./src/odh/extension-points/model-catalog-deploy.ts","webpack://model-registry-ui/./src/app/api/modelCatalog/service.ts","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useModelCatalogAPIState.tsx","webpack://model-registry-ui/./src/app/context/modelCatalog/ModelCatalogContext.tsx","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useCatalogSources.ts","webpack://model-registry-ui/./src/app/routes/modelCatalog/catalogModel.ts","webpack://model-registry-ui/./src/app/pages/modelCatalog/EmptyModelCatalogState.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelCatalogSourceSelector.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelCatalogSourceSelectorNavigator.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/InvalidCatalogSource.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/ModelCatalogCoreLoader.tsx","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useModelCatalogAPI.ts","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useCatalogModelArtifacts.ts","webpack://model-registry-ui/./src/app/pages/modelCatalog/components/ModelCatalogLabels.tsx","webpack://model-registry-ui/./src/app/shared/components/ExternalLink.tsx","webpack://model-registry-ui/./src/app/shared/markdown/MarkdownComponent.scss?bf95","webpack://model-registry-ui/./src/app/shared/markdown/utils.ts","webpack://model-registry-ui/./src/app/shared/markdown/components/LinkComponent.tsx","webpack://model-registry-ui/./src/app/shared/markdown/components/DetailsComponent.tsx","webpack://model-registry-ui/./src/app/shared/markdown/components/CodeBlockComponent.tsx","webpack://model-registry-ui/./src/app/shared/markdown/MarkdownComponent.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelDetailsView.tsx","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useCatalogModel.ts","webpack://model-registry-ui/./src/odh/components/ModelCatalogDeployModalExtension.tsx","webpack://model-registry-ui/./src/odh/components/ModelCatalogDeployButton.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelDetailsPage.tsx","webpack://model-registry-ui/./src/app/routes/modelCatalog/catalogModelRegister.ts","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/RegisterCatalogModelForm.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/RegisterCatalogModelPage.tsx","webpack://model-registry-ui/./src/app/shared/components/ScrollViewOnMount.tsx","webpack://model-registry-ui/./src/app/hooks/modelCatalog/useCatalogModelsBySource.ts","webpack://model-registry-ui/./src/app/pages/modelCatalog/components/ModelCatalogCard.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelCatalogPage.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/screens/ModelCatalog.tsx","webpack://model-registry-ui/./src/app/pages/modelCatalog/ModelCatalogRoutes.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.markdown-content p{margin-bottom:var(--pf-t--global--spacer--md)}.markdown-content ul,.markdown-content ol{margin:var(--pf-t--global--spacer--md) 0}.markdown-content li{margin-bottom:var(--pf-t--global--spacer--sm)}.markdown-content blockquote{margin:var(--pf-t--global--spacer--md) 0;padding:0 var(--pf-t--global--spacer--md)}.markdown-content blockquote p{margin:0}.markdown-content pre{margin:var(--pf-t--global--spacer--sm) 0;padding:var(--pf-t--global--spacer--sm);background-color:var(--pf-t--global--background--color--secondary--default);overflow-x:auto}.markdown-content pre code{font-family:var(--pf-t--global--font--family--mono);font-size:var(--pf-t--global--font--size--body--sm);white-space:pre-wrap}.markdown-content img{display:block;margin:var(--pf-t--global--spacer--md) auto;max-width:100%;height:auto}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/shared/markdown/MarkdownComponent.scss\"],\"names\":[],\"mappings\":\"AAEE,oBACE,6CAAA,CAIF,0CAEE,wCAAA,CAGF,qBACE,6CAAA,CAIF,6BACE,wCAAA,CACA,yCAAA,CAEA,+BACE,QAAA,CAKJ,sBACE,wCAAA,CACA,uCAAA,CACA,2EAAA,CACA,eAAA,CAEA,2BACE,mDAAA,CACA,mDAAA,CACA,oBAAA,CAKJ,sBACE,aAAA,CACA,2CAAA,CACA,cAAA,CACA,WAAA\",\"sourcesContent\":[\".markdown-content {\\n  // Paragraphs\\n  p {\\n    margin-bottom: var(--pf-t--global--spacer--md);\\n  }\\n\\n  // Lists\\n  ul,\\n  ol {\\n    margin: var(--pf-t--global--spacer--md) 0;\\n  }\\n\\n  li {\\n    margin-bottom: var(--pf-t--global--spacer--sm);\\n  }\\n\\n  // Blockquotes\\n  blockquote {\\n    margin: var(--pf-t--global--spacer--md) 0;\\n    padding: 0 var(--pf-t--global--spacer--md);\\n\\n    p {\\n      margin: 0;\\n    }\\n  }\\n\\n  // Code blocks\\n  pre {\\n    margin: var(--pf-t--global--spacer--sm) 0;\\n    padding: var(--pf-t--global--spacer--sm);\\n    background-color: var(--pf-t--global--background--color--secondary--default);\\n    overflow-x: auto;\\n\\n    code {\\n      font-family: var(--pf-t--global--font--family--mono);\\n      font-size: var(--pf-t--global--font--size--body--sm);\\n      white-space: pre-wrap;\\n    }\\n  }\\n\\n  // Images\\n  img {\\n    display: block;\\n    margin: var(--pf-t--global--spacer--md) auto;\\n    max-width: 100%;\\n    height: auto;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import type { Extension, CodeRef } from '@openshift/dynamic-plugin-sdk';\nimport type { ModelDeployPrefillInfo } from '~/odh/hooks/useRegisteredModelDeployPrefillInfo';\n\nexport type ModelCatalogDeployModalExtension = Extension<\n  'model-catalog.model-details/deploy-modal',\n  {\n    useAvailablePlatformIds: CodeRef<() => string[]>;\n    modalComponent: CodeRef<\n      React.ComponentType<{\n        modelDeployPrefill: {\n          data: ModelDeployPrefillInfo;\n          loaded: boolean;\n          error: Error | undefined;\n        };\n        onSubmit: () => void;\n        onClose: () => void;\n      }>\n    >;\n  }\n>;\n\nexport const isModelCatalogDeployModalExtension = (\n  extension: Extension,\n): extension is ModelCatalogDeployModalExtension =>\n  extension.type === 'model-catalog.model-details/deploy-modal';\n","import { APIOptions, handleRestFailures, isModArchResponse, restGET } from 'mod-arch-core';\nimport {\n  CatalogModel,\n  CatalogModelArtifactList,\n  CatalogModelList,\n  CatalogSourceList,\n} from '~/app/modelCatalogTypes';\n\nexport const getCatalogModelsBySource =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (\n    opts: APIOptions,\n    sourceId: string,\n    paginationParams?: {\n      pageSize?: string;\n      nextPageToken?: string;\n      orderBy?: string;\n      sortOrder?: string;\n    },\n    searchKeyword?: string,\n  ): Promise<CatalogModelList> => {\n    const allParams = {\n      source: sourceId,\n      ...paginationParams,\n      ...(searchKeyword && { q: searchKeyword }),\n      ...queryParams,\n    };\n    return handleRestFailures(restGET(hostPath, '/models', allParams, opts)).then((response) => {\n      if (isModArchResponse<CatalogModelList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n  };\n\nexport const getListSources =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions): Promise<CatalogSourceList> =>\n    handleRestFailures(restGET(hostPath, '/sources', queryParams, opts)).then((response) => {\n      if (isModArchResponse<CatalogSourceList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getCatalogModel =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, sourceId: string, modelName: string): Promise<CatalogModel> =>\n    handleRestFailures(\n      restGET(hostPath, `/sources/${sourceId}/models/${modelName}`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<CatalogModel>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n\nexport const getListCatalogModelArtifacts =\n  (hostPath: string, queryParams: Record<string, unknown> = {}) =>\n  (opts: APIOptions, sourceId: string, modelName: string): Promise<CatalogModelArtifactList> =>\n    handleRestFailures(\n      restGET(hostPath, `/sources/${sourceId}/artifacts/${modelName}`, queryParams, opts),\n    ).then((response) => {\n      if (isModArchResponse<CatalogModelArtifactList>(response)) {\n        return response.data;\n      }\n      throw new Error('Invalid response format');\n    });\n","import { APIState, useAPIState } from 'mod-arch-core';\nimport React from 'react';\nimport {\n  getCatalogModel,\n  getCatalogModelsBySource,\n  getListCatalogModelArtifacts,\n  getListSources,\n} from '~/app/api/modelCatalog/service';\nimport { ModelCatalogAPIs } from '~/app/modelCatalogTypes';\n\nexport type ModelCatalogAPIState = APIState<ModelCatalogAPIs>;\n\nconst useModelCatalogAPIState = (\n  hostPath: string | null,\n  queryParameters?: Record<string, unknown>,\n): [apiState: ModelCatalogAPIState, refreshAPIState: () => void] => {\n  const createAPI = React.useCallback(\n    (path: string) => ({\n      getCatalogModelsBySource: getCatalogModelsBySource(path, queryParameters),\n      getListSources: getListSources(path, queryParameters),\n      getCatalogModel: getCatalogModel(path, queryParameters),\n      getListCatalogModelArtifacts: getListCatalogModelArtifacts(path, queryParameters),\n    }),\n    [queryParameters],\n  );\n\n  return useAPIState(hostPath, createAPI);\n};\n\nexport default useModelCatalogAPIState;\n","import { useQueryParamNamespaces } from 'mod-arch-core';\nimport * as React from 'react';\nimport { useCatalogSources } from '~/app/hooks/modelCatalog/useCatalogSources';\nimport useModelCatalogAPIState, {\n  ModelCatalogAPIState,\n} from '~/app/hooks/modelCatalog/useModelCatalogAPIState';\nimport { CatalogSource, CatalogSourceList } from '~/app/modelCatalogTypes';\nimport { BFF_API_VERSION, URL_PREFIX } from '~/app/utilities/const';\n\nexport type ModelCatalogContextType = {\n  catalogSourcesLoaded: boolean;\n  catalogSourcesLoadError?: Error;\n  catalogSources: CatalogSourceList | null;\n  selectedSource: CatalogSource | undefined;\n  updateSelectedSource: (modelRegistry: CatalogSource | undefined) => void;\n  apiState: ModelCatalogAPIState;\n  refreshAPIState: () => void;\n};\n\ntype ModelCatalogContextProviderProps = {\n  children: React.ReactNode;\n};\n\nexport const ModelCatalogContext = React.createContext<ModelCatalogContextType>({\n  catalogSourcesLoaded: false,\n  catalogSourcesLoadError: undefined,\n  catalogSources: null,\n  selectedSource: undefined,\n  updateSelectedSource: () => undefined,\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  apiState: { apiAvailable: false, api: null as unknown as ModelCatalogAPIState['api'] },\n  refreshAPIState: () => undefined,\n});\n\nexport const ModelCatalogContextProvider: React.FC<ModelCatalogContextProviderProps> = ({\n  children,\n}) => {\n  const hostPath = `${URL_PREFIX}/api/${BFF_API_VERSION}/model_catalog`;\n  const queryParams = useQueryParamNamespaces();\n  const [apiState, refreshAPIState] = useModelCatalogAPIState(hostPath, queryParams);\n  const [catalogSources, isLoaded, error] = useCatalogSources(apiState);\n  const [selectedSource, setSelectedSource] =\n    React.useState<ModelCatalogContextType['selectedSource']>(undefined);\n\n  const contextValue = React.useMemo(\n    () => ({\n      catalogSourcesLoaded: isLoaded,\n      catalogSourcesLoadError: error,\n      catalogSources,\n      selectedSource: selectedSource ?? undefined,\n      updateSelectedSource: setSelectedSource,\n      apiState,\n      refreshAPIState,\n    }),\n    [isLoaded, error, catalogSources, selectedSource, apiState, refreshAPIState],\n  );\n\n  return (\n    <ModelCatalogContext.Provider value={contextValue}>{children}</ModelCatalogContext.Provider>\n  );\n};\n","import { FetchState, FetchStateCallbackPromise, useFetchState } from 'mod-arch-core';\nimport React from 'react';\nimport { CatalogSourceList } from '~/app/modelCatalogTypes';\nimport { ModelCatalogAPIState } from './useModelCatalogAPIState';\n\nexport const useCatalogSources = (\n  apiState: ModelCatalogAPIState,\n): FetchState<CatalogSourceList> => {\n  const call = React.useCallback<FetchStateCallbackPromise<CatalogSourceList>>(\n    (opts) => {\n      if (!apiState.apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n\n      return apiState.api.getListSources(opts);\n    },\n    [apiState],\n  );\n  return useFetchState(\n    call,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    { initialPromisePurity: true },\n  );\n};\n","import { getCatalogModelDetailsRoute } from '~/app/routes/modelCatalog/catalogModelDetails';\n\nexport const modelCatalogUrl = (sourceId = ''): string => `/model-catalog/${sourceId}`;\n\nexport const catalogModelDetailsFromModel = (catalogModelName = '', sourceId = ''): string =>\n  getCatalogModelDetailsRoute({ sourceId, modelName: catalogModelName });\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyModelCatalogStateType = {\n  testid?: string;\n  title: string;\n  description: React.ReactNode;\n  headerIcon?: React.ComponentType;\n  children?: React.ReactNode;\n  customAction?: React.ReactNode;\n};\n\nconst EmptyModelCatalogState: React.FC<EmptyModelCatalogStateType> = ({\n  testid,\n  title,\n  description,\n  headerIcon,\n  children,\n  customAction,\n}) => (\n  <EmptyState\n    icon={headerIcon ?? PlusCircleIcon}\n    titleText={title}\n    variant={EmptyStateVariant.sm}\n    data-testid={testid}\n  >\n    <EmptyStateBody>{description}</EmptyStateBody>\n    {children}\n    <EmptyStateFooter>\n      {customAction && <EmptyStateActions>{customAction}</EmptyStateActions>}\n    </EmptyStateFooter>\n  </EmptyState>\n);\n\nexport default EmptyModelCatalogState;\n","import {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  MenuToggle,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { ArrowRightIcon, FilterIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport { ModelCatalogContext } from '~/app/context/modelCatalog/ModelCatalogContext';\nimport ThemeAwareSearchInput from '~/app/pages/modelRegistry/screens/components/ThemeAwareSearchInput';\nimport { filterEnabledCatalogSources } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\n\ntype ModelCatalogSourceSelectorProps = {\n  sourceId: string;\n  onSelection: (sourceId: string) => void;\n  searchTerm?: string;\n  onSearch?: (term: string) => void;\n  onClearSearch?: () => void;\n  primary?: boolean;\n};\n\nconst ModelCatalogSourceSelector: React.FC<ModelCatalogSourceSelectorProps> = ({\n  sourceId,\n  onSelection,\n  searchTerm,\n  onSearch,\n  onClearSearch,\n  primary,\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState(searchTerm || '');\n  const { catalogSources, updateSelectedSource, selectedSource } =\n    React.useContext(ModelCatalogContext);\n  const selection = catalogSources?.items.find((source) => source.id === sourceId);\n  const { isMUITheme } = useThemeContext();\n\n  const enabledCatalogSources = filterEnabledCatalogSources(catalogSources);\n\n  const handleModelSearch = () => {\n    if (onSearch && inputValue.trim() !== searchTerm) {\n      onSearch(inputValue.trim());\n    }\n  };\n\n  const handleClear = () => {\n    setInputValue('');\n    if (onClearSearch) {\n      onClearSearch();\n    }\n  };\n\n  const handleSearchInputChange = (value: string) => {\n    setInputValue(value);\n  };\n\n  const handleSearchInputSearch = (_: React.SyntheticEvent<HTMLButtonElement>, value: string) => {\n    if (onSearch) {\n      onSearch(value.trim());\n    }\n  };\n\n  const selector = (\n    <Dropdown\n      shouldFocusToggleOnSelect\n      toggle={(toggleRef) => (\n        <MenuToggle\n          data-testid=\"source-selector\"\n          id=\"source-selector-toggle-button\"\n          ref={toggleRef}\n          aria-label=\"Filter source\"\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n          icon={<FilterIcon />}\n        >\n          {selection?.name}\n        </MenuToggle>\n      )}\n      isOpen={open}\n      popperProps={{ appendTo: 'inline' }}\n    >\n      <DropdownList>\n        {enabledCatalogSources?.items.map((source) => (\n          <DropdownItem\n            isSelected={source.id === selectedSource?.id}\n            key={source.id}\n            id={source.id}\n            onClick={() => {\n              setOpen(false);\n              const catalogSource = enabledCatalogSources.items.find(\n                (enabledSource) => enabledSource.id === source.id,\n              );\n              updateSelectedSource(catalogSource);\n              onSelection(source.id);\n            }}\n          >\n            {source.name}\n          </DropdownItem>\n        ))}\n      </DropdownList>\n    </Dropdown>\n  );\n\n  if (primary) {\n    return selector;\n  }\n\n  return (\n    <Toolbar>\n      <ToolbarContent>\n        <Flex>\n          <ToolbarToggleGroup breakpoint=\"md\" toggleIcon={<FilterIcon />}>\n            <ToolbarGroup variant=\"filter-group\" gap={{ default: 'gapMd' }} alignItems=\"center\">\n              <ToolbarItem>{selector}</ToolbarItem>\n              <ToolbarItem>\n                <ThemeAwareSearchInput\n                  fieldLabel=\"Filter by name, description and provider\"\n                  aria-label=\"Search with submit button\"\n                  className=\"toolbar-fieldset-wrapper\"\n                  placeholder=\"Filter by name, description and provider\"\n                  value={inputValue}\n                  style={{\n                    minWidth: '400px',\n                  }}\n                  onChange={handleSearchInputChange}\n                  onSearch={handleSearchInputSearch}\n                  onClear={handleClear}\n                  onClick={() => setOpen(false)}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                {isMUITheme && (\n                  <Button\n                    isInline\n                    aria-label=\"arrow-right-button\"\n                    data-testid=\"versions-route-link\"\n                    variant=\"link\"\n                    icon={<ArrowRightIcon />}\n                    iconPosition=\"right\"\n                    onClick={handleModelSearch}\n                  />\n                )}\n              </ToolbarItem>\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </Flex>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default ModelCatalogSourceSelector;\n","import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { decodeParams } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\nimport ModelCatalogSourceSelector from './ModelCatalogSourceSelector';\n\ntype ModelCatalogSourceSelectorNavigatorProps = {\n  getRedirectPath: (sourceId: string) => string;\n  searchTerm?: string;\n  onSearch?: (term: string) => void;\n  onClearSearch?: () => void;\n  isPrimary?: boolean;\n};\n\nconst ModelCatalogSourceSelectorNavigator: React.FC<ModelCatalogSourceSelectorNavigatorProps> = ({\n  getRedirectPath,\n  searchTerm,\n  onSearch,\n  onClearSearch,\n  isPrimary,\n}) => {\n  const navigate = useNavigate();\n  const params = useParams<CatalogModelDetailsParams>();\n  const decodedParams = decodeParams(params);\n\n  return (\n    <ModelCatalogSourceSelector\n      sourceId={decodedParams.sourceId ?? ''}\n      onSelection={(id) => {\n        if (id !== decodedParams.sourceId) {\n          navigate(getRedirectPath(id || ''));\n        }\n      }}\n      searchTerm={searchTerm}\n      onSearch={onSearch}\n      onClearSearch={onClearSearch}\n      primary={isPrimary}\n    />\n  );\n};\n\nexport default ModelCatalogSourceSelectorNavigator;\n","import { EmptyStateErrorMessage } from 'mod-arch-shared';\nimport React from 'react';\nimport { modelCatalogUrl } from '~/app/routes/modelCatalog/catalogModel';\nimport ModelCatalogSourceSelectorNavigator from './ModelCatalogSourceSelectorNavigator';\n\ntype InvalidCatalogSourceProps = {\n  title?: string;\n  sourceId?: string;\n};\n\nconst InvalidCatalogSource: React.FC<InvalidCatalogSourceProps> = ({ title, sourceId }) => (\n  <EmptyStateErrorMessage\n    title={title || 'Source not found'}\n    bodyText={`${sourceId ? `Catalog source ${sourceId}` : `The catalog source`} was not found`}\n  >\n    <ModelCatalogSourceSelectorNavigator\n      getRedirectPath={(id: string) => modelCatalogUrl(id)}\n      isPrimary\n    />\n  </EmptyStateErrorMessage>\n);\n\nexport default InvalidCatalogSource;\n","import { Alert, Bullseye } from '@patternfly/react-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport {\n  ApplicationsPage,\n  KubeflowDocs,\n  ProjectObjectType,\n  TitleWithIcon,\n  typedEmptyImage,\n  WhosMyAdministrator,\n} from 'mod-arch-shared';\nimport * as React from 'react';\nimport { Navigate, Outlet, useParams } from 'react-router-dom';\nimport { ModelCatalogContext } from '~/app/context/modelCatalog/ModelCatalogContext';\nimport { modelCatalogUrl } from '~/app/routes/modelCatalog/catalogModel';\nimport EmptyModelCatalogState from './EmptyModelCatalogState';\nimport InvalidCatalogSource from './screens/InvalidCatalogSource';\nimport ModelCatalogSourceSelectorNavigator from './screens/ModelCatalogSourceSelectorNavigator';\n\ntype ApplicationPageProps = React.ComponentProps<typeof ApplicationsPage>;\n\ntype ApplicationPageRenderState = Pick<\n  ApplicationPageProps,\n  'emptyStatePage' | 'empty' | 'headerContent'\n>;\n\ntype ModelCatalogCoreLoaderrProps = {\n  getInvalidRedirectPath: (sourceId: string) => string;\n};\n\nconst ModelCatalogCoreLoader: React.FC<ModelCatalogCoreLoaderrProps> = ({\n  getInvalidRedirectPath,\n}) => {\n  const { sourceId } = useParams<{ sourceId: string }>();\n\n  const {\n    catalogSources,\n    catalogSourcesLoaded,\n    catalogSourcesLoadError,\n    selectedSource,\n    updateSelectedSource,\n  } = React.useContext(ModelCatalogContext);\n\n  const { isMUITheme } = useThemeContext();\n\n  const modelCatalogFromRoute = catalogSources?.items.find((source) => source.id === sourceId);\n\n  React.useEffect(() => {\n    if (modelCatalogFromRoute && !selectedSource) {\n      updateSelectedSource(modelCatalogFromRoute);\n    }\n  }, [modelCatalogFromRoute, updateSelectedSource, selectedSource]);\n\n  if (catalogSourcesLoadError) {\n    return (\n      <Bullseye>\n        <Alert title=\"Model catalog source load error\" variant=\"danger\" isInline>\n          {catalogSourcesLoadError.message}\n        </Alert>\n      </Bullseye>\n    );\n  }\n\n  if (!catalogSourcesLoaded) {\n    return (\n      <ApplicationsPage\n        title={<TitleWithIcon title=\"Model Catalog\" objectType={ProjectObjectType.modelCatalog} />}\n        description=\"Discover models that are available for your organization to register, deploy, and customize.\"\n        headerContent={null}\n        empty\n        emptyStatePage={<Bullseye>Loading catalog sources...</Bullseye>}\n        loaded={false}\n      />\n    );\n  }\n\n  let renderStateProps: ApplicationPageRenderState & { children?: React.ReactNode };\n  if (catalogSources?.items.length === 0) {\n    renderStateProps = {\n      empty: true,\n      emptyStatePage: (\n        <EmptyModelCatalogState\n          testid=\"empty-model-catalog-state\"\n          title={isMUITheme ? 'Deploy a model catalog' : 'Request access to model catalog'}\n          description={\n            isMUITheme\n              ? 'To deploy model catalog, follow the instructions in the docs below.'\n              : 'To request model catalog, or to request permission to access model catalog, contact your administrator.'\n          }\n          headerIcon={() => (\n            // for now, added the modelRegistrySettings for this - will remove once we update the shared library\n            <img src={typedEmptyImage(ProjectObjectType.modelRegistrySettings)} alt=\"\" />\n          )}\n          customAction={isMUITheme ? <KubeflowDocs /> : <WhosMyAdministrator />}\n        />\n      ),\n      headerContent: null,\n    };\n  } else if (sourceId) {\n    const foundCatalogSource = catalogSources?.items.find((source) => source.id === sourceId);\n    if (foundCatalogSource) {\n      // Render the content\n      return <Outlet />;\n    }\n    // They ended up on a non-valid project path\n    renderStateProps = {\n      empty: true,\n      emptyStatePage: <InvalidCatalogSource sourceId={sourceId} />,\n    };\n  } else {\n    // Redirect the namespace suffix into the URL\n    const redirectCatalogSource = selectedSource ?? catalogSources?.items[0];\n    return <Navigate to={getInvalidRedirectPath(redirectCatalogSource?.id || '')} replace />;\n  }\n\n  return (\n    <ApplicationsPage\n      title={<TitleWithIcon title=\"Model Catalog\" objectType={ProjectObjectType.modelCatalog} />}\n      description=\"Discover models that are available for your organization to register, deploy, and customize.\"\n      headerContent={\n        <ModelCatalogSourceSelectorNavigator getRedirectPath={(id) => modelCatalogUrl(id)} />\n      }\n      {...renderStateProps}\n      loaded\n      provideChildrenPadding\n    />\n  );\n};\n\nexport default ModelCatalogCoreLoader;\n","import React from 'react';\nimport { ModelCatalogContext } from '~/app/context/modelCatalog/ModelCatalogContext';\nimport { ModelCatalogAPIState } from './useModelCatalogAPIState';\n\ntype UseModelRegistryAPI = ModelCatalogAPIState & {\n  refreshAllAPI: () => void;\n};\n\nexport const useModelCatalogAPI = (): UseModelRegistryAPI => {\n  const { apiState, refreshAPIState: refreshAllAPI } = React.useContext(ModelCatalogContext);\n\n  return {\n    refreshAllAPI,\n    ...apiState,\n  };\n};\n","import { FetchState, FetchStateCallbackPromise, NotReadyError, useFetchState } from 'mod-arch-core';\nimport React from 'react';\nimport { CatalogModelArtifactList } from '~/app/modelCatalogTypes';\nimport { useModelCatalogAPI } from './useModelCatalogAPI';\n\nexport const useCatalogModelArtifacts = (\n  sourceId: string,\n  modelName: string,\n): FetchState<CatalogModelArtifactList> => {\n  const { api, apiAvailable } = useModelCatalogAPI();\n\n  const call = React.useCallback<FetchStateCallbackPromise<CatalogModelArtifactList>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!sourceId) {\n        return Promise.reject(new NotReadyError('No source id'));\n      }\n      if (!modelName) {\n        return Promise.reject(new NotReadyError('No model name'));\n      }\n      return api.getListCatalogModelArtifacts(opts, sourceId, modelName);\n    },\n    [api, apiAvailable, sourceId, modelName],\n  );\n  return useFetchState(\n    call,\n    { items: [], size: 0, pageSize: 0, nextPageToken: '' },\n    {\n      initialPromisePurity: true,\n    },\n  );\n};\n","import * as React from 'react';\nimport { Label, LabelGroup } from '@patternfly/react-core';\n\ntype ModelCatalogLabelsProps = {\n  tasks?: string[];\n  license?: string;\n  provider?: string;\n};\n\nconst ModelCatalogLabels: React.FC<ModelCatalogLabelsProps> = ({\n  tasks = [],\n  license,\n  provider,\n}) => (\n  <LabelGroup numLabels={5} isCompact>\n    {tasks.map((task) => (\n      <Label data-testid=\"model-catalog-label\" key={task} variant=\"outline\">\n        {task}\n      </Label>\n    ))}\n    {license && (\n      <Label color=\"purple\" isCompact>\n        {license}\n      </Label>\n    )}\n    {provider && <Label isCompact>{provider}</Label>}\n  </LabelGroup>\n);\n\nexport default ModelCatalogLabels;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\ntype ExternalLinkProps = {\n  text: string;\n  to: string;\n  testId?: string;\n};\n\nconst ExternalLink: React.FC<ExternalLinkProps> = ({ text, to, testId }) => (\n  <Button\n    variant=\"link\"\n    data-testid={testId}\n    isInline\n    onClick={() => {\n      window.open(to);\n    }}\n    icon={<ExternalLinkAltIcon />}\n    iconPosition=\"end\"\n  >\n    {text}\n  </Button>\n);\n\nexport default ExternalLink;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./MarkdownComponent.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./MarkdownComponent.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import { ContentVariants } from '@patternfly/react-core';\n\nconst headingMap: Record<number, ContentVariants> = {\n  1: ContentVariants.h1,\n  2: ContentVariants.h2,\n  3: ContentVariants.h3,\n  4: ContentVariants.h4,\n  5: ContentVariants.h5,\n  6: ContentVariants.h6,\n};\n\nexport const shiftHeadingLevel = (level: number, maxHeading: number): ContentVariants => {\n  const adjusted = Math.min(level + maxHeading - 1, 6);\n  return headingMap[adjusted];\n};\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\n\ntype LinkComponentProps = {\n  children: React.ReactNode;\n  href?: string;\n  className?: string;\n};\n\nconst LinkComponent: React.FC<LinkComponentProps> = ({ children, href = '#', className }) => (\n  <Button\n    variant=\"link\"\n    className={className}\n    isInline\n    onClick={() => href !== '#' && window.open(href, '_blank', 'noopener,noreferrer')}\n  >\n    {children}\n  </Button>\n);\n\nexport default LinkComponent;\n","import React, { useState } from 'react';\nimport { Button, Content, CodeBlock, CodeBlockCode } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\ntype DetailsComponentProps = {\n  children: React.ReactNode;\n  summary: string;\n  className?: string;\n};\n\nconst DetailsComponent: React.FC<DetailsComponentProps> = ({ children, summary, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const processedSummary = summary.replace(/\\\\n/g, ' ').trim();\n  const processedChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement(child) && child.type === 'code') {\n      return (\n        <CodeBlock>\n          <CodeBlockCode>{String(child.props.children).replace(/\\\\n/g, '\\n')}</CodeBlockCode>\n        </CodeBlock>\n      );\n    }\n    return child;\n  });\n\n  return (\n    <div className={className}>\n      <Button\n        variant=\"link\"\n        onClick={() => setIsExpanded(!isExpanded)}\n        style={{ padding: 0, margin: 0, textAlign: 'left' }}\n      >\n        {isExpanded ? <AngleDownIcon /> : <AngleRightIcon />} {processedSummary}\n      </Button>\n      {isExpanded && (\n        <Content style={{ marginLeft: '1.5rem', marginTop: '0.5rem' }}>{processedChildren}</Content>\n      )}\n    </div>\n  );\n};\n\nexport default DetailsComponent;\n","import React from 'react';\nimport { CodeBlock, CodeBlockCode } from '@patternfly/react-core';\n\ntype CodeBlockComponentProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nconst CodeBlockComponent: React.FC<CodeBlockComponentProps> = ({ children, className }) => (\n  <CodeBlock className={className}>\n    <CodeBlockCode>{children}</CodeBlockCode>\n  </CodeBlock>\n);\n\nexport default CodeBlockComponent;\n","import { Content, ContentVariants, List, ListItem } from '@patternfly/react-core';\nimport React from 'react';\nimport Markdown from 'react-markdown';\nimport rehypeUnwrapImages from 'rehype-unwrap-images';\nimport remarkGfm from 'remark-gfm';\nimport rehypeSanitize from 'rehype-sanitize';\nimport rehypeRaw from 'rehype-raw';\nimport { Table, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\n\nimport './MarkdownComponent.scss';\nimport { shiftHeadingLevel } from './utils';\nimport LinkComponent from './components/LinkComponent';\nimport DetailsComponent from './components/DetailsComponent';\nimport CodeBlockComponent from './components/CodeBlockComponent';\n\ntype MarkdownComponentProps = {\n  data: string;\n  dataTestId?: string;\n  maxHeading?: number;\n};\n\nconst MarkdownComponent = ({\n  data,\n  dataTestId,\n  maxHeading = 1,\n}: MarkdownComponentProps): JSX.Element => (\n  <div className=\"markdown-content\" data-testid={dataTestId}>\n    <Markdown\n      components={{\n        p: ({ children, ...props }) => (\n          <Content component={ContentVariants.p} {...props}>\n            {children}\n          </Content>\n        ),\n        a: ({ children, href, ...props }) => (\n          <LinkComponent href={href} {...props}>\n            {children}\n          </LinkComponent>\n        ),\n        details: ({ children, ...props }) => {\n          const summary = React.Children.toArray(children).find(\n            (child) => React.isValidElement(child) && child.type === 'summary',\n          );\n          const content = React.Children.toArray(children).filter(\n            (child) => !(React.isValidElement(child) && child.type === 'summary'),\n          );\n          return (\n            <DetailsComponent\n              summary={\n                summary && React.isValidElement(summary)\n                  ? typeof summary.props.children === 'string'\n                    ? summary.props.children\n                    : 'Details'\n                  : 'Details'\n              }\n              {...props}\n            >\n              {content}\n            </DetailsComponent>\n          );\n        },\n        summary: ({ children, ...props }) => <Content {...props}>{children}</Content>,\n        code: ({ node, className, children, ...props }) => {\n          const code = React.Children.toArray(children)\n            .map((child) => (typeof child === 'string' ? child : ''))\n            .join('')\n            .replace(/\\n$/, '');\n\n          if (!node) {\n            return (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          }\n\n          const isPre = 'tagName' in node && node.tagName === 'pre';\n          if (isPre) {\n            return <CodeBlockComponent {...props}>{code}</CodeBlockComponent>;\n          }\n\n          return (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          );\n        },\n        h1: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(1, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        h2: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(2, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        h3: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(3, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        h4: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(4, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        h5: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(5, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        h6: ({ children, ...props }) => (\n          <Content component={shiftHeadingLevel(6, maxHeading)} {...props}>\n            {children}\n          </Content>\n        ),\n        blockquote: ({ children, ...props }) => (\n          <Content component={ContentVariants.blockquote} {...props}>\n            {children}\n          </Content>\n        ),\n        ul: ({ children, ...props }) => (\n          <List component=\"ul\" {...props}>\n            {children}\n          </List>\n        ),\n        ol: ({ children, ...props }) => {\n          // Conflicts with List type\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { type, ...rest } = props;\n          return (\n            <List component=\"ol\" {...rest}>\n              {children}\n            </List>\n          );\n        },\n        li: ({ children, ...props }) => <ListItem {...props}>{children}</ListItem>,\n        table: ({ children, ...props }) => <Table {...props}>{children}</Table>,\n        tbody: ({ children, ...props }) => <Tbody {...props}>{children}</Tbody>,\n        thead: ({ children, ...props }) => <Thead {...props}>{children}</Thead>,\n        tr: ({ children, ...props }) => <Tr {...props}>{children}</Tr>,\n        td: ({ children, ...props }) => {\n          // Conflicts with Td type\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { width, ...rest } = props;\n          return <Td {...rest}>{children}</Td>;\n        },\n        th: ({ children, ...props }) => <Th {...props}>{children}</Th>,\n        img: ({ src, alt, ...props }) => {\n          if (!src) {\n            return null;\n          }\n          return <img src={src} alt={alt || 'Model documentation image'} {...props} />;\n        },\n      }}\n      rehypePlugins={[rehypeRaw, rehypeUnwrapImages, rehypeSanitize]}\n      remarkPlugins={[remarkGfm]}\n    >\n      {data}\n    </Markdown>\n  </div>\n);\n\nexport default MarkdownComponent;\n","import * as React from 'react';\nimport {\n  Content,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Icon,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  Spinner,\n  Alert,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\nimport { InlineTruncatedClipboardCopy } from 'mod-arch-shared';\nimport text from '@patternfly/react-styles/css/utilities/Text/text';\nimport { CatalogModel, CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { useCatalogModelArtifacts } from '~/app/hooks/modelCatalog/useCatalogModelArtifacts';\nimport ModelCatalogLabels from '~/app/pages/modelCatalog/components/ModelCatalogLabels';\nimport ExternalLink from '~/app/shared/components/ExternalLink';\nimport MarkdownComponent from '~/app/shared/markdown/MarkdownComponent';\nimport ModelTimestamp from '~/app/pages/modelRegistry/screens/components/ModelTimestamp';\n\ntype ModelDetailsViewProps = {\n  model: CatalogModel;\n  decodedParams: CatalogModelDetailsParams;\n};\n\nconst ModelDetailsView: React.FC<ModelDetailsViewProps> = ({ model, decodedParams }) => {\n  const [artifacts, artifactLoaded, artifactsLoadError] = useCatalogModelArtifacts(\n    decodedParams.sourceId || '',\n    encodeURIComponent(`${decodedParams.modelName}`),\n  );\n\n  return (\n    <PageSection hasBodyWrapper={false} isFilled>\n      <Sidebar hasBorder hasGutter isPanelRight>\n        <SidebarContent>\n          <Content>\n            <h2>Description</h2>\n            <p data-testid=\"model-long-description\">{model.description || 'No description'}</p>\n            <h2>Model card</h2>\n            {!model.readme && <p className={text.textColorDisabled}>No model card</p>}\n          </Content>\n          {model.readme && (\n            <MarkdownComponent\n              data={model.readme}\n              dataTestId=\"model-card-markdown\"\n              maxHeading={3}\n            />\n          )}\n        </SidebarContent>\n        <SidebarPanel>\n          <DescriptionList isFillColumns>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Labels</DescriptionListTerm>\n              <DescriptionListDescription>\n                <ModelCatalogLabels tasks={model.tasks ?? []} license={model.license} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>License</DescriptionListTerm>\n              <ExternalLink\n                text=\"Agreement\"\n                to={model.licenseLink || ''}\n                testId=\"model-license-link\"\n              />\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Provider</DescriptionListTerm>\n              <DescriptionListDescription>{model.provider || 'N/A'}</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Model location</DescriptionListTerm>\n              {artifactsLoadError ? (\n                <Alert variant=\"danger\" isInline title={artifactsLoadError.name}>\n                  {artifactsLoadError.message}\n                </Alert>\n              ) : !artifactLoaded ? (\n                <Spinner size=\"sm\" />\n              ) : artifacts.items.length > 0 ? (\n                <InlineTruncatedClipboardCopy\n                  testId=\"source-image-location\"\n                  textToCopy={artifacts.items.map((artifact) => artifact.uri)[0] || ''}\n                />\n              ) : (\n                <p className={text.textColorDisabled}>No artifacts available</p>\n              )}\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Last modified</DescriptionListTerm>\n              <DescriptionListDescription>\n                <Icon isInline style={{ marginRight: 4 }}>\n                  <OutlinedClockIcon />\n                </Icon>\n                <ModelTimestamp timeSinceEpoch={model.lastUpdateTimeSinceEpoch} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Published</DescriptionListTerm>\n              <DescriptionListDescription>\n                <Icon isInline style={{ marginRight: 4 }}>\n                  <OutlinedClockIcon />\n                </Icon>\n                <ModelTimestamp timeSinceEpoch={model.createTimeSinceEpoch} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </SidebarPanel>\n      </Sidebar>\n    </PageSection>\n  );\n};\n\nexport default ModelDetailsView;\n","import { FetchState, FetchStateCallbackPromise, NotReadyError, useFetchState } from 'mod-arch-core';\nimport React from 'react';\nimport { CatalogModel } from '~/app/modelCatalogTypes';\nimport { useModelCatalogAPI } from './useModelCatalogAPI';\n\ntype State = CatalogModel | null;\n\nexport const useCatalogModel = (sourceId: string, modelName: string): FetchState<State> => {\n  const { api, apiAvailable } = useModelCatalogAPI();\n\n  const call = React.useCallback<FetchStateCallbackPromise<State>>(\n    (opts) => {\n      if (!apiAvailable) {\n        return Promise.reject(new Error('API not yet available'));\n      }\n      if (!sourceId) {\n        return Promise.reject(new NotReadyError('No source id'));\n      }\n      if (!modelName) {\n        return Promise.reject(new NotReadyError('No model name'));\n      }\n      return api.getCatalogModel(opts, sourceId, modelName);\n    },\n    [api, apiAvailable, sourceId, modelName],\n  );\n  return useFetchState(call, null, {\n    initialPromisePurity: true,\n  });\n};\n","import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { HookNotify, useResolvedExtensions } from '@odh-dashboard/plugin-core';\nimport { isModelCatalogDeployModalExtension } from '~/odh/extension-points';\nimport { CatalogModel, CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { getDeployButtonState } from '~/odh/utils';\nimport { useCatalogModelArtifacts } from '~/app/hooks/modelCatalog/useCatalogModelArtifacts';\nimport { decodeParams } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\n\ntype ModelCatalogDeployModalExtensionProps = {\n  model: CatalogModel;\n  render: (\n    buttonState: { enabled?: boolean; tooltip?: string },\n    onOpenModal: () => void,\n    isModalAvailable: boolean,\n  ) => React.ReactNode;\n};\n\nconst ModelCatalogDeployModalExtension: React.FC<ModelCatalogDeployModalExtensionProps> = ({\n  model,\n  render,\n}) => {\n  const navigate = useNavigate();\n  const [extensions, extensionsLoaded] = useResolvedExtensions(isModelCatalogDeployModalExtension);\n\n  const [openModal, setOpenModal] = React.useState(false);\n\n  const [availablePlatformIds, setAvailablePlatformIds] = React.useState<string[]>([]);\n  const buttonState = getDeployButtonState(availablePlatformIds, true);\n\n  const onOpenModal = React.useCallback(() => {\n    setOpenModal(true);\n  }, [setOpenModal]);\n\n  const isModalAvailable = React.useMemo(\n    () => extensionsLoaded && extensions.length > 0,\n    [extensionsLoaded, extensions],\n  );\n\n  const params = useParams<CatalogModelDetailsParams>();\n  const decodedParams = decodeParams(params);\n  const [artifacts, artifactLoaded, artifactsLoadError] = useCatalogModelArtifacts(\n    decodedParams.sourceId || '',\n    encodeURIComponent(`${decodedParams.modelName}`),\n  );\n  const uri = artifacts.items[0].uri;\n  const loaded = isModalAvailable && artifactLoaded && !artifactsLoadError;\n\n\n  // Create model deploy prefill info for catalog model\n  const modelDeployPrefill = React.useMemo(() => {\n    // For catalog models, we need to create a ModelDeployPrefillInfo\n    // The model.url should contain the model artifact URI\n    return {\n      data: {\n        modelName: model.name,\n        modelArtifactUri: uri,\n        connectionTypeName: uri?.includes('oci://') ? 'oci' : 's3',\n      },\n      loaded: true,\n      error: undefined,\n    };\n  }, [model]);\n\n  const handleSubmit = React.useCallback(() => {\n    setOpenModal(false);\n    navigate('/modelServing');\n  }, [navigate]);\n\n  return (\n    <>\n      {extensions.map((extension) => {\n        return extension.properties.useAvailablePlatformIds && (\n          <HookNotify\n            key={extension.uid}\n            useHook={extension.properties.useAvailablePlatformIds}\n            onNotify={(value) => setAvailablePlatformIds(value ?? [])}\n          />\n        )\n      })}\n      {render(buttonState, onOpenModal, loaded)}\n      {openModal && extensions.map((extension) => {\n        return extension.properties.modalComponent && (\n          <extension.properties.modalComponent\n            key={extension.uid}\n            modelDeployPrefill={modelDeployPrefill}\n            onSubmit={handleSubmit}\n            onClose={() => setOpenModal(false)}\n          />\n        )\n      })}\n    </>\n  );\n};\n\nexport default ModelCatalogDeployModalExtension;\n","import React from 'react';\nimport { Button, ButtonVariant, Tooltip } from '@patternfly/react-core';\nimport { CatalogModel } from '~/app/modelCatalogTypes';\nimport ModelCatalogDeployModalExtension from './ModelCatalogDeployModalExtension';\n\nexport const ModelCatalogDeployButton = ({\n  model,\n  renderRegisterButton,\n}: {\n  model: CatalogModel;\n  renderRegisterButton?: (isDeployAvailable: boolean) => React.ReactNode;\n}) => (\n  <ModelCatalogDeployModalExtension\n    model={model}\n    render={(buttonState, onOpenModal, isModalAvailable) => {\n      const deployButton = (\n        <Button\n          id=\"deploy-button\"\n          aria-label=\"Deploy model\"\n          variant={ButtonVariant.primary}\n          onClick={buttonState?.enabled ? onOpenModal : undefined}\n          isAriaDisabled={!buttonState?.enabled}\n          data-testid=\"deploy-button\"\n        >\n          Deploy model\n        </Button>\n      );\n\n      const wrappedDeployButton = isModalAvailable ? (\n        buttonState.tooltip ? (\n          <Tooltip content={buttonState.tooltip}>{deployButton}</Tooltip>\n        ) : (\n          deployButton\n        )\n      ) : null;\n\n      return (\n        <>\n          {wrappedDeployButton}\n          {renderRegisterButton?.(isModalAvailable)}\n        </>\n      );\n    }}\n  />\n);\n","import React from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport {\n  ActionList,\n  Breadcrumb,\n  BreadcrumbItem,\n  Content,\n  ContentVariants,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  Button,\n  Popover,\n  ActionListGroup,\n  Skeleton,\n} from '@patternfly/react-core';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { decodeParams, getModelName } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\nimport ModelDetailsView from '~/app/pages/modelCatalog/screens/ModelDetailsView';\nimport { useCatalogModel } from '~/app/hooks/modelCatalog/useCatalogModel';\nimport { ModelRegistrySelectorContext } from '~/app/context/ModelRegistrySelectorContext';\nimport { getRegisterCatalogModelRoute } from '~/app/routes/modelCatalog/catalogModelRegister';\nimport { ModelCatalogDeployButton } from '~/odh/components/ModelCatalogDeployButton';\nimport { CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { useCatalogModelArtifacts } from '~/app/hooks/modelCatalog/useCatalogModelArtifacts';\n\nconst ModelDetailsPage: React.FC = () => {\n  const params = useParams<CatalogModelDetailsParams>();\n  const decodedParams = decodeParams(params);\n  const navigate = useNavigate();\n\n  const state = useCatalogModel(\n    decodedParams.sourceId || '',\n    encodeURIComponent(`${decodedParams.modelName}`),\n  );\n  const [model, modelLoaded, modelLoadError] = state;\n  const { modelRegistries, modelRegistriesLoadError, modelRegistriesLoaded } = React.useContext(\n    ModelRegistrySelectorContext,\n  );\n\n  const [artifacts, artifactLoaded, artifactsLoadError] = useCatalogModelArtifacts(\n    decodedParams.sourceId || '',\n    encodeURIComponent(encodeURIComponent(`${decodedParams.modelName}`)) || '',\n  );\n\n  const registerButtonPopover = (headerContent: string, bodyContent: string, variant: 'primary' | 'secondary' = 'primary') => (\n    <Popover\n      headerContent={headerContent}\n      triggerAction=\"hover\"\n      data-testid=\"register-catalog-model-popover\"\n      bodyContent={<div>{bodyContent}</div>}\n    >\n      <Button variant={variant} isAriaDisabled data-testid=\"register-model-button\">\n        Register model\n      </Button>\n    </Popover>\n  );\n\n  const registerModelButton = (variant: 'primary' | 'secondary' = 'primary') => {\n    if (\n      !modelRegistriesLoaded ||\n      modelRegistriesLoadError ||\n      !artifactLoaded ||\n      artifactsLoadError\n    ) {\n      return null;\n    }\n\n    return modelRegistries.length === 0 ? (\n      registerButtonPopover(\n        'Request access to a model registry',\n        'To request a new model registry, or to request permission to access an existing model registry, contact your administrator.',\n        variant\n      )\n    ) : artifacts.items.length === 0 ? (\n      registerButtonPopover('', 'Model location is unavailable', variant)\n    ) : (\n      <Button\n        data-testid=\"register-model-button\"\n        variant={variant}\n        onClick={() => {\n          navigate(getRegisterCatalogModelRoute(decodedParams.sourceId, decodedParams.modelName));\n        }}\n      >\n        Register model\n      </Button>\n    );\n  };\n\n  return (\n    <ApplicationsPage\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/model-catalog\">Model catalog</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>{getModelName(model?.name || '') || 'Details'}</BreadcrumbItem>\n        </Breadcrumb>\n      }\n      title={\n        model ? (\n          <Flex\n            spaceItems={{ default: 'spaceItemsMd' }}\n            alignItems={{ default: 'alignItemsCenter' }}\n          >\n            {model.logo ? (\n              <img src={model.logo} alt=\"model logo\" style={{ height: '56px', width: '56px' }} />\n            ) : (\n              <Skeleton\n                shape=\"square\"\n                width=\"56px\"\n                height=\"56px\"\n                screenreaderText=\"Brand image loading\"\n              />\n            )}\n            <Stack>\n              <StackItem>\n                <Flex\n                  spaceItems={{ default: 'spaceItemsSm' }}\n                  alignItems={{ default: 'alignItemsCenter' }}\n                >\n                  <FlexItem>{getModelName(model.name)}</FlexItem>\n                </Flex>\n              </StackItem>\n              <StackItem>\n                <Content component={ContentVariants.small}>Provided by {model.provider}</Content>\n              </StackItem>\n            </Stack>\n          </Flex>\n        ) : (\n          'Model details'\n        )\n      }\n      empty={!model}\n      emptyStatePage={\n        !model ? (\n          <div>\n            Details not found. Return to <Link to=\"/model-catalog\">Model catalog</Link>\n          </div>\n        ) : undefined\n      }\n      loadError={modelLoadError}\n      loaded={modelLoaded}\n      errorMessage=\"Unable to load model catalog\"\n      provideChildrenPadding\n      headerAction={\n        modelLoaded &&\n        !modelLoadError &&\n        model && (\n          <ActionList>\n            <ActionListGroup>\n              <ModelCatalogDeployButton\n                model={model}\n                renderRegisterButton={(isDeployAvailable) =>\n                  registerModelButton(isDeployAvailable ? 'secondary' : 'primary')\n                }\n              />\n            </ActionListGroup>\n          </ActionList>\n        )\n      }\n    >\n      {model && <ModelDetailsView model={model} decodedParams={decodedParams} />}\n    </ApplicationsPage>\n  );\n};\n\nexport default ModelDetailsPage;\n","import { encodeParams } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\n\nexport const getRegisterCatalogModelRoute = (id = '', name = ''): string => {\n  const { sourceId = '', modelName = '' } = encodeParams({\n    sourceId: id,\n    modelName: name,\n  });\n  return `/model-catalog/${sourceId}/${modelName}/register` || '#';\n};\n","import { Alert, Form, FormGroup, PageSection, Stack, StackItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  ModelLocationType,\n  RegisterCatalogModelFormData,\n  useRegisterCatalogModelData,\n} from '~/app/pages/modelRegistry/screens/RegisterModel/useRegisterModelData';\nimport RegistrationCommonFormSections from '~/app/pages/modelRegistry/screens/RegisterModel/RegistrationCommonFormSections';\nimport {\n  isModelNameExisting,\n  isNameValid,\n  isRegisterCatalogModelSubmitDisabled,\n  registerModel,\n} from '~/app/pages/modelRegistry/screens/RegisterModel/utils';\nimport { SubmitLabel } from '~/app/pages/modelRegistry/screens/RegisterModel/const';\nimport RegisterModelDetailsFormSection from '~/app/pages/modelRegistry/screens/RegisterModel/RegisterModelDetailsFormSection';\nimport RegistrationFormFooter from '~/app/pages/modelRegistry/screens/RegisterModel/RegistrationFormFooter';\nimport { ModelRegistry, ModelRegistryMetadataType } from '~/app/types';\nimport { ModelRegistryContext } from '~/app/context/ModelRegistryContext';\nimport useRegisteredModels from '~/app/hooks/useRegisteredModels';\nimport useUser from '~/app/hooks/useUser';\nimport ModelRegistrySelector from '~/app/pages/modelRegistry/screens/ModelRegistrySelector';\nimport { registeredModelUrl } from '~/app/pages/modelRegistry/screens/routeUtils';\nimport {\n  catalogParamsToModelSourceProperties,\n  getLabelsFromModelTasks,\n  getLabelsFromCustomProperties,\n} from '~/concepts/modelRegistry/utils';\nimport {\n  CatalogModel,\n  CatalogModelArtifact,\n  CatalogModelDetailsParams,\n} from '~/app/modelCatalogTypes';\nimport { getCatalogModelDetailsRoute } from '~/app/routes/modelCatalog/catalogModelDetails';\nimport { getModelName } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\n\ninterface RegisterCatalogModelFormProps {\n  model: CatalogModel | null;\n  preferredModelRegistry: ModelRegistry;\n  artifacts: CatalogModelArtifact[];\n  decodedParams: CatalogModelDetailsParams;\n  removeChildrenTopPadding?: boolean;\n}\n\nconst RegisterCatalogModelForm: React.FC<RegisterCatalogModelFormProps> = ({\n  model,\n  preferredModelRegistry,\n  artifacts,\n  decodedParams,\n  removeChildrenTopPadding,\n}) => {\n  const navigate = useNavigate();\n  const { apiState } = React.useContext(ModelRegistryContext);\n  const [registeredModels, registeredModelsLoaded] = useRegisteredModels();\n  const user = useUser();\n\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [submitError, setSubmitError] = React.useState<Error | undefined>(undefined);\n\n  const sourceProperties = catalogParamsToModelSourceProperties(decodedParams);\n  const tasks = getLabelsFromModelTasks(model);\n  const uri = artifacts[0] ? artifacts[0].uri : '';\n\n  const initialFormData: RegisterCatalogModelFormData = {\n    modelName: getModelName(decodedParams.modelName || ''),\n    modelDescription: model?.description || '',\n    versionName: 'Version 1',\n    versionDescription: '',\n    sourceModelFormat: '',\n    sourceModelFormatVersion: '',\n    modelLocationType: ModelLocationType.URI,\n    modelLocationEndpoint: '',\n    modelLocationBucket: '',\n    modelLocationRegion: '',\n    modelLocationPath: '',\n    modelLocationURI: uri || '',\n    modelRegistry: preferredModelRegistry.name,\n    modelCustomProperties: { ...getLabelsFromCustomProperties(model?.customProperties), ...tasks },\n    versionCustomProperties: {\n      ...model?.customProperties,\n      License: {\n        // eslint-disable-next-line camelcase\n        string_value: model?.licenseLink || '',\n        metadataType: ModelRegistryMetadataType.STRING,\n      },\n      Provider: {\n        // eslint-disable-next-line camelcase\n        string_value: model?.provider ?? '',\n        metadataType: ModelRegistryMetadataType.STRING,\n      },\n      ...tasks,\n    },\n    additionalArtifactProperties: sourceProperties,\n  };\n\n  const [formData, setData] = useRegisterCatalogModelData(initialFormData);\n\n  const [submittedRegisteredModelName, setSubmittedRegisteredModelName] =\n    React.useState<string>('');\n  const [submittedVersionName, setSubmittedVersionName] = React.useState<string>('');\n  const [registrationErrorType, setRegistrationErrorType] = React.useState<string | undefined>(\n    undefined,\n  );\n\n  const isModelNameValid = isNameValid(formData.modelName);\n  const isModelNameDuplicate = registeredModelsLoaded\n    ? isModelNameExisting(formData.modelName, registeredModels)\n    : false;\n  const hasModelNameError = !isModelNameValid || isModelNameDuplicate;\n\n  const isSubmitDisabled =\n    isSubmitting || isRegisterCatalogModelSubmitDisabled(formData, registeredModels);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    setSubmitError(undefined);\n\n    // Additional validation before submission\n    if (!formData.modelLocationURI || formData.modelLocationURI.trim() === '') {\n      setSubmitError(new Error('Model location URI is required'));\n      setIsSubmitting(false);\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!apiState.api) {\n      setSubmitError(new Error('Model registry API is not available'));\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      const {\n        data: { registeredModel, modelVersion, modelArtifact },\n        errors,\n      } = await registerModel(apiState, formData, user.userId || 'user');\n\n      if (registeredModel && modelVersion && modelArtifact) {\n        const navigationPath = registeredModelUrl(registeredModel.id, preferredModelRegistry.name);\n        navigate(navigationPath);\n      } else if (Object.keys(errors).length > 0) {\n        setIsSubmitting(false);\n        setSubmittedRegisteredModelName(formData.modelName);\n        setSubmittedVersionName(formData.versionName);\n        const resourceName = Object.keys(errors)[0];\n        setRegistrationErrorType(resourceName);\n        setSubmitError(errors[resourceName]);\n      }\n    } catch (error) {\n      setSubmitError(error instanceof Error ? error : new Error('Registration failed'));\n      setIsSubmitting(false);\n    }\n  };\n\n  const onCancel = () => {\n    navigate(\n      getCatalogModelDetailsRoute({\n        sourceId: decodedParams.sourceId,\n        modelName: decodedParams.modelName,\n      }),\n    );\n  };\n\n  return (\n    <>\n      <PageSection\n        hasBodyWrapper={false}\n        style={removeChildrenTopPadding ? { paddingTop: 0 } : undefined}\n        isFilled\n      >\n        <Form isWidthLimited>\n          <Stack hasGutter>\n            <StackItem>\n              <FormGroup\n                id=\"model-registry-container\"\n                label=\"Model registry\"\n                isRequired\n                fieldId=\"model-registry-name\"\n              >\n                <ModelRegistrySelector\n                  modelRegistry={formData.modelRegistry}\n                  onSelection={(mr) => setData('modelRegistry', mr)}\n                  primary\n                  isFullWidth\n                  hasError={false}\n                />\n              </FormGroup>\n            </StackItem>\n            <StackItem>\n              <Alert\n                variant=\"info\"\n                isInline\n                isPlain\n                title=\"Additional model metadata, such as labels, provider, and license, will be available to view and edit after registration is complete.\"\n              />\n            </StackItem>\n            <StackItem>\n              <RegisterModelDetailsFormSection\n                formData={formData}\n                setData={setData}\n                hasModelNameError={hasModelNameError}\n                isModelNameDuplicate={isModelNameDuplicate}\n              />\n              <RegistrationCommonFormSections\n                formData={formData}\n                setData={setData}\n                isFirstVersion={false}\n                isCatalogModel\n              />\n            </StackItem>\n          </Stack>\n        </Form>\n      </PageSection>\n      <RegistrationFormFooter\n        submitLabel={SubmitLabel.REGISTER_MODEL}\n        submitError={submitError}\n        isSubmitDisabled={isSubmitDisabled}\n        isSubmitting={isSubmitting}\n        onSubmit={handleSubmit}\n        onCancel={onCancel}\n        registrationErrorType={registrationErrorType}\n        versionName={submittedVersionName}\n        modelName={submittedRegisteredModelName}\n      />\n    </>\n  );\n};\n\nexport default RegisterCatalogModelForm;\n","import * as React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Link, useParams } from 'react-router-dom';\nimport { ApplicationsPage } from 'mod-arch-shared';\nimport { ModelRegistryContextProvider } from '~/app/context/ModelRegistryContext';\nimport {\n  ModelRegistrySelectorContextProvider,\n  ModelRegistrySelectorContext,\n} from '~/app/context/ModelRegistrySelectorContext';\nimport { useCatalogModel } from '~/app/hooks/modelCatalog/useCatalogModel';\nimport { CatalogModelDetailsParams } from '~/app/modelCatalogTypes';\nimport { useCatalogModelArtifacts } from '~/app/hooks/modelCatalog/useCatalogModelArtifacts';\nimport { getCatalogModelDetailsRoute } from '~/app/routes/modelCatalog/catalogModelDetails';\nimport { decodeParams, getModelName } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\nimport RegisterCatalogModelForm from './RegisterCatalogModelForm';\n\nconst RegisterCatalogModelPageInner: React.FC = () => {\n  const params = useParams<CatalogModelDetailsParams>();\n  const decodedParams = decodeParams(params);\n  const { modelRegistries, modelRegistriesLoaded } = React.useContext(ModelRegistrySelectorContext);\n\n  const state = useCatalogModel(\n    decodedParams.sourceId || '',\n    encodeURIComponent(`${decodedParams.modelName}`),\n  );\n  const [model, modelLoaded, modelLoadError] = state;\n  const [artifacts, artifactLoaded, artifactsLoadError] = useCatalogModelArtifacts(\n    decodedParams.sourceId || '',\n    encodeURIComponent(`${decodedParams.modelName}`),\n  );\n\n  const preferredModelRegistry = modelRegistries.length > 0 ? modelRegistries[0] : null;\n\n  // Check to see if data is loaded\n  const isDataReady =\n    modelLoaded &&\n    artifactLoaded &&\n    !artifactsLoadError &&\n    !modelLoadError &&\n    model &&\n    modelRegistriesLoaded &&\n    modelRegistries.length > 0;\n\n  return (\n    <ApplicationsPage\n      title={`Register ${getModelName(model?.name || '') || ''} model`}\n      description=\"Create and register the first version of a new model.\"\n      breadcrumb={\n        <Breadcrumb>\n          <BreadcrumbItem render={() => <Link to=\"/model-catalog\">Model catalog</Link>} />\n          <BreadcrumbItem\n            data-testid=\"breadcrumb-model-name\"\n            render={() =>\n              !model?.name ? (\n                'Loading...'\n              ) : (\n                <Link\n                  to={getCatalogModelDetailsRoute({\n                    sourceId: decodedParams.sourceId,\n                    modelName: decodedParams.modelName,\n                  })}\n                >\n                  {getModelName(model.name)}\n                </Link>\n              )\n            }\n          />\n          <BreadcrumbItem data-testid=\"breadcrumb-version-name\" isActive>\n            Register model\n          </BreadcrumbItem>\n        </Breadcrumb>\n      }\n      loaded={modelLoaded}\n      loadError={modelLoadError}\n      empty={false}\n    >\n      {isDataReady && preferredModelRegistry ? (\n        <ModelRegistryContextProvider modelRegistryName={preferredModelRegistry.name}>\n          <RegisterCatalogModelForm\n            model={model}\n            preferredModelRegistry={preferredModelRegistry}\n            artifacts={artifacts.items}\n            decodedParams={decodedParams}\n            removeChildrenTopPadding\n          />\n        </ModelRegistryContextProvider>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </ApplicationsPage>\n  );\n};\n\nconst RegisterCatalogModelPage: React.FC = () => (\n  <ModelRegistrySelectorContextProvider>\n    <RegisterCatalogModelPageInner />\n  </ModelRegistrySelectorContextProvider>\n);\n\nexport default RegisterCatalogModelPage;\n","import * as React from 'react';\n\ntype ScrollViewOnMountProps = {\n  shouldScroll: boolean;\n};\n\nconst ScrollViewOnMount: React.FC<ScrollViewOnMountProps> = ({ shouldScroll }) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (shouldScroll && ref.current) {\n      ref.current.scrollIntoView();\n    }\n  }, [shouldScroll]);\n\n  return <div ref={ref} />;\n};\n\nexport default ScrollViewOnMount;\n","import React from 'react';\nimport { NotReadyError } from 'mod-arch-core';\nimport { CatalogModel } from '~/app/modelCatalogTypes';\nimport { useModelCatalogAPI } from './useModelCatalogAPI';\n\ntype PaginatedCatalogModelList = {\n  items: CatalogModel[];\n  size: number;\n  pageSize: number;\n  nextPageToken: string;\n  loadMore: () => void;\n  isLoadingMore: boolean;\n  hasMore: boolean;\n};\n\ninterface CatalogModelsState {\n  items: CatalogModel[];\n  nextPageToken: string;\n  totalSize: number;\n  isLoading: boolean;\n  isLoadingMore: boolean;\n  loaded: boolean;\n  error: Error | undefined;\n}\n\ntype CatalogModelList = [\n  models: PaginatedCatalogModelList,\n  catalogModelLoaded: boolean,\n  catalogModelLoadError: Error | undefined,\n  refresh: () => void,\n];\n\nexport const useCatalogModelsBySources = (\n  sourceId: string,\n  pageSize = 10,\n  searchQuery = '',\n): CatalogModelList => {\n  const { api, apiAvailable } = useModelCatalogAPI();\n\n  const [state, setState] = React.useState<CatalogModelsState>({\n    items: [],\n    nextPageToken: '',\n    totalSize: 0,\n    isLoading: false,\n    isLoadingMore: false,\n    loaded: false,\n    error: undefined,\n  });\n\n  const fetchModels = React.useCallback(\n    async (nextPageToken?: string) => {\n      const isLoadMore = Boolean(nextPageToken);\n\n      setState((prev) => ({\n        ...prev,\n        isLoading: !isLoadMore,\n        isLoadingMore: isLoadMore,\n      }));\n\n      try {\n        if (!apiAvailable) {\n          return await Promise.reject(new Error('API not yet available'));\n        }\n        if (!sourceId) {\n          return await Promise.reject(new NotReadyError('No source id'));\n        }\n        const response = await api.getCatalogModelsBySource(\n          {},\n          sourceId,\n          {\n            pageSize: pageSize.toString(),\n            ...(nextPageToken && { nextPageToken }),\n          },\n          searchQuery && searchQuery.trim() ? searchQuery.trim() : undefined,\n        );\n\n        setState((prev) => ({\n          items: isLoadMore ? [...prev.items, ...response.items] : response.items,\n          nextPageToken: response.nextPageToken,\n          totalSize: response.size,\n          isLoading: false,\n          isLoadingMore: false,\n          loaded: true,\n          error: undefined,\n        }));\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          isLoadingMore: false,\n          loaded: true,\n          error: new Error(\n            `Failed to load models ${error instanceof Error ? error.message : String(error)}`,\n          ),\n        }));\n      }\n    },\n    [api, sourceId, pageSize, apiAvailable, searchQuery],\n  );\n\n  React.useEffect(() => {\n    fetchModels();\n  }, [fetchModels]);\n\n  const loadMore = React.useCallback(() => {\n    if (state.nextPageToken && !state.isLoadingMore) {\n      fetchModels(state.nextPageToken);\n    }\n  }, [fetchModels, state.nextPageToken, state.isLoadingMore]);\n\n  const refresh = React.useCallback(() => {\n    setState((prev) => ({ ...prev, items: [], nextPageToken: '' }));\n    fetchModels();\n  }, [fetchModels]);\n\n  return [\n    {\n      items: state.items,\n      size: state.totalSize,\n      pageSize: 10,\n      nextPageToken: state.nextPageToken,\n      loadMore,\n      isLoadingMore: state.isLoadingMore,\n      hasMore: Boolean(state.nextPageToken),\n    },\n    state.loaded,\n    state.error,\n    refresh,\n  ];\n};\n","import React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Flex,\n  FlexItem,\n  Label,\n  Skeleton,\n  Stack,\n  StackItem,\n  Truncate,\n} from '@patternfly/react-core';\nimport { useNavigate } from 'react-router-dom';\nimport { CatalogModel, CatalogSource } from '~/app/modelCatalogTypes';\nimport { getModelName } from '~/app/pages/modelCatalog/utils/modelCatalogUtils';\nimport { catalogModelDetailsFromModel } from '~/app/routes/modelCatalog/catalogModel';\nimport ModelCatalogLabels from './ModelCatalogLabels';\n\ntype ModelCatalogCardProps = {\n  model: CatalogModel;\n  source: CatalogSource | undefined;\n  truncate?: boolean;\n};\n\nconst ModelCatalogCard: React.FC<ModelCatalogCardProps> = ({ model, source, truncate = false }) => {\n  const navigate = useNavigate();\n\n  return (\n    <Card isFullHeight data-testid=\"model-catalog-card\" key={`${model.name}/${model.source_id}`}>\n      <CardHeader>\n        <CardTitle>\n          <Flex alignItems={{ default: 'alignItemsCenter' }}>\n            {model.logo ? (\n              <img src={model.logo} alt=\"model logo\" style={{ height: '56px', width: '56px' }} />\n            ) : (\n              <Skeleton\n                shape=\"square\"\n                width=\"56px\"\n                height=\"56px\"\n                screenreaderText=\"Brand image loading\"\n              />\n            )}\n            <FlexItem align={{ default: 'alignRight' }}>\n              {source && <Label>{source.name}</Label>}\n            </FlexItem>\n          </Flex>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Stack hasGutter>\n          <StackItem isFilled>\n            <Button\n              data-testid=\"model-catalog-detail-link\"\n              variant=\"link\"\n              isInline\n              component=\"a\"\n              onClick={() => {\n                navigate(catalogModelDetailsFromModel(model.name, source?.id));\n              }}\n              style={{\n                fontSize: 'var(--pf-t--global--font--size--body--default)',\n                fontWeight: 'var(--pf-t--global--font--weight--body--bold)',\n              }}\n            >\n              {truncate ? (\n                <Truncate\n                  data-testid=\"model-catalog-card-name\"\n                  content={model.name}\n                  position=\"middle\"\n                  tooltipPosition=\"top\"\n                  style={{ textDecoration: 'underline' }}\n                />\n              ) : (\n                <span>{getModelName(model.name)}</span>\n              )}\n            </Button>\n          </StackItem>\n          <StackItem isFilled data-testid=\"model-catalog-card-description\">\n            {truncate ? (\n              <div\n                style={{\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  WebkitLineClamp: 4,\n                  WebkitBoxOrient: 'vertical',\n                  display: '-webkit-box',\n                }}\n              >\n                {model.description}\n              </div>\n            ) : (\n              model.description\n            )}\n          </StackItem>\n        </Stack>\n      </CardBody>\n      <CardFooter>\n        <ModelCatalogLabels\n          tasks={model.tasks ?? []}\n          license={model.license}\n          provider={model.provider}\n        />\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ModelCatalogCard;\n","import {\n  Alert,\n  Bullseye,\n  Button,\n  EmptyState,\n  Gallery,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { ModelCatalogContext } from '~/app/context/modelCatalog/ModelCatalogContext';\nimport { useCatalogModelsBySources } from '~/app/hooks/modelCatalog/useCatalogModelsBySource';\nimport { CatalogModel } from '~/app/modelCatalogTypes';\nimport ModelCatalogCard from '~/app/pages/modelCatalog/components/ModelCatalogCard';\nimport EmptyModelCatalogState from '~/app/pages/modelCatalog/EmptyModelCatalogState';\n\ntype ModelCatalogPageProps = {\n  searchTerm: string;\n};\n\nconst ModelCatalogPage: React.FC<ModelCatalogPageProps> = ({ searchTerm }) => {\n  const { selectedSource } = React.useContext(ModelCatalogContext);\n  const [catalogModels, catalogModelsLoaded, catalogModelsLoadError, refresh] =\n    useCatalogModelsBySources(selectedSource?.id || '', 10, searchTerm);\n\n  if (!catalogModelsLoaded) {\n    return (\n      <EmptyState>\n        <Spinner />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          Loading model catalog...\n        </Title>\n      </EmptyState>\n    );\n  }\n\n  if (catalogModelsLoadError) {\n    return (\n      <Alert variant=\"danger\" title=\"Failed to load model catalog\" isInline>\n        {catalogModelsLoadError.message}\n        <Button variant=\"link\" onClick={refresh}>\n          Try again\n        </Button>\n      </Alert>\n    );\n  }\n\n  if (catalogModels.items.length === 0) {\n    return (\n      <EmptyModelCatalogState\n        testid=\"empty-model-catalog-state\"\n        title=\"No result found\"\n        headerIcon={SearchIcon}\n        description={\n          <>\n            No models from the <b>{selectedSource?.name}</b> source match the search criteria.\n            Adjust your search, or select a different source\n          </>\n        }\n      />\n    );\n  }\n\n  return (\n    <>\n      <Gallery hasGutter minWidths={{ default: '300px' }}>\n        {catalogModels.items.map((model: CatalogModel) => (\n          <ModelCatalogCard\n            model={model}\n            source={selectedSource}\n            key={`${model.name}/${model.source_id}`}\n          />\n        ))}\n      </Gallery>\n      {catalogModels.hasMore && (\n        <div style={{ marginTop: '2rem' }}>\n          <Bullseye>\n            {catalogModels.isLoadingMore ? (\n              <>\n                <Spinner size=\"lg\" className=\"pf-v5-u-mb-md\" />\n                <Title size=\"lg\" headingLevel=\"h5\">\n                  Loading more catalog models...\n                </Title>\n              </>\n            ) : (\n              <Button variant=\"tertiary\" onClick={catalogModels.loadMore} size=\"lg\">\n                Load more models\n              </Button>\n            )}\n          </Bullseye>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ModelCatalogPage;\n","import * as React from 'react';\nimport { PageSection } from '@patternfly/react-core';\nimport { ApplicationsPage, ProjectObjectType, TitleWithIcon } from 'mod-arch-shared';\nimport ScrollViewOnMount from '~/app/shared/components/ScrollViewOnMount';\nimport { modelCatalogUrl } from '~/app/routes/modelCatalog/catalogModel';\nimport ModelCatalogPage from './ModelCatalogPage';\nimport ModelCatalogSourceSelectorNavigator from './ModelCatalogSourceSelectorNavigator';\n\nconst ModelCatalog: React.FC = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const handleSearch = React.useCallback((term: string) => {\n    setSearchTerm(term);\n  }, []);\n\n  const handleClearSearch = React.useCallback(() => {\n    setSearchTerm('');\n  }, []);\n\n  return (\n    <>\n      <ScrollViewOnMount shouldScroll />\n      <ApplicationsPage\n        title={<TitleWithIcon title=\"Model Catalog\" objectType={ProjectObjectType.modelCatalog} />}\n        description=\"Discover models that are available for your organization to register, deploy, and customize.\"\n        empty={false}\n        headerContent={\n          <ModelCatalogSourceSelectorNavigator\n            getRedirectPath={(sourceId: string) => modelCatalogUrl(sourceId)}\n            searchTerm={searchTerm}\n            onSearch={handleSearch}\n            onClearSearch={handleClearSearch}\n          />\n        }\n        loaded\n        provideChildrenPadding\n      >\n        <PageSection isFilled>\n          <ModelCatalogPage searchTerm={searchTerm} />\n        </PageSection>\n      </ApplicationsPage>\n    </>\n  );\n};\n\nexport default ModelCatalog;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ModelCatalogContextProvider } from '~/app/context/modelCatalog/ModelCatalogContext';\nimport { modelCatalogUrl } from '~/app/routes/modelCatalog/catalogModel';\nimport ModelCatalogCoreLoader from './ModelCatalogCoreLoader';\nimport ModelDetailsPage from './screens/ModelDetailsPage';\nimport RegisterCatalogModelPage from './screens/RegisterCatalogModelPage';\nimport ModelCatalog from './screens/ModelCatalog';\n\nconst ModelCatalogRoutes: React.FC = () => (\n  <ModelCatalogContextProvider>\n    <Routes>\n      <Route\n        path=\"/:sourceId?/*\"\n        element={\n          <ModelCatalogCoreLoader\n            getInvalidRedirectPath={(sourceId) => modelCatalogUrl(sourceId)}\n          />\n        }\n      >\n        <Route index element={<ModelCatalog />} />\n        <Route path=\":modelName\">\n          <Route index element={<ModelDetailsPage />} />\n          <Route path=\"register\" element={<RegisterCatalogModelPage />} />\n          <Route path=\"*\" element={<Navigate to=\".\" />} />\n        </Route>\n        <Route path=\"*\" element={<Navigate to=\".\" />} />\n      </Route>\n    </Routes>\n  </ModelCatalogContextProvider>\n);\n\nexport default ModelCatalogRoutes;\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","isModelCatalogDeployModalExtension","extension","type","getCatalogModelsBySource","hostPath","queryParams","opts","sourceId","paginationParams","searchKeyword","allParams","source","q","then","response","data","Error","getListSources","getCatalogModel","modelName","getListCatalogModelArtifacts","queryParameters","createAPI","path","useAPIState","ModelCatalogContext","catalogSourcesLoaded","catalogSourcesLoadError","undefined","catalogSources","selectedSource","updateSelectedSource","apiState","apiAvailable","api","refreshAPIState","ModelCatalogContextProvider","children","useQueryParamNamespaces","isLoaded","error","call","Promise","reject","useFetchState","items","size","pageSize","nextPageToken","initialPromisePurity","useCatalogSources","setSelectedSource","contextValue","Provider","value","modelCatalogUrl","testid","title","description","headerIcon","customAction","EmptyState","icon","titleText","variant","EmptyStateVariant","sm","EmptyStateBody","EmptyStateFooter","EmptyStateActions","onSelection","searchTerm","onSearch","onClearSearch","primary","open","setOpen","inputValue","setInputValue","selection","find","isMUITheme","useThemeContext","enabledCatalogSources","selector","Dropdown","shouldFocusToggleOnSelect","toggle","toggleRef","MenuToggle","ref","onClick","isExpanded","name","isOpen","popperProps","appendTo","DropdownList","map","DropdownItem","isSelected","key","catalogSource","enabledSource","Toolbar","ToolbarContent","Flex","ToolbarToggleGroup","breakpoint","toggleIcon","ToolbarGroup","gap","default","alignItems","ToolbarItem","ThemeAwareSearchInput","fieldLabel","className","placeholder","style","minWidth","onChange","_","trim","onClear","Button","isInline","iconPosition","getRedirectPath","isPrimary","navigate","useNavigate","params","useParams","decodedParams","EmptyStateErrorMessage","bodyText","getInvalidRedirectPath","modelCatalogFromRoute","Bullseye","Alert","message","ApplicationsPage","A","TitleWithIcon","objectType","modelCatalog","headerContent","empty","emptyStatePage","loaded","renderStateProps","length","src","modelRegistrySettings","alt","KubeflowDocs","WhosMyAdministrator","redirectCatalogSource","Navigate","to","replace","foundCatalogSource","Outlet","provideChildrenPadding","useModelCatalogAPI","refreshAllAPI","useCatalogModelArtifacts","tasks","license","provider","LabelGroup","numLabels","isCompact","task","Label","color","text","testId","window","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","headingMap","ContentVariants","h1","h2","h3","h4","h5","h6","shiftHeadingLevel","level","maxHeading","adjusted","Math","min","href","summary","setIsExpanded","useState","processedSummary","processedChildren","child","CodeBlock","CodeBlockCode","String","props","padding","margin","textAlign","Content","marginLeft","marginTop","dataTestId","components","p","component","a","details","toArray","content","filter","code","node","join","tagName","blockquote","ul","List","ol","rest","li","ListItem","table","Table","tbody","Tbody","thead","Thead","tr","Tr","td","width","Td","th","Th","img","rehypePlugins","remarkPlugins","model","artifacts","artifactLoaded","artifactsLoadError","encodeURIComponent","PageSection","hasBodyWrapper","isFilled","Sidebar","hasBorder","hasGutter","isPanelRight","SidebarContent","readme","textColorDisabled","SidebarPanel","DescriptionList","isFillColumns","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","licenseLink","InlineTruncatedClipboardCopy","textToCopy","artifact","uri","Spinner","Icon","marginRight","ModelTimestamp","timeSinceEpoch","lastUpdateTimeSinceEpoch","createTimeSinceEpoch","useCatalogModel","render","extensions","extensionsLoaded","useResolvedExtensions","openModal","setOpenModal","availablePlatformIds","setAvailablePlatformIds","buttonState","onOpenModal","isModalAvailable","modelDeployPrefill","modelArtifactUri","connectionTypeName","includes","handleSubmit","properties","useAvailablePlatformIds","HookNotify","uid","useHook","onNotify","modalComponent","onSubmit","onClose","ModelCatalogDeployButton","renderRegisterButton","deployButton","ButtonVariant","enabled","isAriaDisabled","wrappedDeployButton","tooltip","Tooltip","state","modelLoaded","modelLoadError","modelRegistries","modelRegistriesLoadError","modelRegistriesLoaded","ModelRegistrySelectorContext","registerButtonPopover","bodyContent","Popover","triggerAction","registerModelButton","getRegisterCatalogModelRoute","breadcrumb","Breadcrumb","BreadcrumbItem","Link","isActive","spaceItems","logo","height","Skeleton","shape","screenreaderText","Stack","StackItem","FlexItem","small","loadError","errorMessage","headerAction","ActionList","ActionListGroup","isDeployAvailable","preferredModelRegistry","removeChildrenTopPadding","ModelRegistryContext","registeredModels","registeredModelsLoaded","useRegisteredModels","user","useUser","isSubmitting","setIsSubmitting","submitError","setSubmitError","sourceProperties","initialFormData","modelDescription","versionName","versionDescription","sourceModelFormat","sourceModelFormatVersion","modelLocationType","URI","modelLocationEndpoint","modelLocationBucket","modelLocationRegion","modelLocationPath","modelLocationURI","modelRegistry","modelCustomProperties","customProperties","versionCustomProperties","License","string_value","metadataType","STRING","additionalArtifactProperties","formData","setData","submittedRegisteredModelName","setSubmittedRegisteredModelName","submittedVersionName","setSubmittedVersionName","registrationErrorType","setRegistrationErrorType","isModelNameValid","isModelNameDuplicate","hasModelNameError","isSubmitDisabled","paddingTop","Form","isWidthLimited","FormGroup","label","isRequired","fieldId","ModelRegistrySelector","mr","isFullWidth","hasError","isPlain","RegisterModelDetailsFormSection","RegistrationCommonFormSections","isFirstVersion","isCatalogModel","RegistrationFormFooter","submitLabel","REGISTER_MODEL","async","registeredModel","modelVersion","modelArtifact","errors","userId","navigationPath","Object","keys","resourceName","onCancel","RegisterCatalogModelPageInner","isDataReady","modelRegistryName","shouldScroll","current","scrollIntoView","truncate","Card","isFullHeight","source_id","CardHeader","CardTitle","align","CardBody","catalogModelName","catalogModelDetailsFromModel","fontSize","fontWeight","Truncate","position","tooltipPosition","textDecoration","overflow","textOverflow","WebkitLineClamp","WebkitBoxOrient","display","CardFooter","catalogModels","catalogModelsLoaded","catalogModelsLoadError","refresh","searchQuery","setState","totalSize","isLoading","isLoadingMore","fetchModels","isLoadMore","Boolean","prev","toString","loadMore","hasMore","useCatalogModelsBySources","Gallery","minWidths","Title","headingLevel","setSearchTerm","handleSearch","term","handleClearSearch","Routes","Route","element","index"],"sourceRoot":""}