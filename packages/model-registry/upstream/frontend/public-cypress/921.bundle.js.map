{"version":3,"file":"921.bundle.js","mappings":"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","sources":["webpack://model-registry-ui/./src/app/standalone/NavBar.tsx","webpack://model-registry-ui/./src/app/standalone/ToastNotification.tsx","webpack://model-registry-ui/./src/app/standalone/ToastNotifications.tsx","webpack://model-registry-ui/./src/app/standalone/types.ts","webpack://model-registry-ui/./src/app/standalone/NavSidebar.tsx","webpack://model-registry-ui/./src/app/AppRoutes.tsx","webpack://model-registry-ui/./src/app/standalone/AppNavSidebar.tsx","webpack://model-registry-ui/./src/app/App.tsx","webpack://model-registry-ui/./src/odh/PluginStoreContextProvider.tsx","webpack://model-registry-ui/./src/bootstrap.tsx","webpack://model-registry-ui/./src/app/utilities/const.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Brand,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Masthead,\n  MastheadBrand,\n  MastheadContent,\n  MastheadLogo,\n  MastheadMain,\n  MastheadToggle,\n  MenuToggle,\n  MenuToggleElement,\n  PageToggleButton,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { SimpleSelect } from '@patternfly/react-templates';\nimport { BarsIcon } from '@patternfly/react-icons';\nimport { useNamespaceSelector, useModularArchContext } from 'mod-arch-core';\nimport { useThemeContext } from 'mod-arch-kubeflow';\nimport { images as sharedImages } from 'mod-arch-shared';\n\ninterface NavBarProps {\n  username?: string;\n  onLogout: () => void;\n}\n\nconst NavBar: React.FC<NavBarProps> = ({ username, onLogout }) => {\n  const { namespaces, preferredNamespace, updatePreferredNamespace } = useNamespaceSelector();\n  const { config } = useModularArchContext();\n  const { isMUITheme } = useThemeContext();\n\n  const [userMenuOpen, setUserMenuOpen] = React.useState(false);\n\n  // Check if mandatory namespace is configured\n  const isMandatoryNamespace = Boolean(config.mandatoryNamespace);\n\n  const options = namespaces.map((namespace) => ({\n    content: namespace.name,\n    value: namespace.name,\n    selected: namespace.name === preferredNamespace?.name,\n  }));\n\n  const handleLogout = () => {\n    setUserMenuOpen(false);\n    onLogout();\n  };\n\n  const userMenuItems = [\n    <DropdownItem key=\"logout\" onClick={handleLogout}>\n      Log out\n    </DropdownItem>,\n  ];\n\n  return (\n    <Masthead>\n      <MastheadMain>\n        <MastheadToggle>\n          <PageToggleButton id=\"page-nav-toggle\" variant=\"plain\" aria-label=\"Dashboard navigation\">\n            <BarsIcon />\n          </PageToggleButton>\n        </MastheadToggle>\n        {!isMUITheme ? (\n          <MastheadBrand>\n            <MastheadLogo component=\"a\">\n              <Brand\n                src={sharedImages.logoLightThemePath}\n                alt=\"Kubeflow\"\n                heights={{ default: '36px' }}\n              />\n            </MastheadLogo>\n          </MastheadBrand>\n        ) : null}\n      </MastheadMain>\n      <MastheadContent>\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarGroup variant=\"action-group-plain\" align={{ default: 'alignStart' }}>\n              <ToolbarItem className=\"kubeflow-u-namespace-select\">\n                <SimpleSelect\n                  initialOptions={options}\n                  isDisabled={isMandatoryNamespace} // Disable selection when mandatory namespace is set\n                  onSelect={(_ev, selection) => {\n                    // Only allow selection if not mandatory namespace\n                    if (!isMandatoryNamespace) {\n                      updatePreferredNamespace({ name: String(selection) });\n                    }\n                  }}\n                />\n              </ToolbarItem>\n            </ToolbarGroup>\n            {username && (\n              <ToolbarGroup variant=\"action-group-plain\" align={{ default: 'alignEnd' }}>\n                <ToolbarItem>\n                  <Dropdown\n                    popperProps={{ position: 'right' }}\n                    onOpenChange={(isOpen) => setUserMenuOpen(isOpen)}\n                    toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                      <MenuToggle\n                        aria-label=\"User menu\"\n                        id=\"user-menu-toggle\"\n                        data-testid=\"user-menu-toggle-button\"\n                        ref={toggleRef}\n                        onClick={() => setUserMenuOpen(!userMenuOpen)}\n                        isExpanded={userMenuOpen}\n                      >\n                        {username}\n                      </MenuToggle>\n                    )}\n                    isOpen={userMenuOpen}\n                  >\n                    <DropdownList>{userMenuItems}</DropdownList>\n                  </Dropdown>\n                </ToolbarItem>\n              </ToolbarGroup>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n      </MastheadContent>\n    </Masthead>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\nimport { Notification, asEnumMember, useNotification } from 'mod-arch-core';\n\nconst TOAST_NOTIFICATION_TIMEOUT = 8 * 1000;\n\ninterface ToastNotificationProps {\n  notification: Notification;\n}\n\nconst ToastNotification: React.FC<ToastNotificationProps> = ({ notification }) => {\n  const notifications = useNotification();\n  const [timedOut, setTimedOut] = React.useState(false);\n  const [mouseOver, setMouseOver] = React.useState(false);\n\n  React.useEffect(() => {\n    const handle = setTimeout(() => {\n      setTimedOut(true);\n    }, TOAST_NOTIFICATION_TIMEOUT);\n    return () => {\n      clearTimeout(handle);\n    };\n  }, [setTimedOut]);\n\n  React.useEffect(() => {\n    if (!notification.hidden && timedOut && !mouseOver) {\n      notifications.remove(notification.id);\n    }\n  }, [mouseOver, notification, timedOut, notifications]);\n\n  if (notification.hidden) {\n    return null;\n  }\n\n  return (\n    <Alert\n      variant={asEnumMember(notification.status, AlertVariant) ?? undefined}\n      title={notification.title}\n      actionClose={<AlertActionCloseButton onClose={() => notifications.remove(notification.id)} />}\n      onMouseEnter={() => setMouseOver(true)}\n      onMouseLeave={() => setMouseOver(false)}\n    >\n      {notification.message}\n    </Alert>\n  );\n};\n\nexport default ToastNotification;\n","import React, { useContext } from 'react';\nimport { AlertGroup } from '@patternfly/react-core';\nimport { NotificationContext } from 'mod-arch-core';\nimport ToastNotification from '~/app/standalone/ToastNotification';\n\nconst ToastNotifications: React.FC = () => {\n  const { notifications } = useContext(NotificationContext);\n\n  return (\n    <AlertGroup isToast isLiveRegion>\n      {notifications.map((notification) => (\n        <ToastNotification notification={notification} key={notification.id} />\n      ))}\n    </AlertGroup>\n  );\n};\n\nexport default ToastNotifications;\n","export const isNavDataGroup = (navItem: NavDataItem): navItem is NavDataGroup =>\n  'children' in navItem;\n\ntype NavDataCommon = {\n  label: string;\n};\n\nexport type NavDataHref = NavDataCommon & {\n  path: string;\n};\n\nexport type NavDataGroup = NavDataCommon & {\n  children: NavDataHref[];\n};\n\nexport type NavDataItem = NavDataHref | NavDataGroup;\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Brand,\n  Nav,\n  NavExpandable,\n  NavItem,\n  NavList,\n  PageSidebar,\n  PageSidebarBody,\n} from '@patternfly/react-core';\nimport { useThemeContext, images as kubeflowImages } from 'mod-arch-kubeflow';\nimport { isNavDataGroup, NavDataHref, NavDataGroup, NavDataItem } from '~/app/standalone/types';\n\nconst NavHref: React.FC<{ item: NavDataHref }> = ({ item }) => (\n  <NavItem key={item.label} data-id={item.label} itemId={item.label}>\n    <NavLink to={item.path}>{item.label}</NavLink>\n  </NavItem>\n);\n\nconst NavGroup: React.FC<{ item: NavDataGroup }> = ({ item }) => {\n  const { children } = item;\n  const [expanded, setExpanded] = React.useState(false);\n\n  return (\n    <NavExpandable\n      data-id={item.label}\n      key={item.label}\n      id={item.label}\n      title={item.label}\n      groupId={item.label}\n      isExpanded={expanded}\n      onExpand={(e, val) => setExpanded(val)}\n      aria-label={item.label}\n    >\n      {children.map((childItem) => (\n        <NavHref key={childItem.label} data-id={childItem.label} item={childItem} />\n      ))}\n    </NavExpandable>\n  );\n};\n\nexport type NavSidebarProps = {\n  navData: NavDataItem[];\n};\n\nconst NavSidebar: React.FC<NavSidebarProps> = ({ navData }) => {\n  const { isMUITheme } = useThemeContext();\n  return (\n    <PageSidebar>\n      <PageSidebarBody>\n        <Nav id=\"nav-primary-simple\">\n          <NavList id=\"nav-list-simple\">\n            {isMUITheme ? (\n              <NavItem>\n                <Brand\n                  className=\"kubeflow_brand\"\n                  src={kubeflowImages.logoKubeflowLight}\n                  alt=\"Kubeflow Logo\"\n                />\n              </NavItem>\n            ) : null}\n            {navData.map((item) =>\n              isNavDataGroup(item) ? (\n                <NavGroup key={item.label} item={item} />\n              ) : (\n                <NavHref key={item.label} item={item} />\n              ),\n            )}\n          </NavList>\n        </Nav>\n      </PageSidebarBody>\n    </PageSidebar>\n  );\n};\n\nexport default NavSidebar;\n","import * as React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { NotFound } from 'mod-arch-shared';\nimport { useModularArchContext, DeploymentMode } from 'mod-arch-core';\nimport { NavDataItem } from '~/app/standalone/types';\nimport ModelRegistrySettingsRoutes from './pages/settings/ModelRegistrySettingsRoutes';\nimport ModelRegistryRoutes from './pages/modelRegistry/ModelRegistryRoutes';\nimport ModelCatalogRoutes from './pages/modelCatalog/ModelCatalogRoutes';\nimport useUser from './hooks/useUser';\n\nexport const useAdminSettings = (): NavDataItem[] => {\n  const { clusterAdmin } = useUser();\n\n  if (!clusterAdmin) {\n    return [];\n  }\n\n  return [\n    {\n      label: 'Settings',\n      children: [{ label: 'Model Registry', path: '/model-registry-settings' }],\n    },\n  ];\n};\n\nexport const useNavData = (): NavDataItem[] => {\n  const { config } = useModularArchContext();\n  const { deploymentMode } = config;\n  const isStandalone = deploymentMode === DeploymentMode.Standalone;\n  const isFederated = deploymentMode === DeploymentMode.Federated;\n\n  const baseNavItems = [\n    {\n      label: 'Model Registry',\n      path: '/model-registry',\n    },\n  ];\n\n  // Only show Model Catalog in Standalone or Federated mode\n  if (isStandalone || isFederated) {\n    baseNavItems.push({\n      label: 'Model Catalog',\n      path: '/model-catalog',\n    });\n  }\n\n  return [...baseNavItems, ...useAdminSettings()];\n};\n\nconst AppRoutes: React.FC = () => {\n  const { clusterAdmin } = useUser();\n  const { config } = useModularArchContext();\n  const { deploymentMode } = config;\n  const isStandalone = deploymentMode === DeploymentMode.Standalone;\n  const isFederated = deploymentMode === DeploymentMode.Federated;\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Navigate to=\"/model-registry\" replace />} />\n      <Route path=\"/model-registry/*\" element={<ModelRegistryRoutes />} />\n      {(isStandalone || isFederated) && (\n        <Route path=\"/model-catalog/*\" element={<ModelCatalogRoutes />} />\n      )}\n      <Route path=\"*\" element={<NotFound />} />\n      {/* TODO: [Conditional render] Follow up add testing and conditional rendering when in standalone mode */}\n      {clusterAdmin && (\n        <Route path=\"/model-registry-settings/*\" element={<ModelRegistrySettingsRoutes />} />\n      )}\n    </Routes>\n  );\n};\n\nexport default AppRoutes;\n","import * as React from 'react';\nimport NavSidebar from '~/app/standalone/NavSidebar';\nimport { useNavData } from '~/app/AppRoutes';\n\nconst AppNavSidebar: React.FC = () => {\n  const navData = useNavData(); // Call useNavData here, safely within context\n  return <NavSidebar navData={navData} />;\n};\n\nexport default AppNavSidebar;\n","import * as React from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  Page,\n  PageSection,\n  PageSidebar,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  DeploymentMode,\n  logout,\n  useModularArchContext,\n  useNamespaceSelector,\n  useSettings,\n} from 'mod-arch-core';\nimport NavBar from '~/app/standalone/NavBar';\nimport ToastNotifications from '~/app/standalone/ToastNotifications';\nimport AppNavSidebar from '~/app/standalone/AppNavSidebar';\nimport AppRoutes from '~/app/AppRoutes';\nimport { AppContext } from '~/app/context/AppContext';\nimport { ModelRegistrySelectorContextProvider } from '~/app/context/ModelRegistrySelectorContext';\n\nconst App: React.FC = () => {\n  const {\n    configSettings,\n    userSettings,\n    loaded: configLoaded,\n    loadError: configError,\n  } = useSettings();\n\n  const { namespacesLoaded, namespacesLoadError, initializationError } = useNamespaceSelector();\n\n  const username = userSettings?.userId;\n  const { config } = useModularArchContext();\n  const { deploymentMode } = config;\n  const isStandalone = deploymentMode === DeploymentMode.Standalone;\n\n  const contextValue = React.useMemo(\n    () =>\n      configSettings && userSettings\n        ? {\n            config: configSettings!,\n            user: userSettings!,\n          }\n        : null,\n    [configSettings, userSettings],\n  );\n\n  const error = configError || namespacesLoadError || initializationError;\n\n  const sidebar = <PageSidebar isSidebarOpen={false} />;\n\n  // We lack the critical data to startup the app\n  if (error) {\n    // There was an error fetching critical data\n    return (\n      <Page sidebar={sidebar}>\n        <PageSection>\n          <Stack hasGutter>\n            <StackItem>\n              <Alert variant=\"danger\" isInline title=\"General loading error\">\n                <p>\n                  {configError?.message ||\n                    namespacesLoadError?.message ||\n                    initializationError?.message ||\n                    'Unknown error occurred during startup'}\n                </p>\n                <p>Logging out and logging back in may solve the issue</p>\n              </Alert>\n            </StackItem>\n            <StackItem>\n              <Button\n                variant=\"secondary\"\n                onClick={() => logout().then(() => window.location.reload())}\n              >\n                Logout\n              </Button>\n            </StackItem>\n          </Stack>\n        </PageSection>\n      </Page>\n    );\n  }\n\n  // Waiting on the API to finish\n  const loading =\n    !configLoaded || !userSettings || !configSettings || !contextValue || !namespacesLoaded;\n\n  return loading ? (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  ) : (\n    <AppContext.Provider value={contextValue}>\n      <Page\n        mainContainerId=\"primary-app-container\"\n        masthead={\n          isStandalone ? (\n            <NavBar\n              username={username}\n              onLogout={() => {\n                logout().then(() => window.location.reload());\n              }}\n            />\n          ) : (\n            ''\n          )\n        }\n        isManagedSidebar={isStandalone}\n        sidebar={isStandalone ? <AppNavSidebar /> : sidebar}\n      >\n        <ModelRegistrySelectorContextProvider>\n          <AppRoutes />\n        </ModelRegistrySelectorContextProvider>\n        <ToastNotifications />\n      </Page>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { PluginStoreProvider } from '@openshift/dynamic-plugin-sdk';\nimport { PluginStore } from '@odh-dashboard/plugin-core';\n\nexport const PluginStoreContextProvider: React.FC<React.PropsWithChildren> = ({ children }) => {\n  const store = React.useMemo(() => new PluginStore({}), []);\n  return <PluginStoreProvider store={store}>{children}</PluginStoreProvider>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n  BrowserStorageContextProvider,\n  NotificationContextProvider,\n  ModularArchContextProvider,\n  ModularArchConfig,\n} from 'mod-arch-core';\nimport { ThemeProvider } from 'mod-arch-kubeflow';\nimport {\n  BFF_API_VERSION,\n  DEPLOYMENT_MODE,\n  MANDATORY_NAMESPACE,\n  STYLE_THEME,\n  URL_PREFIX,\n} from '~/app/utilities/const';\nimport App from '~/app/App';\nimport { PluginStoreContextProvider } from '~/odh/PluginStoreContextProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\nconst modularArchConfig: ModularArchConfig = {\n  deploymentMode: DEPLOYMENT_MODE,\n  URL_PREFIX,\n  BFF_API_VERSION,\n  mandatoryNamespace: MANDATORY_NAMESPACE,\n};\n\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <ModularArchContextProvider config={modularArchConfig}>\n        <ThemeProvider theme={STYLE_THEME}>\n          <BrowserStorageContextProvider>\n            <NotificationContextProvider>\n              <PluginStoreContextProvider>\n                <App />\n              </PluginStoreContextProvider>\n            </NotificationContextProvider>\n          </BrowserStorageContextProvider>\n        </ThemeProvider>\n      </ModularArchContextProvider>\n    </Router>\n  </React.StrictMode>,\n);\n","import { DeploymentMode, asEnumMember } from 'mod-arch-core';\nimport { Theme } from 'mod-arch-kubeflow';\n\nconst STYLE_THEME = asEnumMember(process.env.STYLE_THEME, Theme) || Theme.Patternfly;\nconst DEPLOYMENT_MODE =\n  asEnumMember(process.env.DEPLOYMENT_MODE, DeploymentMode) || DeploymentMode.Federated;\nconst DEV_MODE = process.env.APP_ENV === 'development';\nconst POLL_INTERVAL = process.env.POLL_INTERVAL ? parseInt(process.env.POLL_INTERVAL) : 30000;\nconst KUBEFLOW_USERNAME = process.env.KUBEFLOW_USERNAME || 'user@example.com';\nconst IMAGE_DIR = process.env.IMAGE_DIR || 'images';\nconst LOGO_LIGHT = process.env.LOGO || 'logo-light-theme.svg';\nconst MANDATORY_NAMESPACE = process.env.MANDATORY_NAMESPACE || undefined;\nconst URL_PREFIX = '/model-registry';\nconst BFF_API_VERSION = 'v1';\nconst COMPANY_URI = process.env.COMPANY_URI || 'oci://kubeflow.io';\n\nexport {\n  STYLE_THEME,\n  POLL_INTERVAL,\n  DEV_MODE,\n  KUBEFLOW_USERNAME,\n  IMAGE_DIR,\n  LOGO_LIGHT,\n  URL_PREFIX,\n  DEPLOYMENT_MODE,\n  BFF_API_VERSION,\n  MANDATORY_NAMESPACE,\n  COMPANY_URI,\n};\n\nexport const FindAdministratorOptions = [\n  'The person who gave you your username, or who helped you to log in for the first time',\n  'Someone in your IT department or help desk',\n  'A project manager or developer',\n];\n"],"names":["username","onLogout","namespaces","preferredNamespace","updatePreferredNamespace","useNamespaceSelector","config","useModularArchContext","isMUITheme","useThemeContext","userMenuOpen","setUserMenuOpen","isMandatoryNamespace","Boolean","mandatoryNamespace","options","map","namespace","content","name","value","selected","userMenuItems","DropdownItem","key","onClick","Masthead","MastheadMain","MastheadToggle","PageToggleButton","id","variant","MastheadBrand","MastheadLogo","component","Brand","src","alt","heights","default","MastheadContent","Toolbar","ToolbarContent","ToolbarGroup","align","ToolbarItem","className","SimpleSelect","initialOptions","isDisabled","onSelect","_ev","selection","String","Dropdown","popperProps","position","onOpenChange","isOpen","toggle","toggleRef","MenuToggle","ref","isExpanded","DropdownList","notification","notifications","useNotification","timedOut","setTimedOut","mouseOver","setMouseOver","handle","setTimeout","clearTimeout","hidden","remove","Alert","status","AlertVariant","undefined","title","actionClose","AlertActionCloseButton","onClose","onMouseEnter","onMouseLeave","message","useContext","NotificationContext","AlertGroup","isToast","isLiveRegion","NavHref","item","NavItem","label","itemId","NavLink","to","path","NavGroup","children","expanded","setExpanded","NavExpandable","groupId","onExpand","e","val","childItem","navData","PageSidebar","PageSidebarBody","Nav","NavList","useAdminSettings","clusterAdmin","useUser","deploymentMode","isStandalone","Standalone","isFederated","Federated","Routes","Route","element","Navigate","replace","ModelRegistryRoutes","ModelCatalogRoutes","NotFound","ModelRegistrySettingsRoutes","baseNavItems","push","useNavData","configSettings","userSettings","loaded","configLoaded","loadError","configError","useSettings","namespacesLoaded","namespacesLoadError","initializationError","userId","contextValue","user","error","sidebar","isSidebarOpen","Page","PageSection","Stack","hasGutter","StackItem","isInline","Button","then","window","location","reload","Bullseye","Spinner","AppContext","Provider","mainContainerId","masthead","isManagedSidebar","ModelRegistrySelectorContext","root","document","getElementById","modularArchConfig","URL_PREFIX","BFF_API_VERSION","render","ModularArchContext","theme","BrowserStorageContext","store","PluginStore","PluginStoreProvider","STYLE_THEME","Patternfly","DEPLOYMENT_MODE","MANDATORY_NAMESPACE","parseInt"],"sourceRoot":""}