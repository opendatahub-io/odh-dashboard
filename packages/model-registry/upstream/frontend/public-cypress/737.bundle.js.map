{"version":3,"file":"737.bundle.js","mappings":"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","sources":["webpack://model-registry-ui/./node_modules/react-router/dist/development/dom-export.mjs"],"sourcesContent":["/**\n * react-router v7.8.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\"use client\";\nimport {\n  deserializeErrors,\n  getHydrationData\n} from \"./chunk-5UALIXAM.mjs\";\nimport {\n  CRITICAL_CSS_DATA_ATTRIBUTE,\n  FrameworkContext,\n  RemixErrorBoundary,\n  RouterProvider,\n  createBrowserHistory,\n  createClientRoutes,\n  createClientRoutesWithHMRRevalidationOptOut,\n  createRouter,\n  decodeViaTurboStream,\n  getPatchRoutesOnNavigationFunction,\n  getTurboStreamSingleFetchDataStrategy,\n  hydrationRouteProperties,\n  invariant,\n  mapRouteProperties,\n  useFogOFWarDiscovery\n} from \"./chunk-PVWAREVJ.mjs\";\n\n// lib/dom-export/dom-router-provider.tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nfunction RouterProvider2(props) {\n  return /* @__PURE__ */ React.createElement(RouterProvider, { flushSync: ReactDOM.flushSync, ...props });\n}\n\n// lib/dom-export/hydrated-router.tsx\nimport * as React2 from \"react\";\nvar ssrInfo = null;\nvar router = null;\nfunction initSsrInfo() {\n  if (!ssrInfo && window.__reactRouterContext && window.__reactRouterManifest && window.__reactRouterRouteModules) {\n    if (window.__reactRouterManifest.sri === true) {\n      const importMap = document.querySelector(\"script[rr-importmap]\");\n      if (importMap?.textContent) {\n        try {\n          window.__reactRouterManifest.sri = JSON.parse(\n            importMap.textContent\n          ).integrity;\n        } catch (err) {\n          console.error(\"Failed to parse import map\", err);\n        }\n      }\n    }\n    ssrInfo = {\n      context: window.__reactRouterContext,\n      manifest: window.__reactRouterManifest,\n      routeModules: window.__reactRouterRouteModules,\n      stateDecodingPromise: void 0,\n      router: void 0,\n      routerInitialized: false\n    };\n  }\n}\nfunction createHydratedRouter({\n  unstable_getContext\n}) {\n  initSsrInfo();\n  if (!ssrInfo) {\n    throw new Error(\n      \"You must be using the SSR features of React Router in order to skip passing a `router` prop to `<RouterProvider>`\"\n    );\n  }\n  let localSsrInfo = ssrInfo;\n  if (!ssrInfo.stateDecodingPromise) {\n    let stream = ssrInfo.context.stream;\n    invariant(stream, \"No stream found for single fetch decoding\");\n    ssrInfo.context.stream = void 0;\n    ssrInfo.stateDecodingPromise = decodeViaTurboStream(stream, window).then((value) => {\n      ssrInfo.context.state = value.value;\n      localSsrInfo.stateDecodingPromise.value = true;\n    }).catch((e) => {\n      localSsrInfo.stateDecodingPromise.error = e;\n    });\n  }\n  if (ssrInfo.stateDecodingPromise.error) {\n    throw ssrInfo.stateDecodingPromise.error;\n  }\n  if (!ssrInfo.stateDecodingPromise.value) {\n    throw ssrInfo.stateDecodingPromise;\n  }\n  let routes = createClientRoutes(\n    ssrInfo.manifest.routes,\n    ssrInfo.routeModules,\n    ssrInfo.context.state,\n    ssrInfo.context.ssr,\n    ssrInfo.context.isSpaMode\n  );\n  let hydrationData = void 0;\n  if (ssrInfo.context.isSpaMode) {\n    let { loaderData } = ssrInfo.context.state;\n    if (ssrInfo.manifest.routes.root?.hasLoader && loaderData && \"root\" in loaderData) {\n      hydrationData = {\n        loaderData: {\n          root: loaderData.root\n        }\n      };\n    }\n  } else {\n    hydrationData = getHydrationData(\n      ssrInfo.context.state,\n      routes,\n      (routeId) => ({\n        clientLoader: ssrInfo.routeModules[routeId]?.clientLoader,\n        hasLoader: ssrInfo.manifest.routes[routeId]?.hasLoader === true,\n        hasHydrateFallback: ssrInfo.routeModules[routeId]?.HydrateFallback != null\n      }),\n      window.location,\n      window.__reactRouterContext?.basename,\n      ssrInfo.context.isSpaMode\n    );\n    if (hydrationData && hydrationData.errors) {\n      hydrationData.errors = deserializeErrors(hydrationData.errors);\n    }\n  }\n  let router2 = createRouter({\n    routes,\n    history: createBrowserHistory(),\n    basename: ssrInfo.context.basename,\n    unstable_getContext,\n    hydrationData,\n    hydrationRouteProperties,\n    mapRouteProperties,\n    future: {\n      unstable_middleware: ssrInfo.context.future.unstable_middleware\n    },\n    dataStrategy: getTurboStreamSingleFetchDataStrategy(\n      () => router2,\n      ssrInfo.manifest,\n      ssrInfo.routeModules,\n      ssrInfo.context.ssr,\n      ssrInfo.context.basename\n    ),\n    patchRoutesOnNavigation: getPatchRoutesOnNavigationFunction(\n      ssrInfo.manifest,\n      ssrInfo.routeModules,\n      ssrInfo.context.ssr,\n      ssrInfo.context.routeDiscovery,\n      ssrInfo.context.isSpaMode,\n      ssrInfo.context.basename\n    )\n  });\n  ssrInfo.router = router2;\n  if (router2.state.initialized) {\n    ssrInfo.routerInitialized = true;\n    router2.initialize();\n  }\n  router2.createRoutesForHMR = /* spacer so ts-ignore does not affect the right hand of the assignment */\n  createClientRoutesWithHMRRevalidationOptOut;\n  window.__reactRouterDataRouter = router2;\n  return router2;\n}\nfunction HydratedRouter(props) {\n  if (!router) {\n    router = createHydratedRouter({\n      unstable_getContext: props.unstable_getContext\n    });\n  }\n  let [criticalCss, setCriticalCss] = React2.useState(\n    process.env.NODE_ENV === \"development\" ? ssrInfo?.context.criticalCss : void 0\n  );\n  React2.useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      setCriticalCss(void 0);\n    }\n  }, []);\n  React2.useEffect(() => {\n    if (process.env.NODE_ENV === \"development\" && criticalCss === void 0) {\n      document.querySelectorAll(`[${CRITICAL_CSS_DATA_ATTRIBUTE}]`).forEach((element) => element.remove());\n    }\n  }, [criticalCss]);\n  let [location, setLocation] = React2.useState(router.state.location);\n  React2.useLayoutEffect(() => {\n    if (ssrInfo && ssrInfo.router && !ssrInfo.routerInitialized) {\n      ssrInfo.routerInitialized = true;\n      ssrInfo.router.initialize();\n    }\n  }, []);\n  React2.useLayoutEffect(() => {\n    if (ssrInfo && ssrInfo.router) {\n      return ssrInfo.router.subscribe((newState) => {\n        if (newState.location !== location) {\n          setLocation(newState.location);\n        }\n      });\n    }\n  }, [location]);\n  invariant(ssrInfo, \"ssrInfo unavailable for HydratedRouter\");\n  useFogOFWarDiscovery(\n    router,\n    ssrInfo.manifest,\n    ssrInfo.routeModules,\n    ssrInfo.context.ssr,\n    ssrInfo.context.routeDiscovery,\n    ssrInfo.context.isSpaMode\n  );\n  return (\n    // This fragment is important to ensure we match the <ServerRouter> JSX\n    // structure so that useId values hydrate correctly\n    /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\n      FrameworkContext.Provider,\n      {\n        value: {\n          manifest: ssrInfo.manifest,\n          routeModules: ssrInfo.routeModules,\n          future: ssrInfo.context.future,\n          criticalCss,\n          ssr: ssrInfo.context.ssr,\n          isSpaMode: ssrInfo.context.isSpaMode,\n          routeDiscovery: ssrInfo.context.routeDiscovery\n        }\n      },\n      /* @__PURE__ */ React2.createElement(RemixErrorBoundary, { location }, /* @__PURE__ */ React2.createElement(\n        RouterProvider2,\n        {\n          router,\n          unstable_onError: props.unstable_onError\n        }\n      ))\n    ), /* @__PURE__ */ React2.createElement(React2.Fragment, null))\n  );\n}\nexport {\n  HydratedRouter,\n  RouterProvider2 as RouterProvider\n};\n"],"names":["RouterProvider2","props","flushSync","ssrInfo","router","createHydratedRouter","unstable_getContext","window","__reactRouterContext","__reactRouterManifest","__reactRouterRouteModules","sri","importMap","document","querySelector","textContent","JSON","parse","integrity","err","console","error","context","manifest","routeModules","stateDecodingPromise","routerInitialized","initSsrInfo","Error","localSsrInfo","stream","then","value","state","catch","e","hydrationData","routes","ssr","isSpaMode","loaderData","root","hasLoader","routeId","clientLoader","hasHydrateFallback","HydrateFallback","location","basename","errors","router2","history","hydrationRouteProperties","mapRouteProperties","future","unstable_middleware","dataStrategy","patchRoutesOnNavigation","routeDiscovery","initialized","initialize","createRoutesForHMR","__reactRouterDataRouter","HydratedRouter","criticalCss","setCriticalCss","setLocation","subscribe","newState","Provider","unstable_onError"],"sourceRoot":""}