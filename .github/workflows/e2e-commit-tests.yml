name: E2E Commit Tests

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  e2e-tests:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-set: [1]  # Just run one test set for commit-based testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Download test configuration
        run: |
          # Try to download test-variables.yml from GitLab securely
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ] && [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "üîÑ Attempting to download test configuration from GitLab..."
            if curl -f -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                     "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                     -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml; then
              echo "‚úÖ Successfully downloaded test configuration from GitLab"
            else
              echo "‚ùå Failed to download from GitLab"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  GitLab secrets not available - cannot download test configuration"
            echo "üí° This workflow requires GITLAB_TOKEN and GITLAB_TEST_VARS_URL secrets to be configured"
            echo "üí° For forked PRs, these secrets need to be available in the upstream repository"
            exit 1
          fi

      - name: Login to OpenShift cluster
        run: |
          # For forked PRs, skip OpenShift login since secrets are not available
          if [ -z "${{ secrets.OC_SERVER }}" ]; then
            echo "‚ö†Ô∏è  OpenShift secrets not available (forked PR) - skipping cluster login"
            echo "üí° Tests will run in mock mode or against local test environment"
            exit 0
          fi

          # Read credentials from downloaded test-variables.yml
          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

          # Extract OC_USERNAME from OCP_ADMIN_USER section
          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')

          # Extract OC_PASSWORD from OCP_ADMIN_USER section
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          echo "Logging in to OpenShift cluster..."
          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}"

      - name: Set test configuration
        run: |
          # For forked PRs, use default URLs from local test-vars.yml
          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: ${{ secrets.OCP_CONSOLE_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: ${{ secrets.ODH_DASHBOARD_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          # For forked PRs, set default URLs if secrets are not available
          if [ -z "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            echo "‚ö†Ô∏è  OCP_CONSOLE_URL secret not available (forked PR) - using localhost"
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: http://localhost:9001|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -z "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            echo "‚ö†Ô∏è  ODH_DASHBOARD_URL secret not available (forked PR) - using localhost"
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: http://localhost:9001|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

      - name: Build frontend for E2E tests
        run: |
          cd frontend
          # Build frontend to public-cypress directory (same as mock tests)
          npm run cypress:server:build

      - name: Run E2E Tests
        run: |
          cd frontend

          echo "üß™ Running commit-based E2E tests..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          # Always run in mock mode for commit-based testing
          echo "üîÑ Running in mock mode for commit testing"
          export CY_MOCK=1
          export CY_WS_PORT=9002

          # Run a simple test suite - just SmokeSet1 for commit testing
          export CY_TEST_TAGS="@SmokeSet1"
          export CY_SKIP_TAGS="@Bug,@Maintain,@NonConcurrent"

          echo "üéØ Running tests with tags: $CY_TEST_TAGS"
          echo "üö´ Skipping tags: $CY_SKIP_TAGS"

          npm run test:cypress:e2e:ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-smoke-${{ matrix.test-set }}
          path: |
            frontend/src/__tests__/cypress/results/
            frontend/src/__tests__/cypress/videos/
            frontend/src/__tests__/cypress/screenshots/
            frontend/src/__tests__/cypress/coverage/
          retention-days: 7

      - name: Log test completion
        if: always()
        run: |
          echo "üèÅ E2E Test completed!"
          echo "Status: ${{ job.status }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "üìä Test artifacts uploaded to:"
          echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
