name: E2E Direct Commit PR Tests

on: [push]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  e2e-tests:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-set: [1]  # Just run one test set for commit-based testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Check and Install OpenShift CLI
        run: |
          echo "üîç Checking if OpenShift CLI (oc) is installed..."

          # Check if oc is already installed
          if command -v oc &> /dev/null; then
            echo "‚úÖ OpenShift CLI (oc) is already installed"
            oc version --client
          else
            echo "‚ùå OpenShift CLI (oc) not found, installing..."

            # Install oc CLI for Linux
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              echo "üì¶ Installing oc CLI for Linux..."

              # Download and install oc
              curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
              tar -xzf oc.tar.gz
              sudo mv oc /usr/local/bin/
              sudo chmod +x /usr/local/bin/oc

              # Verify installation
              echo "‚úÖ OpenShift CLI installed successfully"
              oc version --client

            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              echo "üì¶ Installing oc CLI for macOS..."
              brew install openshift-cli

            elif [[ "$RUNNER_OS" == "Windows" ]]; then
              echo "üì¶ Installing oc CLI for Windows..."
              choco install openshift-cli
            else
              echo "‚ùå Unsupported OS: $RUNNER_OS"
              exit 1
            fi
          fi

          # Final verification
          echo "üéØ Final oc version check:"
          oc version --client || echo "‚ö†Ô∏è  Could not determine oc version"

      - name: Install Cypress Dependencies
        run: |
          echo "üîß Installing Cypress system dependencies for Fedora..."
          
          # Install all required Cypress dependencies for Fedora/RHEL
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "üì¶ Installing Cypress dependencies for Linux..."
            
            # Check which package manager is available
            if command -v dnf &> /dev/null; then
              echo "Using dnf package manager..."
              PACKAGE_MANAGER="dnf"
            elif command -v yum &> /dev/null; then
              echo "Using yum package manager..."
              PACKAGE_MANAGER="yum"
            elif command -v apt-get &> /dev/null; then
              echo "Using apt package manager..."
              PACKAGE_MANAGER="apt"
            else
              echo "‚ùå No supported package manager found"
              exit 1
            fi
            
            # Install all Cypress dependencies
            case $PACKAGE_MANAGER in
              dnf|yum)
                echo "Installing Cypress dependencies with $PACKAGE_MANAGER..."
                sudo $PACKAGE_MANAGER update -y || echo "Update failed, continuing..."
                
                # Install X11 and display dependencies
                sudo $PACKAGE_MANAGER install -y \
                  xorg-x11-server-Xvfb \
                  xorg-x11-fonts-misc \
                  xorg-x11-fonts-75dpi \
                  xorg-x11-fonts-100dpi \
                  xorg-x11-fonts-Type1 \
                  xorg-x11-fonts-cyrillic || echo "Some X11 packages failed"
                
                # Install GTK and GUI dependencies
                sudo $PACKAGE_MANAGER install -y \
                  gtk3 \
                  gtk3-devel \
                  atk \                   
                  atk-devel \            
                  libnotify \
                  libnotify-devel \
                  GConf2 \
                  GConf2-devel \
                  libXScrnSaver \
                  alsa-lib \
                  alsa-lib-devel \
                  libXdamage \
                  libXcomposite \
                  libXcursor \
                  libXext \
                  libXfixes \
                  libXi \
                  libXtst \
                  cups-libs \
                  libXrandr \
                  libXss \
                  libgtk-3.so.0 \
                  libgbm.so.1 \
                  libxss1 \
                  libasound2 || echo "Some GUI packages failed"
                
                # Install NSS and security libraries (CRITICAL - fixes libnss3.so error)
                sudo $PACKAGE_MANAGER install -y \
                  nss \
                  nss-devel \
                  nss-tools \
                  nspr \
                  nspr-devel || echo "Some NSS packages failed"
                
                # Install additional required libraries
                sudo $PACKAGE_MANAGER install -y \
                  libjpeg-turbo \
                  libjpeg-turbo-devel \
                  libpng \
                  libpng-devel \
                  zlib \
                  zlib-devel \
                  freetype \
                  freetype-devel \
                  fontconfig \
                  fontconfig-devel || echo "Some additional packages failed"
                
                # Try EPEL for any missing packages
                sudo $PACKAGE_MANAGER install -y epel-release 2>/dev/null || true
                sudo $PACKAGE_MANAGER install -y \
                  libX11-xcb \
                  libxcb-dri3 \
                  libxcb-dri2 \
                  libxcb-glx \
                  libxcb-present \
                  libxcb-sync \
                  libxcb-xfixes 2>/dev/null || echo "Some EPEL packages not available"
                ;;
                
              apt)
                echo "Installing with apt..."
                sudo apt-get update
                sudo apt-get install -y \
                  xvfb \
                  libgtk-3-0 \
                  libnotify4 \
                  libgconf-2-4 \
                  libnss3 \
                  libxss1 \
                  libasound2 \
                  libxtst6 \
                  libxrandr2 \
                  libpangocairo-1.0-0 \
                  libatk1.0-0 \
                  libcairo-gobject2 \
                  libgtk-3-0 \
                  libgdk-pixbuf2.0-0 || {
                  echo "‚ùå apt install failed"
                  exit 1
                }
                ;;
            esac
            
            # Verify critical dependencies
            echo "üîç Verifying critical dependencies..."
            if command -v Xvfb &> /dev/null; then
              echo "‚úÖ Xvfb installed"
            else
              echo "‚ùå Xvfb missing"
            fi
            
            if ldconfig -p | grep -q libnss3; then
              echo "‚úÖ NSS libraries installed (fixes libnss3.so error)"
            else
              echo "‚ùå NSS libraries missing"
            fi
            
            echo "üéØ Cypress dependencies installation completed"
            
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "üçé macOS detected - Cypress dependencies usually pre-installed"
            # macOS typically has these dependencies pre-installed
            
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "ü™ü Windows detected - Cypress dependencies usually pre-installed"
            # Windows typically has these dependencies pre-installed
          fi

      - name: Debug available secrets
        run: |
          echo "üîç DEBUG: Checking available secrets..."
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"

          # Check for specific secrets without revealing values
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ]; then
            echo "‚úÖ GITLAB_TOKEN: Available (length: ${#GITLAB_TOKEN})"
          else
            echo "‚ùå GITLAB_TOKEN: Not available or empty"
          fi

          if [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "‚úÖ GITLAB_TEST_VARS_URL: Available (length: ${#GITLAB_TEST_VARS_URL})"
          else
            echo "‚ùå GITLAB_TEST_VARS_URL: Not available or empty"
          fi

          # Check other potentially relevant secrets
          if [ -n "${{ secrets.OC_SERVER }}" ]; then
            echo "‚úÖ OC_SERVER: Available"
          else
            echo "‚ùå OC_SERVER: Not available"
          fi

          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            echo "‚úÖ OCP_CONSOLE_URL: Available"
          else
            echo "‚ùå OCP_CONSOLE_URL: Not available"
          fi

          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            echo "‚úÖ ODH_DASHBOARD_URL: Available"
          else
            echo "‚ùå ODH_DASHBOARD_URL: Not available"
          fi

          # List all available secrets (names only)
          echo "üìã Available secrets in this environment:"
          env | grep -E '^[^=]+=' | sed 's/=.*//' | grep -i secret || echo "No SECRET variables found"

      - name: Download test configuration
        run: |
          # Debug: Show what we're working with
          echo "üîß DEBUG: Attempting to download test configuration..."
          echo "GITLAB_TOKEN present: $([ -n "${{ secrets.GITLAB_TOKEN }}" ] && echo 'YES' || echo 'NO')"
          echo "GITLAB_TEST_VARS_URL present: $([ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ] && echo 'YES' || echo 'NO')"

          # Try to download test-variables.yml from GitLab securely
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ] && [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "üîÑ Both secrets are available, attempting download..."
            echo "Token length: ${#GITLAB_TOKEN}"
            echo "URL length: ${#GITLAB_TEST_VARS_URL}"

            # Debug: Show first few characters of secrets (safely)
            if [ -n "${{ secrets.GITLAB_TOKEN }}" ]; then
              echo "Token starts with: ${{ secrets.GITLAB_TOKEN }}" | cut -c1-10
            fi
            if [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
              echo "URL starts with: ${{ secrets.GITLAB_TEST_VARS_URL }}" | cut -c1-20
            fi

            # Try with SSL verification disabled (for self-signed certs)
            if curl -f -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                     "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                     -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml; then
              echo "‚úÖ Successfully downloaded test configuration from GitLab"
              ls -la ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
            else
              echo "‚ùå Failed to download from GitLab"
              echo "Curl exit code: $?"

              # Try to get more details about the failure
              echo "Trying without -f to see error details..."
              curl -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                   "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                   -o /tmp/test-response 2>&1 || echo "Curl failed with: $?"

              if [ -f /tmp/test-response ]; then
                echo "GitLab API Response:"
                head -10 /tmp/test-response
              fi

              exit 1
            fi
          else
            echo "‚ö†Ô∏è  GitLab secrets not available - cannot download test configuration"
            echo "üí° This workflow requires GITLAB_TOKEN and GITLAB_TEST_VARS_URL secrets to be configured"
            echo "üí° For forked PRs, these secrets need to be available in the upstream repository"
            echo ""
            echo "üîç DEBUG INFO:"
            echo "- Repository: ${{ github.repository }}"
            echo "- Event: ${{ github.event_name }}"
            echo "- Is fork: $([ '${{ github.repository_owner }}' != 'opendatahub-io' ] && echo 'YES' || echo 'NO')"
            echo "- Base repo: ${{ github.base_ref && github.repository || 'N/A' }}"
            echo ""
            echo "üí° POSSIBLE SOLUTIONS:"
            echo "1. Ensure secrets are configured in upstream repo (opendatahub-io/odh-dashboard)"
            echo "2. For testing, secrets need to be available when PR is merged"
            echo "3. Check secret names match exactly: GITLAB_TOKEN, GITLAB_TEST_VARS_URL"
            exit 1
          fi

      - name: Login to OpenShift cluster
        run: |
          # For forked PRs, skip OpenShift login since secrets are not available
          if [ -z "${{ secrets.OC_SERVER }}" ]; then
            echo "‚ö†Ô∏è  OpenShift secrets not available (forked PR) - skipping cluster login"
            echo "üí° Tests will run in mock mode or against local test environment"
            exit 0
          fi

          # Read credentials from downloaded test-variables.yml
          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

          # Extract OC_USERNAME from OCP_ADMIN_USER section
          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')

          # Extract OC_PASSWORD from OCP_ADMIN_USER section
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          echo "Logging in to OpenShift cluster..."
          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}" --insecure-skip-tls-verify

      - name: Set test configuration
        run: |
          # For forked PRs, use default URLs from local test-vars.yml
          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: ${{ secrets.OCP_CONSOLE_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: ${{ secrets.ODH_DASHBOARD_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          # For forked PRs, set default URLs if secrets are not available
          if [ -z "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            echo "‚ö†Ô∏è  OCP_CONSOLE_URL secret not available (forked PR) - using localhost"
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: http://localhost:9001|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -z "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            echo "‚ö†Ô∏è  ODH_DASHBOARD_URL secret not available (forked PR) - using localhost"
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: http://localhost:9001|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

      - name: Build frontend for E2E tests
        run: |
          cd frontend
          # Build frontend to public-cypress directory (same as mock tests)
          npm run cypress:server:build

      - name: Run E2E Tests
        run: |
          cd frontend

          echo "üß™ Running commit-based E2E tests..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          # Always run in mock mode for commit-based testing
          echo "üîÑ Running in mock mode for commit testing"
          export CY_MOCK=1
          export CY_WS_PORT=9002

          # Run a simple test suite - just SmokeSet1 for commit testing
          export CY_TEST_TAGS="@SmokeSet1"
          export CY_SKIP_TAGS="@Bug,@Maintain,@NonConcurrent"

          echo "üéØ Running tests with tags: $CY_TEST_TAGS"
          echo "üö´ Skipping tags: $CY_SKIP_TAGS"

          npm run test:cypress:e2e:ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-smoke-${{ matrix.test-set }}
          path: |
            frontend/src/__tests__/cypress/results/
            frontend/src/__tests__/cypress/videos/
            frontend/src/__tests__/cypress/screenshots/
            frontend/src/__tests__/cypress/coverage/
          retention-days: 7

      - name: Log test completion
        if: always()
        run: |
          echo "üèÅ E2E Test completed!"
          echo "Status: ${{ job.status }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "üìä Test artifacts uploaded to:"
          echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
