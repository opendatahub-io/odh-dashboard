---
name: Comment Quality Gates Summary

on:
  workflow_run:
    workflows: ["Modular Architecture - Quality Gates"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  comment-pr:
    name: Post Quality Gates Summary
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'pull_request' && (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') }}
    steps:
      - name: Debug workflow run info
        run: |
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          
      - name: Download Quality Gates Summary
        uses: actions/download-artifact@v4
        with:
          name: quality-gates-summary
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Get PR number from workflow_run payload
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests && context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              core.setFailed('‚ùå No PR found on workflow_run payload');
              return;
            }
            console.log('üìã Found PR #' + pr.number);
            core.setOutput('pr-number', pr.number);

      - name: Read quality gates summary
        id: read-summary
        run: |
          if [ -f "quality-gates-summary.md" ]; then
            echo "‚úÖ Found quality gates summary file"
            echo "summary-exists=true" >> $GITHUB_OUTPUT
            # Read content and escape for output
            echo "summary-content<<'EOF'" >> $GITHUB_OUTPUT
            cat quality-gates-summary.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Quality gates summary file not found"
            echo "summary-exists=false" >> $GITHUB_OUTPUT
            echo "summary-content<<EOF" >> $GITHUB_OUTPUT
            echo "## üö¶ Quality Gates Summary" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "‚ùå Unable to load summary content. Please check the workflow logs." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Post or update PR comment
        if: steps.get-pr.outputs.pr-number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.get-pr.outputs.pr-number }};
            const summaryContent = `${{ steps.read-summary.outputs.summary-content }}`;
            
            console.log(`üìã Posting to PR #${prNumber}`);
            console.log(`üìä Summary length: ${summaryContent.length} characters`);
            
            try {
              // Check for existing quality gates comments
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('üö¶ Modular Architecture Quality Gates Results')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: summaryContent
                });
                console.log('‚úÖ Updated existing quality gates comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: summaryContent
                });
                console.log('‚úÖ Created new quality gates comment');
              }
            } catch (error) {
              console.log('‚ùå Failed to post comment:', error.message);
              console.log('üìä Error details:', error);
              
              // Fallback: try to post a simple message
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: '## üö¶ Quality Gates Summary\n\n‚ùå Failed to post detailed summary. Check workflow logs for details.'
                });
                console.log('‚úÖ Posted fallback comment');
              } catch (fallbackError) {
                console.log('‚ùå Fallback comment also failed:', fallbackError.message);
              }
            }