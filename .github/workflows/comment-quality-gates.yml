name: Comment Quality Gates Summary

on:
  workflow_run:
    workflows: ["Modular Architecture - Quality Gates"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  comment-pr:
    name: Post Quality Gates Summary
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'pull_request' }}
    steps:
      - name: Debug workflow run info
        run: |
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          
      - name: Download Quality Gates Summary
        uses: actions/download-artifact@v4
        with:
          name: quality-gates-summary
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Post comment on PR
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            
            // Read the quality gates summary
            let summaryContent = '';
            try {
              summaryContent = fs.readFileSync('quality-gates-summary.md', 'utf8');
              console.log('✅ Successfully read quality gates summary');
              console.log('📊 Summary length:', summaryContent.length, 'characters');
            } catch (error) {
              console.log('❌ Failed to read quality gates summary:', error.message);
              summaryContent = '## 🚦 Quality Gates Summary\n\n❌ Unable to load summary content. Please check the workflow logs.';
            }
            
            // Get PR number from the workflow run
            const pullRequests = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.event.workflow_run.head_sha }}'
            });
            
            if (pullRequests.data.length === 0) {
              console.log('❌ No PR found for this workflow run');
              return;
            }
            
            const prNumber = pullRequests.data[0].number;
            console.log('📋 Found PR #' + prNumber);
            
            // Check for existing quality gates comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚦 Modular Architecture Quality Gates Results')
            );
            
            try {
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: summaryContent
                });
                console.log('✅ Updated existing quality gates comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: summaryContent
                });
                console.log('✅ Created new quality gates comment');
              }
            } catch (error) {
              console.log('❌ Failed to post/update comment:', error.message);
              console.log('📊 This may be due to permissions on forked PRs');
              console.log('📄 Summary content length:', summaryContent.length);
              
              // Log summary to console as fallback
              console.log('📄 Quality Gates Summary (fallback):');
              console.log('='.repeat(50));
              console.log(summaryContent);
              console.log('='.repeat(50));
            } 