# ODH Dashboard Test Workflow
# This workflow runs all tests including:
# - Type checking
# - Linting
# - Unit tests
# - Contract tests
# - Cypress tests
name: Test

on: [push, pull_request]

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1
  CACHE_VERSION: v1  # Increment this when cache structure changes
  TURBO_VERSION: 1.10.3  # Pin turbo version for cache stability

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      modules-cache-key: ${{ steps.key.outputs.modules-cache-key }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate modules cache key
        id: key
        run: |
          set -euo pipefail
          echo "modules-cache-key=${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/package-lock.json') }}" >> "$GITHUB_OUTPUT"
      - name: Node.js modules cache
        uses: actions/cache@v4
        id: modules-cache
        with:
          lookup-only: true
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ steps.key.outputs.modules-cache-key }}
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        if: steps.modules-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies (deterministic)
        if: steps.modules-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          if [ ! -f package-lock.json ]; then
            echo "Error: package-lock.json not found. Please commit the lockfile for deterministic CI installs." >&2
            exit 1
          fi
          npm ci

      - name: Check for uncommitted changes
        run: |
          set -euo pipefail
          git diff --exit-code

  Type-Check:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}
      - name: Cache turbo
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-type-check
          restore-keys: |
            shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-
      - name: Run type checks
        timeout-minutes: 5
        run: |
          set -euo pipefail
          npm run type-check

  Lint:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}
      - name: Cache turbo
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-lint
          restore-keys: |
            shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-
      - name: Run linting and formatting checks
        timeout-minutes: 5
        run: |
          set -euo pipefail
          NODE_OPTIONS="--max-old-space-size=8192" npm run lint

  Unit-Tests:
    needs: [Setup, Lint, Type-Check]
    runs-on: ubuntu-latest
    # No explicit job timeout; rely on defaults and step-level timeouts where already present
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}
      - name: Cache turbo
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-unit-tests
          restore-keys: |
            shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-
      - name: Unit tests with coverage
        timeout-minutes: 10
        run: |
          set -euo pipefail
          npm run test-unit-coverage
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: ${{ github.workspace }}/jest-coverage
          if-no-files-found: error

  Contract-Tests:
    needs: [Setup, Lint, Type-Check]
    runs-on: ubuntu-latest
    outputs:
      consumers: ${{ steps.consumers.outputs.json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}

      - name: Cache turbo
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-contract-tests
          restore-keys: |
            shared-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-

      - name: Determine changed contract-test workspaces
        id: changes
        shell: bash
        run: |
          set -euo pipefail
          echo "Discovering workspaces with contract tests..."
          MAP=$(npx turbo run test:contract:with-bff --filter=!@odh-dashboard/contract-testing --dry-run=json | jq -r '[.tasks[] | {pkg: .package, cwd: .cwd}] | unique | @base64')
          if [ -z "$MAP" ] || [ "$MAP" = "W10=" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "matrix=$MAP" >> "$GITHUB_OUTPUT"

      - name: Build consumer matrix JSON
        id: consumers
        if: steps.changes.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          RAW=$(npx turbo run test:contract:with-bff --filter=!@odh-dashboard/contract-testing --dry-run=json)
          ARR=$(echo "$RAW" | jq -c '[.tasks[] | { package: .package, cwd: .cwd, name: (.package | sub("^@odh-dashboard/"; "")) }] | unique')
          echo "json=$ARR" >> "$GITHUB_OUTPUT"

      - name: Run contract tests (matrix)
        if: steps.changes.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Running contract tests for discovered workspaces..."
          npx turbo run test:contract:with-bff --filter=!@odh-dashboard/contract-testing --no-cache

      - name: Upload contract test results (rollup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results
          path: |
            ${{ github.workspace }}/**/contract-tests/contract-test-results/*/contract-test-report.html
            ${{ github.workspace }}/**/contract-tests/contract-test-results/*/junit.xml
            ${{ github.workspace }}/**/contract-tests/contract-test-results/*/contract-test-output.log
            ${{ github.workspace }}/**/contract-tests/contract-test-results/*/bff-mock.log
            ${{ github.workspace }}/**/contract-tests/contract-test-results/*/artifacts/**
            !${{ github.workspace }}/**/node_modules/**
            !${{ github.workspace }}/packages/contract-tests/**
          if-no-files-found: warn

      - name: Note endpoints
        if: steps.changes.outputs.changed != 'true'
        run: echo "No consumer contract tests detected. Skipping artifact upload."

  Upload-Contract-Results:
    needs: [Contract-Tests]
    if: needs.Contract-Tests.outputs.consumers != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        consumer: ${{ fromJson(needs.Contract-Tests.outputs.consumers) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Discover latest result for ${{ matrix.consumer.name }}
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          CWD="${{ matrix.consumer.cwd }}"
          if [ ! -d "$CWD/contract-tests/contract-test-results" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          LATEST=$(ls -1dt "$CWD"/contract-tests/contract-test-results/* 2>/dev/null | head -n1 || true)
          if [ -z "$LATEST" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "dir=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Upload ${{ matrix.consumer.name }} contract test results
        if: steps.discover.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results-${{ matrix.consumer.name }}
          path: |
            ${{ steps.discover.outputs.dir }}/contract-test-report.html
            ${{ steps.discover.outputs.dir }}/junit.xml
            ${{ steps.discover.outputs.dir }}/contract-test-output.log
            ${{ steps.discover.outputs.dir }}/bff-mock.log
            ${{ steps.discover.outputs.dir }}/artifacts/**
          if-no-files-found: warn

  Get-Test-Groups:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      test-groups: ${{ steps.set-groups.outputs.test-groups }}
    steps:
      - uses: actions/checkout@v4
      - id: set-groups
        shell: bash
        run: |
          set -euo pipefail
          set -x  # Enable debug mode to see each command

          echo "Checking directory structure..."
          ls -la ${{ github.workspace }}/frontend/src/__tests__/cypress/cypress/tests/ || echo "Base test directory not found"

          if [ -d "${{ github.workspace }}/frontend/src/__tests__/cypress/cypress/tests/mocked" ]; then
            echo "Found mocked tests directory"

            # Get directories and create JSON array - force compact output with -c
            # Replace forward slashes with hyphens for artifact names
            DIRS=$(cd ${{ github.workspace }}/frontend/src/__tests__/cypress/cypress/tests/mocked && \
                  find . -name "*.cy.*" -printf "%h\n" | sed 's|^\./||' | sed 's|/|-|g' | sort -u | \
                  jq -R . | jq -c -s .)

            # Output in the correct format for GitHub Actions
            echo "test-groups=$DIRS" >> "$GITHUB_OUTPUT"

            echo "Generated test groups:"
            cat "$GITHUB_OUTPUT"
          else
            echo "No mocked tests directory found, using default"
            echo "test-groups=[\"default\"]" >> "$GITHUB_OUTPUT"
          fi

  Cypress-Setup:
    needs: [Setup]
    runs-on: ubuntu-latest
    outputs:
      cypress-cache-key: ${{ steps.key.outputs.cypress-cache-key }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate cypress cache key
        id: key
        run: |
          set -euo pipefail
          echo "cypress-cache-key=${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.NODE_VERSION }}-cypress-build-${{ github.sha }}" >> "$GITHUB_OUTPUT"
      - name: Cypress build cache
        uses: actions/cache@v4
        id: cypress-build-cache
        with:
          lookup-only: true
          path: |
            ${{ github.workspace }}/frontend/public-cypress
          key: ${{ steps.key.outputs.cypress-cache-key }}
      - name: Restore cache
        if: steps.cypress-build-cache.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        if: steps.cypress-build-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Build frontend for cypress
        if: steps.cypress-build-cache.outputs.cache-hit != 'true'
        timeout-minutes: 5
        run: |
          set -euo pipefail
          cd ${{ github.workspace }}/frontend && npm run cypress:server:build:coverage

  Cypress-Mock-Tests:
    needs: [Setup, Lint, Type-Check, Cypress-Setup, Get-Test-Groups]
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Longer timeout for Cypress
    strategy:
      fail-fast: false  # Continue other groups if one fails
      matrix:
        test-group: ${{ fromJson(needs.Get-Test-Groups.outputs.test-groups) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ needs.Setup.outputs.modules-cache-key }}
      - name: Restore Cypress build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/frontend/public-cypress
          key: ${{ needs.Cypress-Setup.outputs.cypress-cache-key }}
      - name: Run Cypress Mock tests
        timeout-minutes: 20  # Per test group timeout
        run: |
          set -euo pipefail
          cd ${{ github.workspace }}/frontend
          if [ "${{ matrix.test-group }}" == "default" ]; then
            npm run test:cypress-ci:coverage:nobuild
          else
            # Convert hyphenated test group back to directory path for test execution
            TEST_PATH="${{ matrix.test-group }}"
            TEST_PATH="${TEST_PATH//-//}"  # Replace hyphens back to slashes
            npm run test:cypress-ci:coverage:nobuild -- --spec "src/__tests__/cypress/cypress/tests/mocked/$TEST_PATH/*"
          fi
      - name: Upload Cypress Mock results
        if: always()  # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results-${{ matrix.test-group }}
          path: ${{ github.workspace }}/frontend/src/__tests__/cypress/results/mocked
      - name: Upload Cypress coverage
        uses: actions/upload-artifact@v4
        with:
          name: cypress-coverage-${{ matrix.test-group }}
          path: ${{ github.workspace }}/frontend/src/__tests__/cypress/coverage

  Combine-Results-and-Upload:
    needs: [Unit-Tests, Cypress-Mock-Tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/all-artifacts
      - name: Install dependencies
        run: |
          set -euo pipefail
          npm install nyc --no-save
      - name: Combine coverage reports
        run: |
          set -euo pipefail
          mkdir -p ${{ github.workspace }}/coverage
          if [ -f "${{ github.workspace }}/all-artifacts/unit-coverage/coverage-final.json" ]; then
            cp "${{ github.workspace }}/all-artifacts/unit-coverage/coverage-final.json" "${{ github.workspace }}/coverage/unit-coverage-final.json"
          fi
          if [ -f "${{ github.workspace }}/all-artifacts/backend-coverage/coverage-final.json" ]; then
            cp "${{ github.workspace }}/all-artifacts/backend-coverage/coverage-final.json" "${{ github.workspace }}/coverage/backend-coverage-final.json"
          fi
          find ${{ github.workspace }}/all-artifacts -name "cypress-coverage-*" -type d -print0 | while IFS= read -r -d '' dir; do
            group_name=$(basename "$dir")
            if [ -f "$dir/coverage-final.json" ]; then
              cp "$dir/coverage-final.json" "${{ github.workspace }}/coverage/${group_name}-coverage-final.json" || true
            fi
          done
          echo "Combined coverage files:"
          ls -R "${{ github.workspace }}/coverage"
      - name: Merge coverage reports
        run: |
          set -euo pipefail
          npx nyc merge ${{ github.workspace }}/coverage ${{ github.workspace }}/coverage/merged-coverage.json
          echo "Cleaning up merged coverage file..."
          jq 'del(.[] | select(.statementMap == {}))' ${{ github.workspace }}/coverage/merged-coverage.json > ${{ github.workspace }}/coverage/cleaned-coverage.json
          mv ${{ github.workspace }}/coverage/cleaned-coverage.json ${{ github.workspace }}/coverage/merged-coverage.json
      - name: Generate coverage report
        run: |
          set -euo pipefail
          mkdir -p ${{ github.workspace }}/coverage/report
          npx nyc report --reporter=html --reporter=text-summary --temp-directory ${{ github.workspace }}/coverage -t ${{ github.workspace }}/coverage --report-dir ${{ github.workspace }}/coverage/report
          cp ${{ github.workspace }}/coverage/unit-coverage-final.json ${{ github.workspace }}/coverage/combined-coverage-final.json || true
      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-results
          path: ${{ github.workspace }}/coverage/combined-coverage-final.json
      - name: Cleanup interim coverage files
        run: |
          set -euo pipefail
          rm -rf ${{ github.workspace }}/coverage/unit-coverage-final.json
          rm -rf ${{ github.workspace }}/coverage/backend-coverage-final.json
          find ${{ github.workspace }}/coverage -name "*-coverage-final.json" -type f -delete
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.6.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          name: frontend-and-backend
          file: ${{ github.workspace }}/coverage/merged-coverage.json
          disable_search: true
          directory: ${{ github.workspace }}/coverage
          verbose: true

  Tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - Lint
      - Type-Check
      - Unit-Tests
      - Contract-Tests
      - Cypress-Mock-Tests
      - Combine-Results-and-Upload
    steps:
      - name: Verify all jobs succeeded
        run: |
          set -euo pipefail
          echo "All required jobs have successfully completed for Node.js ${{ env.NODE_VERSION }}."
