name: E2E PR Tests

on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run - e2e for all Smoke/Sanity sets, or e2e[TagName] for specific tag tests'
        required: true
        default: 'e2e'
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  test-workflow-trigger:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Test workflow trigger
        run: |
          echo "Workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"

  pr-comment-parser:
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.parse-comment.outputs.test-type }}
      should-run: ${{ steps.parse-comment.outputs.should-run }}
      pr-number: ${{ steps.parse-comment.outputs.pr-number }}
      test-sets: ${{ steps.parse-comment.outputs.test-sets }}
      tag-name: ${{ steps.parse-comment.outputs.tag-name }}
    steps:
      - name: Debug trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "Comment body: ${{ github.event.comment.body }}"
            echo "Issue number: ${{ github.event.issue.number }}"
            echo "Comment user: ${{ github.event.comment.user.login }}"
          fi

      - name: Parse PR comment
        id: parse-comment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "test-type=${{ inputs.test_type }}" >> $GITHUB_OUTPUT
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "pr-number=manual" >> $GITHUB_OUTPUT
            if [ "${{ inputs.test_type }}" = "e2e" ]; then
              echo 'test-sets=["1","2","3"]' >> $GITHUB_OUTPUT
              echo "tag-name=" >> $GITHUB_OUTPUT
            else
              echo 'test-sets=["1"]' >> $GITHUB_OUTPUT
              TAG_NAME="${{ inputs.test_type }}"
              echo "tag-name=${TAG_NAME#e2e}" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # For pull_request_target, fetch the latest comments
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            echo "Fetching PR comments for PR #${{ github.event.pull_request.number }}"

            # Get the latest comment from the PR
            LATEST_COMMENT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments?per_page=1" | \
              jq -r '.[-1].body // empty')

            COMMENT="$LATEST_COMMENT"
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # Fallback for issue_comment (if we keep it)
            COMMENT="${{ github.event.comment.body }}"
            PR_NUMBER="${{ github.event.issue.number }}"
          fi

          echo "Parsing comment: $COMMENT"
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT

          if [[ "$COMMENT" =~ /e2e ]]; then
            echo "Found /e2e command in comment: $COMMENT"

            if [[ "$COMMENT" =~ ^/e2e$ ]]; then
              echo "test-type=e2e" >> $GITHUB_OUTPUT
              echo "should-run=true" >> $GITHUB_OUTPUT
              echo 'test-sets=["1","2","3"]' >> $GITHUB_OUTPUT
              echo "tag-name=" >> $GITHUB_OUTPUT
            elif [[ "$COMMENT" =~ ^/e2e([A-Z][a-zA-Z]*)$ ]]; then
              TAG_NAME="${BASH_REMATCH[1]}"
              echo "test-type=e2e${TAG_NAME}" >> $GITHUB_OUTPUT
              echo "should-run=true" >> $GITHUB_OUTPUT
              echo 'test-sets=["1"]' >> $GITHUB_OUTPUT
              echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
            else
              echo "Unsupported /e2e command format"
              echo "test-type=none" >> $GITHUB_OUTPUT
              echo "should-run=false" >> $GITHUB_OUTPUT
              echo 'test-sets=["1"]' >> $GITHUB_OUTPUT
              echo "tag-name=" >> $GITHUB_OUTPUT
            fi
          else
            echo "No /e2e command found in latest comment"
            echo "test-type=none" >> $GITHUB_OUTPUT
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo 'test-sets=["1"]' >> $GITHUB_OUTPUT
            echo "tag-name=" >> $GITHUB_OUTPUT
          fi

  e2e-tests:
    needs: pr-comment-parser
    if: needs.pr-comment-parser.outputs.should-run == 'true'
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-set: ${{ fromJson(needs.pr-comment-parser.outputs.test-sets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Download test configuration
        run: |
          # Download test-variables.yml from GitLab securely
          curl -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
               "${{ secrets.GITLAB_TEST_VARS_URL }}" \
               -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml

      - name: Login to OpenShift cluster
        run: |
          # Read credentials from downloaded test-variables.yml
          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

          # Extract OC_USERNAME from OCP_ADMIN_USER section
          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')

          # Extract OC_PASSWORD from OCP_ADMIN_USER section
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          echo "Logging in to OpenShift cluster..."
          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}"

      - name: Set test configuration
        run: |
          # Override cluster-specific URLs with GitHub secrets
          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: ${{ secrets.OCP_CONSOLE_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: ${{ secrets.ODH_DASHBOARD_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

      - name: Build frontend for E2E tests
        run: |
          cd frontend
          # Build frontend to public-cypress directory (same as mock tests)
          npm run cypress:server:build

      - name: Run E2E Tests
        run: |
          cd frontend
          TEST_TYPE="${{ needs.pr-comment-parser.outputs.test-type }}"
          TEST_SET="${{ matrix.test-set }}"
          TAG_NAME="${{ needs.pr-comment-parser.outputs.tag-name }}"

          echo "Running test type: $TEST_TYPE, test set: $TEST_SET, tag name: $TAG_NAME"

          # Use clean npm script for concurrent server + tests execution
          if [ "$TEST_TYPE" = "e2e" ]; then
            export CY_TEST_TAGS="@SanitySet$TEST_SET,@SmokeSet$TEST_SET"
            export CY_SKIP_TAGS="@Bug,@Maintain,@NonConcurrent"
            npm run test:cypress:e2e:ci -- --parallel
          elif [ -n "$TAG_NAME" ]; then
            export CY_TEST_TAGS="@$TAG_NAME"
            export CY_SKIP_TAGS="@Bug,@Maintain,@NonConcurrent"
            npm run test:cypress:e2e:ci -- --parallel
          else
            echo "Unknown test configuration"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ needs.pr-comment-parser.outputs.test-type }}-${{ matrix.test-set }}
          path: |
            frontend/src/__tests__/cypress/results/
            frontend/src/__tests__/cypress/videos/
            frontend/src/__tests__/cypress/screenshots/
            frontend/src/__tests__/cypress/coverage/
          retention-days: 7

      - name: Comment on PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const testType = '${{ needs.pr-comment-parser.outputs.test-type }}';
            const testSet = '${{ matrix.test-set }}';
            const prNumber = '${{ needs.pr-comment-parser.outputs.pr-number }}';
            const status = '${{ job.status }}';

            if (prNumber !== 'manual') {
              const comment = `## E2E Test Results

              **Test Type:** ${testType}
              **Test Set:** ${testSet}
              **Status:** ${status}

              ${status === 'success' ? '✅ Tests passed!' : '❌ Tests failed. Check the artifacts for details.'}

              [View test artifacts](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

              github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
