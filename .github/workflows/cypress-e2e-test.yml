name: E2E Direct Commit PR Tests

on: [push]

permissions:
  contents: read

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  get-test-tags:
    runs-on: self-hosted
    outputs:
      test-tags: ${{ steps.set-tags.outputs.test-tags }}
    steps:
      - name: Set default test tags
        id: set-tags
        run: |
          echo "test-tags=[\"@ci-dashboard-set-1\"]" >> $GITHUB_OUTPUT

  e2e-tests:
    needs: [get-test-tags]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-tag: ${{ fromJson(needs.get-test-tags.outputs.test-tags) }}
    steps:
      - name: Calculate unique port for this workflow run
        run: |
          # Generate unique port using run_id AND matrix index to avoid conflicts
          # Port range: 4000-4999 (1000 possible ports)
          BASE_PORT=$((4000 + ((${{ github.run_id }} % 100) * 10)))
          
          # Add offset based on matrix test-tag to ensure each matrix job gets unique port
          if [[ "${{ matrix.test-tag }}" == *"set-1"* ]]; then
            MATRIX_OFFSET=0
          elif [[ "${{ matrix.test-tag }}" == *"set-2"* ]]; then
            MATRIX_OFFSET=1
          else
            MATRIX_OFFSET=2
          fi
          
          CYPRESS_PORT=$((BASE_PORT + MATRIX_OFFSET))
          
          echo "CYPRESS_PORT=$CYPRESS_PORT" >> $GITHUB_ENV
          echo "üìç Workflow run ${{ github.run_id }} matrix ${{ matrix.test-tag }} will use port: $CYPRESS_PORT"
          echo "üè∑Ô∏è  Test tag: ${{ matrix.test-tag }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-all-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-all-modules-

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        if: steps.npm-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache turbo build artifacts
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-e2e
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-

      - name: Cache OpenShift CLI tarball
        uses: actions/cache@v4
        id: oc-cache
        with:
          path: ${{ runner.temp }}/oc.tar.gz
          key: ${{ runner.os }}-oc-tarball-${{ env.OC_VERSION || '4.15.0' }}

      - name: Check and Install OpenShift CLI
        run: |
          echo "üîç Checking if OpenShift CLI (oc) is installed..."

          # Check if oc is already installed
          if command -v oc &> /dev/null; then
            echo "‚úÖ OpenShift CLI (oc) is already installed"
            oc version --client
          else
            echo "‚ùå OpenShift CLI (oc) not found, installing..."
            echo "üì¶ Installing oc CLI for Linux..."

            OC_TARBALL="${{ runner.temp }}/oc.tar.gz"

            # Check if tarball was cached
            if [ -f "$OC_TARBALL" ]; then
              echo "‚úÖ Using cached OpenShift CLI tarball"
            else
              echo "üì• Downloading OpenShift CLI tarball..."
              curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o "$OC_TARBALL"
            fi

            # Extract and install oc
            echo "üì¶ Extracting OpenShift CLI..."
            tar -xzf "$OC_TARBALL"
            sudo mv oc /usr/local/bin/
            sudo chmod +x /usr/local/bin/oc

            # Verify installation
            echo "‚úÖ OpenShift CLI installed successfully"
            oc version --client
          fi

          # Final verification
          echo "üéØ Final oc version check:"
          oc version --client || echo "‚ö†Ô∏è  Could not determine oc version"

      - name: Install Cypress Dependencies
        run: |
          echo "üîß Installing Cypress system dependencies for Fedora (based on Cypress docs)..."

          # Use the simplified approach from Cypress documentation for Amazon Linux 2023 (Fedora-compatible)
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "üì¶ Installing minimal Cypress dependencies for Linux..."

            # Based on Cypress docs for Amazon Linux 2023 - Fedora compatible
            echo "Installing core dependencies..."
            sudo dnf install -y gtk3-devel nss alsa-lib

            # Add the missing ATK packages that Cypress actually needs
            echo "Installing ATK dependencies..."
            sudo dnf install -y atk atk-devel at-spi2-atk

            # Add additional GUI libraries that might be needed
            echo "Installing additional GUI libraries..."
            sudo dnf install -y libgbm libgbm-devel libnotify libnotify-devel

            # Install Xvfb for headless Electron
            echo "Installing Xvfb for headless browser support..."
            sudo dnf install -y xorg-x11-server-Xvfb

            # Update library cache
            sudo ldconfig

            # Verify installations
            echo "üîç Verifying installations..."

            if ldconfig -p | grep -q libnss3; then
              echo "‚úÖ NSS libraries installed"
            else
              echo "‚ùå NSS libraries missing"
            fi

            if ldconfig -p | grep -q libatk; then
              echo "‚úÖ ATK libraries installed (fixes libatk-1.0.so.0 error)"
              echo "üìã ATK libraries found:"
              ldconfig -p | grep libatk
            else
              echo "‚ùå ATK libraries missing - checking what we have..."
              sudo dnf list installed | grep -i atk || echo "No ATK packages found"
              find /usr/lib* -name "*libatk*" 2>/dev/null || echo "No ATK libraries found in filesystem"
            fi

            if command -v Xvfb &> /dev/null; then
              echo "‚úÖ Xvfb installed"
            else
              echo "‚ùå Xvfb missing"
            fi

            echo "üéØ Cypress dependencies installation completed"
          fi

      - name: Debug available secrets
        run: |
          echo "üîç DEBUG: Checking available secrets..."
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"

          # Check for specific secrets without revealing values
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ]; then
            echo "‚úÖ GITLAB_TOKEN: Available (length: ${#GITLAB_TOKEN})"
          else
            echo "‚ùå GITLAB_TOKEN: Not available or empty"
          fi

          if [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "‚úÖ GITLAB_TEST_VARS_URL: Available (length: ${#GITLAB_TEST_VARS_URL})"
          else
            echo "‚ùå GITLAB_TEST_VARS_URL: Not available or empty"
          fi

          # Check other potentially relevant secrets
          if [ -n "${{ secrets.OC_SERVER }}" ]; then
            echo "‚úÖ OC_SERVER: Available"
          else
            echo "‚ùå OC_SERVER: Not available"
          fi

          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            echo "‚úÖ OCP_CONSOLE_URL: Available"
          else
            echo "‚ùå OCP_CONSOLE_URL: Not available"
          fi

          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            echo "‚úÖ ODH_DASHBOARD_URL: Available"
          else
            echo "‚ùå ODH_DASHBOARD_URL: Not available"
          fi

          # List all available secrets (names only)
          echo "üìã Available secrets in this environment:"
          env | grep -E '^[^=]+=' | sed 's/=.*//' | grep -i secret || echo "No SECRET variables found"

      - name: Download test configuration
        run: |
          # Debug: Show what we're working with
          echo "üîß DEBUG: Attempting to download test configuration..."
          echo "GITLAB_TOKEN present: $([ -n "${{ secrets.GITLAB_TOKEN }}" ] && echo 'YES' || echo 'NO')"
          echo "GITLAB_TEST_VARS_URL present: $([ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ] && echo 'YES' || echo 'NO')"

          # Try to download test-variables.yml from GitLab securely
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ] && [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "üîÑ Both secrets are available, attempting download..."
            echo "Token length: ${#GITLAB_TOKEN}"
            echo "URL length: ${#GITLAB_TEST_VARS_URL}"

            # Debug: Show first few characters of secrets (safely)
            if [ -n "${{ secrets.GITLAB_TOKEN }}" ]; then
              echo "Token starts with: ${{ secrets.GITLAB_TOKEN }}" | cut -c1-10
            fi
            if [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
              echo "URL starts with: ${{ secrets.GITLAB_TEST_VARS_URL }}" | cut -c1-20
            fi

            # Try with SSL verification disabled (for self-signed certs)
            if curl -f -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                        "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                        -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml; then
              echo "‚úÖ Successfully downloaded test configuration from GitLab"
              ls -la ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
            else
              echo "‚ùå Failed to download from GitLab"
              echo "Curl exit code: $?"

              # Try to get more details about the failure
              echo "Trying without -f to see error details..."
              curl -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                  "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                  -o /tmp/test-response 2>&1 || echo "Curl failed with: $?"

              if [ -f /tmp/test-response ]; then
                echo "GitLab API Response:"
                head -10 /tmp/test-response
              fi

              exit 1
            fi
          else
            echo "‚ö†Ô∏è  GitLab secrets not available - cannot download test configuration"
            echo "üí° This workflow requires GITLAB_TOKEN and GITLAB_TEST_VARS_URL secrets to be configured"
            echo "üí° For forked PRs, these secrets need to be available in the upstream repository"
            echo ""
            echo "üîç DEBUG INFO:"
            echo "- Repository: ${{ github.repository }}"
            echo "- Event: ${{ github.event_name }}"
            echo "- Is fork: $([ '${{ github.repository_owner }}' != 'opendatahub-io' ] && echo 'YES' || echo 'NO')"
            echo "- Base repo: ${{ github.base_ref && github.repository || 'N/A' }}"
            echo ""
            echo "üí° POSSIBLE SOLUTIONS:"
            echo "1. Ensure secrets are configured in upstream repo (opendatahub-io/odh-dashboard)"
            echo "2. For testing, secrets need to be available when PR is merged"
            echo "3. Check secret names match exactly: GITLAB_TOKEN, GITLAB_TEST_VARS_URL"
            exit 1
          fi

      - name: Login to OpenShift cluster
        run: |
          # For forked PRs, skip OpenShift login since secrets are not available
          if [ -z "${{ secrets.OC_SERVER }}" ]; then
            echo "‚ö†Ô∏è  OpenShift secrets not available (forked PR) - skipping cluster login"
            echo "üí° Tests will run in mock mode or against local test environment"
            exit 0
          fi

          # Read credentials from downloaded test-variables.yml
          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

          # Extract OC_USERNAME from OCP_ADMIN_USER section
          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')

          # Extract OC_PASSWORD from OCP_ADMIN_USER section
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          # Mask sensitive data in logs
          echo "::add-mask::$OC_PASSWORD"
          echo "::add-mask::$OC_USERNAME"

          # Extract TEST_USER_3_AUTH_TYPE from TEST_USER_3 section
          TEST_USER_3_AUTH_TYPE=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "AUTH_TYPE:" | head -1 | sed 's/.*AUTH_TYPE: //' | tr -d ' ')

          # Extract TEST_USER_3_USERNAME from TEST_USER_3 section
          TEST_USER_3_USERNAME=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')

          # Extract TEST_USER_3_PASSWORD from TEST_USER_3 section
          TEST_USER_3_PASSWORD=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          # Mask TEST_USER_3 credentials in logs (must happen after extraction)
          echo "::add-mask::$TEST_USER_3_USERNAME"
          echo "::add-mask::$TEST_USER_3_PASSWORD"

          # Export TEST_USER_3 credentials as environment variables for Cypress
          echo "TEST_USER_3_AUTH_TYPE=$TEST_USER_3_AUTH_TYPE" >> $GITHUB_ENV
          echo "TEST_USER_3_USERNAME=$TEST_USER_3_USERNAME" >> $GITHUB_ENV
          echo "TEST_USER_3_PASSWORD=$TEST_USER_3_PASSWORD" >> $GITHUB_ENV
          
          echo "Logging in to OpenShift cluster..."
          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}" --insecure-skip-tls-verify

          # Export OpenShift configuration for Cypress tests
          echo "üîß Setting up OpenShift configuration for Cypress tests..."
          export KUBECONFIG="$HOME/.kube/config"
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

      - name: Set test configuration
        run: |
          # Keep test-variables.yml as-is (with cluster URLs for API calls)
          # Only use BASE_URL to tell the browser where to navigate
          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"
          
          echo "‚úÖ Using test-variables.yml with cluster URLs for API calls"
          echo "‚úÖ Browser will navigate to localhost:${CYPRESS_PORT} via BASE_URL"
          
          export CY_TEST_CONFIG="$TEST_VARS_FILE"

      - name: Start Cypress Server
        run: |
          # Increase file descriptor limit for parallel execution
          echo "üîß Increasing system limits for parallel execution..."
          ulimit -n 65536 || echo "‚ö†Ô∏è  Could not increase file descriptor limit (current: $(ulimit -n))"
          echo "File descriptors: $(ulimit -n)"
          
          echo "üßπ Cleaning up any existing processes on port ${CYPRESS_PORT}..."
          pkill -f "webpack.*serve" || echo "No webpack processes found"
          lsof -ti:${CYPRESS_PORT} | xargs kill -9 2>/dev/null || echo "No node processes on port ${CYPRESS_PORT}"
          sleep 2
          
          echo "üöÄ Starting webpack dev server on port ${CYPRESS_PORT} with cluster proxy..."
          cd frontend && ODH_PORT=${CYPRESS_PORT} npm run start:dev:ext &
          
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started webpack dev server with PID: $SERVER_PID on port ${CYPRESS_PORT}"
          
          # Give the server extra time to start in CI
          echo "‚è≥ Giving server 15 seconds to initialize..."
          sleep 15

      - name: Wait for Server Ready
        run: |
          echo "‚è≥ Waiting for localhost:${CYPRESS_PORT} to be ready..."
          # Use HTTP check instead of TCP since server is clearly running
          npx wait-on http://localhost:${CYPRESS_PORT} --timeout 120000
          echo "‚úÖ Server is responding to HTTP on port ${CYPRESS_PORT}!"
          
          # Verify the application actually loads with more details
          echo "üîç Verifying application loads properly..."
          for i in {1..10}; do
            echo "üîÑ Attempt $i/10: Testing application on port ${CYPRESS_PORT}..."
            
            # Check if basic page loads
            if curl -s -f http://localhost:${CYPRESS_PORT}/ > /tmp/response.html 2>/dev/null; then
              echo "‚úÖ HTTP 200 response received"
              
              # Check for dashboard content
              if grep -q "Data Science Projects\|ODH\|Open Data Hub\|Dashboard" /tmp/response.html; then
                echo "‚úÖ Found dashboard content!"
                break
              else
                echo "‚ö†Ô∏è  Page loads but no dashboard content yet..."
                echo "üìÑ Response contains: $(head -c 200 /tmp/response.html | tr '\n' ' ')"
              fi
            else
              echo "‚ùå HTTP request failed"
              curl_exit_code=$?
              echo "Curl exit code: $curl_exit_code"
            fi
            
            if [ $i -lt 10 ]; then
              echo "‚è≥ Waiting 8 seconds before retry..."
              sleep 8
            fi
          done
          
          # Final verification with detailed debugging
          echo "üîç Final application verification..."
          if curl -s -f http://localhost:${CYPRESS_PORT}/ | grep -q "Data Science Projects\|ODH\|Open Data Hub\|Dashboard"; then
            echo "‚úÖ Server is ready and application is loaded on port ${CYPRESS_PORT}!"
            
            # Test API endpoint
            echo "üîç Testing API endpoint..."
            if curl -s -f http://localhost:${CYPRESS_PORT}/api/status > /dev/null; then
              echo "‚úÖ API proxy is working!"
            else
              echo "‚ö†Ô∏è  API endpoint test failed, but frontend is working"
            fi
          else
            echo "‚ùå Application failed to load properly on port ${CYPRESS_PORT}"
            echo ""
            echo "üìä Debugging information:"
            echo "üîÑ Server process status:"
            ps aux | grep -E "(webpack|node.*${CYPRESS_PORT})" | head -5 || echo "No matching processes found"
            
            echo ""
            echo "üåê Network connectivity test:"
            curl -I http://localhost:${CYPRESS_PORT}/ 2>&1 || echo "Connection failed"
            
            echo ""
            echo "üìÑ Raw response (first 1000 chars):"
            curl -s http://localhost:${CYPRESS_PORT}/ 2>/dev/null | head -c 1000 || echo "Failed to get response"
            
            echo ""
            echo "üîç Looking for webpack output in background..."
            # Check if there are any relevant log files or output
            ls -la /tmp/ | grep -E "(webpack|error|log)" || echo "No relevant temp files found"
            
            exit 1
          fi

      - name: Setup Xvfb for Electron
        run: |
          # Calculate unique display number based on port to avoid conflicts
          DISPLAY_NUM=$((99 + (${CYPRESS_PORT} - 4670)))
          
          echo "üñ•Ô∏è  Starting Xvfb on display :${DISPLAY_NUM} for Electron browser..."
          
          # Kill any existing Xvfb on this display
          pkill -f "Xvfb :${DISPLAY_NUM}" || true
          sleep 1
          
          # Start Xvfb
          Xvfb :${DISPLAY_NUM} -screen 0 1280x1024x24 > /tmp/xvfb-${DISPLAY_NUM}.log 2>&1 &
          XVFB_PID=$!
          
          echo "XVFB_PID=${XVFB_PID}" >> $GITHUB_ENV
          echo "DISPLAY=:${DISPLAY_NUM}" >> $GITHUB_ENV
          
          # Wait for Xvfb to be ready
          sleep 2
          
          # Verify Xvfb is running
          if ps -p $XVFB_PID > /dev/null; then
            echo "‚úÖ Xvfb ready on display :${DISPLAY_NUM} (PID: ${XVFB_PID})"
          else
            echo "‚ùå Xvfb failed to start"
            cat /tmp/xvfb-${DISPLAY_NUM}.log || true
            exit 1
          fi

      - name: Run E2E Tests
        env:
          CY_TEST_CONFIG: ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          CY_RESULTS_DIR: ${{ github.workspace }}/frontend/src/__tests__/cypress/results/${{ matrix.test-tag }}
          DEBUG: cypress:server:browsers*,cypress:server:util:process_profiler
          ELECTRON_ENABLE_LOGGING: 1
          DISPLAY: ${{ env.DISPLAY }}
        run: |
          cd frontend

          echo "üß™ Running commit-based E2E tests..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # DEBUG: Verify environment setup (DO NOT show test-variables.yml content)
          echo ""
          echo "=== Environment Verification ==="
          echo "CY_TEST_CONFIG: $CY_TEST_CONFIG"
          echo "CY_RESULTS_DIR: $CY_RESULTS_DIR"
          echo "CYPRESS_PORT: ${CYPRESS_PORT}"
          echo "DISPLAY: ${DISPLAY}"
          echo "Using Electron (same as working version, but with dynamic ports)"
          echo "================================"
          echo ""

          # Run real E2E tests (not mock mode)
          echo "üöÄ Running real E2E tests against live dashboard"

          # Ensure OpenShift configuration is available to Cypress process
          if [ -n "$KUBECONFIG" ]; then
            echo "üîß OpenShift configuration available: $KUBECONFIG"
            # Verify oc command works in this context
            oc whoami || echo "‚ö†Ô∏è  oc whoami failed, but continuing with tests"
          else
            echo "‚ö†Ô∏è  No KUBECONFIG set, OpenShift commands may fail"
          fi

          echo "üéØ Running tests with tags: ${{ matrix.test-tag }}"
          echo "üö´ Skipping tags: @Bug,@Maintain,@NonConcurrent"
          echo "üìã Test group: ${{ matrix.test-tag }}"

          # Use Jenkins-style command format for proper tag filtering
          echo "üîÑ Using Electron browser (like working version)"
          
          # Increase file descriptor limit for Electron/Cypress
          echo "üîß Setting file descriptor limit for Electron..."
          ulimit -n 65536 || echo "‚ö†Ô∏è  Could not increase file descriptor limit (current: $(ulimit -n))"
          echo "File descriptors for Cypress: $(ulimit -n)"

          # Create results directory
          mkdir -p "$CY_RESULTS_DIR"

          echo "üêõ Cypress debug logging enabled for browser launch troubleshooting"

          # Run tests against dynamic port - baseUrl from test-variables.yml
          BASE_URL=http://localhost:${CYPRESS_PORT} npm run cypress:run:electron -- --env skipTags="@Bug @Maintain @NonConcurrent",grepTags="${{ matrix.test-tag }}",grepFilterSpecs=true --config video=true,screenshotsFolder="$CY_RESULTS_DIR/screenshots",videosFolder="$CY_RESULTS_DIR/videos"

      - name: Debug Electron on failure
        if: ${{ failure() }}
        run: |
          echo "=== POST-FAILURE DEBUGGING ==="
          echo ""
          echo "1. Check if Electron processes launched:"
          ps aux | grep -v grep | grep electron | head -5 || echo "No Electron processes found"
          echo ""
          echo "2. Check Cypress processes:"
          ps aux | grep -v grep | grep cypress | head -3 || echo "No Cypress processes"
          echo ""
          echo "3. Check for Electron crash logs:"
          find /tmp -name "*electron*" -o -name "*cypress*" 2>/dev/null | grep -i "log\|crash" | head -5 || echo "No crash logs found"
          echo ""
          echo "4. Check Xvfb status:"
          ps aux | grep -v grep | grep Xvfb || echo "No Xvfb processes"
          echo ""
          echo "5. DISPLAY variable:"
          echo "DISPLAY=${DISPLAY}"

      - name: Test tag name
        if: ${{ always() }}
        run: |
          TEST_TAG_NAME=$(echo '${{ matrix.test-tag }}' | tr '/' '_' | tr '@' '_')
          echo "TEST_TAG_NAME=$TEST_TAG_NAME" >> $GITHUB_ENV

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.test-tag }}
          path: |
            frontend/src/__tests__/cypress/results/
            frontend/src/__tests__/cypress/videos/
            frontend/src/__tests__/cypress/screenshots/
            frontend/src/__tests__/cypress/coverage/
          retention-days: 7

      - name: Log test completion
        if: always()
        run: |
          echo "üèÅ E2E Test completed!"
          echo "Status: ${{ job.status }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Test Tag: ${{ matrix.test-tag }}"
          echo "Port: ${CYPRESS_PORT}"
          echo "Display: ${DISPLAY}"
          echo "Commit: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "üìä Test artifacts uploaded to:"
          echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  cleanup-server:
    needs: [e2e-tests]
    runs-on: self-hosted
    if: ${{ always() && needs.e2e-tests.result != 'skipped' }}
    steps:
      - name: Stop Cypress Servers
        run: |
          echo "üõë Stopping all webpack dev servers..."
          pkill -f "webpack.*serve" || echo "No webpack processes found"
          
          echo "üõë Stopping all Xvfb processes..."
          pkill -f "Xvfb" || echo "No Xvfb processes found"
          
          # Clean up common port range
          for port in {4000..4999..10}; do
            if lsof -ti:$port >/dev/null 2>&1; then
              echo "üßπ Cleaning up port $port"
              lsof -ti:$port | xargs kill -9 2>/dev/null || true
            fi
          done
          
          echo "‚úÖ Server cleanup completed"
