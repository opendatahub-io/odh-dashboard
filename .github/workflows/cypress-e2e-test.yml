name: E2E Direct Commit PR Tests

on:
  [push, pull_request]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  get-test-tags:
    runs-on: self-hosted
    outputs:
      test-tags: ${{ steps.set-tags.outputs.test-tags }}
    steps:
      - name: Set default test tags
        id: set-tags
        # TO:DO - update execution tags and simplify for v1
        run: |
          echo "test-tags=[\"@SmokeSet1\",\"@SmokeSet2\",\"@SmokeSet3\"]" >> $GITHUB_OUTPUT

  e2e-tests:
    needs: [get-test-tags]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-tag: ${{ fromJson(needs.get-test-tags.outputs.test-tags) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-all-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-all-modules-

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        if: steps.npm-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache turbo build artifacts
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-e2e
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-

      - name: Cache OpenShift CLI tarball
        uses: actions/cache@v4
        id: oc-cache
        with:
          path: ${{ runner.temp }}/oc.tar.gz
          key: ${{ runner.os }}-oc-tarball-${{ env.OC_VERSION || '4.15.0' }}

      - name: Check and Install OpenShift CLI
        run: |
          echo "Checking if OpenShift CLI (oc) is installed..."

          # Check if oc is already installed
          if command -v oc &> /dev/null; then
            echo "OpenShift CLI (oc) is already installed"
            oc version --client
          else
            echo "OpenShift CLI (oc) not found, installing..."
            echo "Installing oc CLI for Linux..."

            OC_TARBALL="${{ runner.temp }}/oc.tar.gz"

            # Check if tarball was cached
            if [ -f "$OC_TARBALL" ]; then
              echo "Using cached OpenShift CLI tarball"
            else
              echo "Downloading OpenShift CLI tarball..."
              curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o "$OC_TARBALL"
            fi

            # Extract and install oc
            echo "Extracting OpenShift CLI..."
            tar -xzf "$OC_TARBALL"
            sudo mv oc /usr/local/bin/
            sudo chmod +x /usr/local/bin/oc

            # Verify installation
            echo "OpenShift CLI installed successfully"
            oc version --client
          fi

          # Final verification
          echo "Final oc version check:"
          oc version --client || echo "Could not determine oc version"

      - name: Install Cypress Dependencies
        run: |
          echo "Installing Cypress system dependencies for Fedora..."

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Installing minimal Cypress dependencies for Linux..."

            echo "Installing core dependencies..."
            sudo dnf install -y xorg-x11-server-Xvfb gtk3-devel nss alsa-lib

            echo "Installing ATK dependencies..."
            sudo dnf install -y atk atk-devel at-spi2-atk

            echo "Installing additional GUI libraries..."
            sudo dnf install -y libgbm libgbm-devel libnotify libnotify-devel

            sudo ldconfig

            echo "Verifying installations..."
            if command -v Xvfb &> /dev/null; then
              echo "Xvfb installed"
            else
              echo "Xvfb missing"
            fi

            if ldconfig -p | grep -q libnss3; then
              echo "NSS libraries installed"
            else
              echo "NSS libraries missing"
            fi

            if ldconfig -p | grep -q libatk; then
              echo "ATK libraries installed"
            else
              echo "ATK libraries missing"
            fi

            echo "Cypress dependencies installation completed"
          fi

      - name: Download test configuration
        run: |
          echo "Attempting to download test configuration..."

          if [ -n "${{ secrets.GITLAB_TOKEN }}" ] && [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            echo "Secrets available, downloading from GitLab..."

            if curl -f -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                        "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                        -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml; then
              echo "Successfully downloaded test configuration from GitLab"
            else
              echo "Failed to download from GitLab"
              exit 1
            fi
          else
            echo "GitLab secrets not available"
            exit 1
          fi

      - name: Login to OpenShift cluster
        run: |
          if [ -z "${{ secrets.OC_SERVER }}" ]; then
            echo "OpenShift secrets not available - skipping cluster login"
            exit 0
          fi

          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          echo "::add-mask::$OC_PASSWORD"
          echo "::add-mask::$OC_USERNAME"

          TEST_USER_3_AUTH_TYPE=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "AUTH_TYPE:" | head -1 | sed 's/.*AUTH_TYPE: //' | tr -d ' ')
          TEST_USER_3_USERNAME=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')
          TEST_USER_3_PASSWORD=$(grep -A 10 "^TEST_USER_3:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          HTPASSWD_CLUSTER_ADMIN_AUTH_TYPE=$(grep -A 10 "^HTPASSWD_CLUSTER_ADMIN_USER:" "$TEST_VARS_FILE" | grep "AUTH_TYPE:" | head -1 | sed 's/.*AUTH_TYPE: //' | tr -d ' ')
          HTPASSWD_CLUSTER_ADMIN_USERNAME=$(grep -A 10 "^HTPASSWD_CLUSTER_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')
          HTPASSWD_CLUSTER_ADMIN_PASSWORD=$(grep -A 10 "^HTPASSWD_CLUSTER_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          LDAP_CONTRIBUTOR_AUTH_TYPE=$(grep -A 10 "^LDAP_CONTRIBUTOR_USER:" "$TEST_VARS_FILE" | grep "AUTH_TYPE:" | head -1 | sed 's/.*AUTH_TYPE: //' | tr -d ' ')
          LDAP_CONTRIBUTOR_USERNAME=$(grep -A 10 "^LDAP_CONTRIBUTOR_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')
          LDAP_CONTRIBUTOR_PASSWORD=$(grep -A 10 "^LDAP_CONTRIBUTOR_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          echo "::add-mask::$TEST_USER_3_USERNAME"
          echo "::add-mask::$TEST_USER_3_PASSWORD"
          echo "::add-mask::$HTPASSWD_CLUSTER_ADMIN_USERNAME"
          echo "::add-mask::$HTPASSWD_CLUSTER_ADMIN_PASSWORD"
          echo "::add-mask::$LDAP_CONTRIBUTOR_USERNAME"
          echo "::add-mask::$LDAP_CONTRIBUTOR_PASSWORD"

          echo "TEST_USER_3_AUTH_TYPE=$TEST_USER_3_AUTH_TYPE" >> $GITHUB_ENV
          echo "TEST_USER_3_USERNAME=$TEST_USER_3_USERNAME" >> $GITHUB_ENV
          echo "TEST_USER_3_PASSWORD=$TEST_USER_3_PASSWORD" >> $GITHUB_ENV
          
          export HTPASSWD_CLUSTER_ADMIN_AUTH_TYPE HTPASSWD_CLUSTER_ADMIN_USERNAME HTPASSWD_CLUSTER_ADMIN_PASSWORD
          export LDAP_CONTRIBUTOR_AUTH_TYPE LDAP_CONTRIBUTOR_USERNAME LDAP_CONTRIBUTOR_PASSWORD
          
          HTPASSWD_JSON=$(jq -n -c \
            --arg auth_type "$HTPASSWD_CLUSTER_ADMIN_AUTH_TYPE" \
            --arg username "$HTPASSWD_CLUSTER_ADMIN_USERNAME" \
            --arg password "$HTPASSWD_CLUSTER_ADMIN_PASSWORD" \
            '{"AUTH_TYPE": $auth_type, "USERNAME": $username, "PASSWORD": $password}')
          
          LDAP_JSON=$(jq -n -c \
            --arg auth_type "$LDAP_CONTRIBUTOR_AUTH_TYPE" \
            --arg username "$LDAP_CONTRIBUTOR_USERNAME" \
            --arg password "$LDAP_CONTRIBUTOR_PASSWORD" \
            '{"AUTH_TYPE": $auth_type, "USERNAME": $username, "PASSWORD": $password}')
          
          echo "HTPASSWD_CLUSTER_ADMIN_USER=$HTPASSWD_JSON" >> $GITHUB_ENV
          echo "LDAP_CONTRIBUTOR_USER=$LDAP_JSON" >> $GITHUB_ENV
          
          echo "Logging in to OpenShift cluster..."
          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}" --insecure-skip-tls-verify

          echo "Setting up OpenShift configuration for Cypress tests..."
          export KUBECONFIG="$HOME/.kube/config"
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

      - name: Set test configuration
        run: |
          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: ${{ secrets.OCP_CONSOLE_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: ${{ secrets.ODH_DASHBOARD_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          if [ -z "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            echo "OCP_CONSOLE_URL secret not available - using localhost"
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: http://localhost:4010|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          if [ -z "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            echo "ODH_DASHBOARD_URL secret not available - using localhost"
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: http://localhost:4010|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi

          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"

      - name: Start Cypress Server
        run: |
          echo "Cleaning up any existing processes..."
          pkill -f "webpack.*serve" || echo "No webpack processes found"
          pkill -f "node.*4010" || echo "No node processes on port 4010"
          sleep 2
          
          echo "Starting webpack dev server with cluster proxy..."
          cd frontend && npm run start:dev:ext &
          
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started webpack dev server with PID: $SERVER_PID"
          
          echo "Giving server 15 seconds to initialize..."
          sleep 15

      - name: Wait for Server Ready
        run: |
          echo "Waiting for localhost:4010 to be ready..."
          npx wait-on http://localhost:4010 --timeout 120000
          echo "Server is responding to HTTP"
          
          echo "Verifying application loads properly..."
          for i in {1..10}; do
            echo "Attempt $i/10: Testing application..."
            
            if curl -s -f http://localhost:4010/ > /tmp/response.html 2>/dev/null; then
              echo "HTTP 200 response received"
              
              if grep -q "Data Science Projects\|ODH\|Open Data Hub\|Dashboard" /tmp/response.html; then
                echo "Found dashboard content"
                break
              else
                echo "Page loads but no dashboard content yet..."
              fi
            else
              echo "HTTP request failed"
            fi
            
            if [ $i -lt 10 ]; then
              echo "Waiting 8 seconds before retry..."
              sleep 8
            fi
          done
          
          echo "Final application verification..."
          if curl -s -f http://localhost:4010/ | grep -q "Data Science Projects\|ODH\|Open Data Hub\|Dashboard"; then
            echo "Server is ready and application is loaded"
            
            echo "Testing API endpoint..."
            if curl -s -f http://localhost:4010/api/status > /dev/null; then
              echo "API proxy is working"
            else
              echo "API endpoint test failed, but frontend is working"
            fi
          else
            echo "Application failed to load properly"
            exit 1
          fi

      - name: Run E2E Tests
        run: |
          cd frontend

          echo "Running E2E tests..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"
          export CY_RESULTS_DIR="${{ github.workspace }}/frontend/src/__tests__/cypress/results/${{ matrix.test-tag }}"

          if [ -n "$KUBECONFIG" ]; then
            echo "OpenShift configuration available: $KUBECONFIG"
            oc whoami || echo "oc whoami failed, but continuing with tests"
          else
            echo "No KUBECONFIG set, OpenShift commands may fail"
          fi

          echo "Running tests with tags: ${{ matrix.test-tag }}"
          echo "Skipping tags: @Bug,@Maintain,@NonConcurrent"

          echo "Using Chrome browser"

          mkdir -p "$CY_RESULTS_DIR"

          BASE_URL=http://localhost:4010 npm run cypress:run:chrome -- --env skipTags="@Bug @Maintain @NonConcurrent",grepTags="${{ matrix.test-tag }}",grepFilterSpecs=true --config video=true,screenshotsFolder="$CY_RESULTS_DIR/screenshots",videosFolder="$CY_RESULTS_DIR/videos"

      - name: Test tag name
        if: ${{ always() }}
        run: |
          TEST_TAG_NAME=$(echo '${{ matrix.test-tag }}' | tr '/' '_' | tr '@' '_')
          echo "TEST_TAG_NAME=$TEST_TAG_NAME" >> $GITHUB_ENV

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.test-tag }}
          path: |
            frontend/src/__tests__/cypress/results/
            frontend/src/__tests__/cypress/videos/
            frontend/src/__tests__/cypress/screenshots/
            frontend/src/__tests__/cypress/coverage/
          retention-days: 7

      - name: Log test completion
        if: always()
        run: |
          echo "E2E Test completed"
          echo "Status: ${{ job.status }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Test Tag: ${{ matrix.test-tag }}"
          echo "Commit: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"

  cleanup-server:
    needs: [e2e-tests]
    runs-on: self-hosted
    if: ${{ always() && needs.e2e-tests.result != 'skipped' }}
    steps:
      - name: Stop Cypress Servers
        run: |
          echo "Stopping webpack dev server..."
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || echo "Failed to kill SERVER_PID"
          fi
          pkill -f "webpack.*serve" || echo "No webpack processes found"
          pkill -f "node.*4010" || echo "No node processes on port 4010"
          echo "Server cleanup completed"

