name: E2E Direct Commit PR Tests

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 20.x
  DO_NOT_TRACK: 1

jobs:
  get-test-tags:
    runs-on: self-hosted
    outputs:
      test-tags: ${{ steps.set-tags.outputs.test-tags }}
    steps:
      - name: Set default test tags
        id: set-tags
        run: |
          echo "test-tags=[\"@SmokeSet1\",\"@SmokeSet2\",\"@SmokeSet3\"]" >> $GITHUB_OUTPUT

  e2e-tests:
    needs: [get-test-tags]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        test-tag: ${{ fromJson(needs.get-test-tags.outputs.test-tags) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (self-hosted optimized)
        run: |
          echo "📦 Installing dependencies for self-hosted runner..."
          npm ci --prefer-offline --no-audit --no-fund
          echo "✅ Dependencies installed"

      - name: Cache turbo build artifacts
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.turbo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-${{ github.sha }}-e2e
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-turbo-

      - name: Check and Install OpenShift CLI (self-hosted optimized)
        run: |
          echo "🔍 Checking if OpenShift CLI (oc) is installed..."
          if command -v oc &> /dev/null; then
            echo "✅ OpenShift CLI (oc) is already installed"
            oc version --client
          else
            echo "❌ OpenShift CLI (oc) not found, installing..."
            curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
            tar -xzf oc.tar.gz
            sudo mv oc /usr/local/bin/
            sudo chmod +x /usr/local/bin/oc
            rm -f oc.tar.gz
            echo "✅ OpenShift CLI installed successfully"
            oc version --client
          fi

      - name: Install jq for Cypress tests
        run: |
          if command -v jq &> /dev/null; then
            echo "✅ jq is already installed"
          else
            echo "📦 Installing jq..."
            if command -v dnf &> /dev/null; then
              sudo dnf install -y jq
            elif command -v yum &> /dev/null; then
              sudo yum install -y jq
            else
              sudo wget -O /usr/local/bin/jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
              sudo chmod +x /usr/local/bin/jq
            fi
            echo "✅ jq installed"
          fi

      - name: Install Cypress Dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "📦 Installing Cypress system dependencies..."
            sudo dnf install -y xorg-x11-server-Xvfb gtk3-devel nss alsa-lib
            sudo dnf install -y atk atk-devel at-spi2-atk
            sudo dnf install -y libgbm libgbm-devel libnotify libnotify-devel
            sudo ldconfig
            echo "✅ Cypress dependencies installed"
          fi

      - name: Download test configuration
        run: |
          if [ -n "${{ secrets.GITLAB_TOKEN }}" ] && [ -n "${{ secrets.GITLAB_TEST_VARS_URL }}" ]; then
            curl -f -k -H "Authorization: Bearer ${{ secrets.GITLAB_TOKEN }}" \
                 "${{ secrets.GITLAB_TEST_VARS_URL }}" \
                 -o ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
            echo "✅ Successfully downloaded test configuration from GitLab"
          else
            echo "❌ GitLab secrets not available - cannot download test configuration"
            exit 1
          fi

      - name: Login to OpenShift cluster
        run: |
          if [ -z "${{ secrets.OC_SERVER }}" ]; then
            echo "⚠️  OpenShift secrets not available - skipping cluster login"
            exit 0
          fi

          TEST_VARS_FILE="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"
          OC_USERNAME=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "USERNAME:" | head -1 | sed 's/.*USERNAME: //' | tr -d ' ')
          OC_PASSWORD=$(grep -A 10 "^OCP_ADMIN_USER:" "$TEST_VARS_FILE" | grep "PASSWORD:" | head -1 | sed 's/.*PASSWORD: //' | tr -d ' ')

          if [ -n "$OC_PASSWORD" ]; then
            echo "::add-mask::$OC_PASSWORD"
          fi
          if [ -n "$OC_USERNAME" ]; then
            echo "::add-mask::$OC_USERNAME"
          fi

          oc login -u "$OC_USERNAME" -p "$OC_PASSWORD" --server="${{ secrets.OC_SERVER }}" --insecure-skip-tls-verify
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Set test configuration URLs from secrets
        run: |
          # Only update URLs if secrets are provided
          # Port will be set dynamically at server start time
          if [ -n "${{ secrets.OCP_CONSOLE_URL }}" ]; then
            sed -i.bak "s|OCP_CONSOLE_URL:.*|OCP_CONSOLE_URL: ${{ secrets.OCP_CONSOLE_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          
          if [ -n "${{ secrets.ODH_DASHBOARD_URL }}" ]; then
            sed -i.bak "s|ODH_DASHBOARD_URL:.*|ODH_DASHBOARD_URL: ${{ secrets.ODH_DASHBOARD_URL }}|" ${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml
          fi
          
          # Note: If secrets not provided, BASE_URL will be set at test run time with dynamic port

      - name: Find available port and start server
        run: |
          # Find available port RIGHT BEFORE starting server (prevents race conditions)
          # Use job index to assign base ports dynamically (works with any number of test tags)
          BASE_PORT=$((4010 + (${{ strategy.job-index }} * 10)))
          
          PORT=$BASE_PORT
          MAX_PORT=$((BASE_PORT + 9))
          
          echo "🔍 Finding port for ${{ matrix.test-tag }} in range $PORT-$MAX_PORT..."
          while [ $PORT -le $MAX_PORT ]; do
            if ! lsof -ti:$PORT > /dev/null 2>&1; then
              echo "✅ Found available port: $PORT"
              CYPRESS_PORT=$PORT
              break
            else
              echo "⚠️  Port $PORT in use, trying next..."
              PORT=$((PORT + 1))
            fi
          done
          
          if [ $PORT -gt $MAX_PORT ]; then
            echo "❌ No ports available in range $BASE_PORT-$MAX_PORT"
            exit 1
          fi
          
          # Export port for later steps
          echo "CYPRESS_PORT=$CYPRESS_PORT" >> $GITHUB_ENV
          
          # Immediately start server to claim the port (minimize race window)
          echo "🚀 Starting webpack dev server on port $CYPRESS_PORT..."
          cd frontend && ODH_PORT=$CYPRESS_PORT npm run start:dev:ext > /tmp/webpack-${CYPRESS_PORT}.log 2>&1 &
          
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started server with PID: $SERVER_PID on port $CYPRESS_PORT"
          
          sleep 15

      - name: Wait for Server Ready
        run: |
          echo "⏳ Waiting for server on port $CYPRESS_PORT..."
          npx wait-on http://localhost:$CYPRESS_PORT --timeout 120000
          echo "✅ Server is responding!"
          
          # Verify application loads
          FOUND=false
          for i in {1..10}; do
            echo "Attempt $i/10: Checking for dashboard content..."
            if curl -s -f http://localhost:$CYPRESS_PORT/ | grep -q "Data Science Projects\|ODH\|Dashboard"; then
              echo "✅ Application loaded successfully!"
              FOUND=true
              break
            fi
            [ $i -lt 10 ] && sleep 8
          done
          
          if [ "$FOUND" = false ]; then
            echo "❌ Dashboard content not found after 10 attempts"
            echo "Checking what content is returned:"
            curl -s http://localhost:$CYPRESS_PORT/ | head -c 500
            exit 1
          fi

      - name: Run E2E Tests
        run: |
          cd frontend
          export CY_TEST_CONFIG="${{ github.workspace }}/frontend/src/__tests__/cypress/test-variables.yml"
          export CY_RESULTS_DIR="${{ github.workspace }}/frontend/src/__tests__/cypress/results/${{ matrix.test-tag }}"
          mkdir -p "$CY_RESULTS_DIR"
          
          echo "🧪 Running E2E tests on port $CYPRESS_PORT"
          echo "🎯 Test tag: ${{ matrix.test-tag }}"
          
          BASE_URL=http://localhost:$CYPRESS_PORT npm run cypress:run:chrome -- \
            --env skipTags="@Bug @Maintain @NonConcurrent",grepTags="${{ matrix.test-tag }}",grepFilterSpecs=true \
            --config video=true,screenshotsFolder="$CY_RESULTS_DIR/screenshots",videosFolder="$CY_RESULTS_DIR/videos"

      - name: Cleanup server for this job
        if: always()
        run: |
          echo "🧹 Cleaning up server on port $CYPRESS_PORT (this job only)..."
          
          # Kill by PID if available
          if [ -n "$SERVER_PID" ]; then
            echo "🔥 Killing server PID: $SERVER_PID"
            kill -9 $SERVER_PID 2>/dev/null || echo "PID $SERVER_PID already terminated"
          fi
          
          # Also kill by port as backup
          if lsof -ti:$CYPRESS_PORT > /dev/null 2>&1; then
            echo "🔥 Killing remaining processes on port $CYPRESS_PORT"
            lsof -ti:$CYPRESS_PORT | xargs kill -9 2>/dev/null || true
          fi
          
          echo "✅ Cleanup complete for port $CYPRESS_PORT"

      - name: Test tag name
        if: always()
        run: |
          TEST_TAG_NAME=$(echo '${{ matrix.test-tag }}' | tr '/' '_' | tr '@' '_')
          echo "TEST_TAG_NAME=$TEST_TAG_NAME" >> $GITHUB_ENV

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ env.TEST_TAG_NAME }}-${{ github.run_id }}
          path: |
            frontend/src/__tests__/cypress/results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Log test completion
        if: always()
        run: |
          echo "🏁 Test completed: ${{ matrix.test-tag }}"
          echo "Status: ${{ job.status }}"
          echo "Port used: $CYPRESS_PORT"
          echo "Run ID: ${{ github.run_id }}"

  cleanup-stale-servers:
    needs: [e2e-tests]
    runs-on: self-hosted
    if: always()
    steps:
      - name: Clean up any stale webpack processes
        run: |
          echo "🧹 Final cleanup: removing any stale webpack processes..."
          
          # Kill any webpack processes older than 1 hour (stale from failed runs)
          # This won't affect currently running tests
          pkill -f "webpack.*serve" -o 3600 2>/dev/null || echo "No stale webpack processes found"
          
          echo "✅ Final cleanup complete"
