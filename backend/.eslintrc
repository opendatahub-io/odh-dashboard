{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "node": true
  },
  // tell the TypeScript parser that we want to use JSX syntax
  "parserOptions": {
    "tsx": true,
    "jsx": true,
    "js": true,
    "useJSXTextNode": true,
    "project": "./tsconfig.json",
    "tsconfigRootDir": "."
  },
  // includes the typescript specific rules found here: https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules
  "plugins": ["@typescript-eslint", "no-barrel-files"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint",
    "plugin:prettier/recommended"
  ],
  "globals": {
    "window": "readonly",
    "describe": "readonly",
    "test": "readonly",
    "expect": "readonly",
    "it": "readonly",
    "process": "readonly",
    "document": "readonly"
  },
  "settings": {},
  "rules": {
    "no-barrel-files/no-barrel-files": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "eqeqeq": ["error", "always", { "null": "ignore" }],
    "no-restricted-properties": [
      "error",
      {
        "property": "toString",
        "message": "e.toString() should be fastify.log.error(e, 'your string'). Other use-cases should avoid obj.toString() on principle. Craft the string you want instead."
      }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "import/extensions": "off",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "import/no-unresolved": "off",
    "prettier/prettier": [
      "error",
      {
        "arrowParens": "always",
        "singleQuote": true,
        "trailingComma": "all",
        "printWidth": 100
      }
    ]
  }
}
