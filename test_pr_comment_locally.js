#!/usr/bin/env node

/**
 * Local test script for PR comment functionality
 * This simulates the exact workflow_run scenario to test PR commenting
 */

const fs = require('fs');
const path = require('path');

// Simulate GitHub context
const mockContext = {
  repo: {
    owner: 'opendatahub-io',
    repo: 'odh-dashboard'
  }
};

// Simulate GitHub API client
const mockGitHub = {
  rest: {
    repos: {
      listPullRequestsAssociatedWithCommit: async ({ owner, repo, commit_sha }) => {
        console.log(`üìã Mock API: Getting PRs for commit ${commit_sha}`);
        // Simulate finding PR #4679
        return {
          data: [{ number: 4679 }]
        };
      }
    },
    issues: {
      listComments: async ({ owner, repo, issue_number }) => {
        console.log(`üìã Mock API: Getting comments for PR #${issue_number}`);
        // Simulate existing comments (none initially)
        return {
          data: []
        };
      },
      createComment: async ({ owner, repo, issue_number, body }) => {
        console.log(`‚úÖ Mock API: Creating comment on PR #${issue_number}`);
        console.log(`üìä Comment length: ${body.length} characters`);
        console.log(`üìÑ Comment preview (first 200 chars):`);
        console.log(body.substring(0, 200) + '...');
        return { data: { id: 123456 } };
      },
      updateComment: async ({ owner, repo, comment_id, body }) => {
        console.log(`‚úÖ Mock API: Updating comment ${comment_id}`);
        console.log(`üìä Comment length: ${body.length} characters`);
        return { data: { id: comment_id } };
      }
    }
  }
};

// Simulate core.setOutput
const mockCore = {
  setOutput: (key, value) => {
    console.log(`üì§ Setting output ${key} = ${value}`);
  }
};

// Test summary content generation
function generateTestSummary() {
  return `# üö¶ Modular Architecture Quality Gates Results

## üìä Assessment Summary for \`model-registry\`

### Gate 1: Code Quality ‚úÖ PASSED (5/5 - 100%)
| Check | Status | Details |
|-------|--------|---------|
| Package Structure | ‚úÖ PRESENT | package.json + extensions.ts found |
| TypeScript Config | ‚úÖ PRESENT | tsconfig.json configured |
| Shared Dependencies | ‚úÖ PRESENT | @odh-dashboard/internal found |
| PatternFly Usage | ‚úÖ PRESENT | @patternfly/react-core found |
| BFF Structure | ‚úÖ COMPLIANT | go.mod + cmd/ directory |

### Gate 2: Deployment Quality ‚úÖ PASSED (5/5 - 100%)
| Check | Status | Details |
|-------|--------|---------|
| Dockerfile | ‚úÖ PRESENT | Container ready |
| Module Federation | ‚úÖ CONFIGURED | Federation config found |
| ODH Extensions | ‚úÖ PRESENT | extensions.ts ready |
| Health Endpoints | ‚úÖ PRESENT | /health endpoints found |
| Security Config | ‚úÖ PRESENT | Non-root user, secure base |

### Gate 3: Application Quality ‚ö†Ô∏è NEEDS ATTENTION (4/7 - 57%)
| Test Category | Status | Location |
|---------------|--------|----------|
| Unit Tests | ‚úÖ PRESENT | \`frontend/packages/model-registry/upstream/frontend/src\` |
| E2E Tests | ‚úÖ PRESENT | \`frontend/src/__tests__/cypress/cypress/tests/e2e/modelRegistry\` |
| Mock Tests | ‚úÖ PRESENT | Global mocked tests |
| Integration Tests | ‚ùå MISSING | - |
| Pact Testing | ‚ùå MISSING | Consumer contract tests needed |
| API Performance | ‚ùå MISSING | Load testing framework needed |
| Bundle Size | ‚ùå MISSING | Size monitoring not configured |

## üéØ Overall Assessment

- **Deployment Ready**: ‚úÖ **YES** (Architecture compliant, containerized)
- **ODH Integration**: ‚úÖ **READY** (Extensions configured)  
- **RHOAI Integration**: ‚úÖ **READY** (Security compliant)

## üìã Next Steps

### High Priority
1. **Add Integration Tests** - Test module integration with ODH Dashboard
2. **Implement Pact Testing** - Consumer-driven contract tests for APIs

### Medium Priority  
3. **API Performance Testing** - Load testing with k6 or similar
4. **Bundle Size Monitoring** - Implement size-limit or bundlewatch

---
*Generated by Modular Architecture Quality Gates v1.0*`;
}

// Simulate the exact workflow logic
async function testWorkflowLogic() {
  console.log('üîç TESTING PR COMMENT WORKFLOW LOGIC');
  console.log('===================================');
  
  try {
    // Step 1: Get PR number from workflow run
    console.log('\nüìã Step 1: Getting PR number from commit SHA...');
    const commit_sha = 'f03711fb0c123456789abcdef'; // Mock commit SHA
    
    const pullRequests = await mockGitHub.rest.repos.listPullRequestsAssociatedWithCommit({
      owner: mockContext.repo.owner,
      repo: mockContext.repo.repo,
      commit_sha: commit_sha
    });
    
    if (pullRequests.data.length === 0) {
      console.log('‚ùå No PR found for this workflow run');
      return;
    }
    
    const prNumber = pullRequests.data[0].number;
    console.log(`üìã Found PR #${prNumber}`);
    mockCore.setOutput('pr-number', prNumber);
    
    // Step 2: Read quality gates summary
    console.log('\nüìÑ Step 2: Reading quality gates summary...');
    let summaryContent = '';
    
    // Simulate reading from artifact
    try {
      summaryContent = generateTestSummary();
      console.log('‚úÖ Successfully generated quality gates summary');
      console.log(`üìä Summary length: ${summaryContent.length} characters`);
    } catch (error) {
      console.log('‚ùå Failed to generate summary:', error.message);
      summaryContent = '## üö¶ Quality Gates Summary\\n\\n‚ùå Unable to load summary content. Please check the workflow logs.';
    }
    
    // Step 3: Post or update PR comment
    console.log('\nüí¨ Step 3: Posting comment to PR...');
    
    try {
      // Check for existing quality gates comments
      const comments = await mockGitHub.rest.issues.listComments({
        owner: mockContext.repo.owner,
        repo: mockContext.repo.repo,
        issue_number: prNumber
      });
      
      const botComment = comments.data.find(comment => 
        comment.user && comment.user.type === 'Bot' && 
        comment.body && comment.body.includes('üö¶ Modular Architecture Quality Gates Results')
      );
      
      if (botComment) {
        // Update existing comment
        await mockGitHub.rest.issues.updateComment({
          owner: mockContext.repo.owner,
          repo: mockContext.repo.repo,
          comment_id: botComment.id,
          body: summaryContent
        });
        console.log('‚úÖ Updated existing quality gates comment');
      } else {
        // Create new comment
        await mockGitHub.rest.issues.createComment({
          owner: mockContext.repo.owner,
          repo: mockContext.repo.repo,
          issue_number: prNumber,
          body: summaryContent
        });
        console.log('‚úÖ Created new quality gates comment');
      }
      
      console.log('\nüéâ PR COMMENT TEST COMPLETED SUCCESSFULLY!');
      console.log('The workflow logic appears to be working correctly.');
      
    } catch (error) {
      console.log('‚ùå Failed to post comment:', error.message);
      console.log('üìä Error details:', error);
      
      // Test fallback
      console.log('\nüîÑ Testing fallback comment...');
      try {
        await mockGitHub.rest.issues.createComment({
          owner: mockContext.repo.owner,
          repo: mockContext.repo.repo,
          issue_number: prNumber,
          body: '## üö¶ Quality Gates Summary\\n\\n‚ùå Failed to post detailed summary. Check workflow logs for details.'
        });
        console.log('‚úÖ Posted fallback comment');
      } catch (fallbackError) {
        console.log('‚ùå Fallback comment also failed:', fallbackError.message);
      }
    }
    
  } catch (error) {
    console.error('üí• CRITICAL ERROR in workflow logic:', error);
  }
}

// Test different scenarios
async function runAllTests() {
  console.log('üß™ COMPREHENSIVE PR COMMENT TESTING');
  console.log('===================================');
  
  console.log('\nüî¨ Test 1: Normal workflow scenario');
  await testWorkflowLogic();
  
  console.log('\nüî¨ Test 2: Artifact reading simulation');
  const testSummary = generateTestSummary();
  console.log('Generated summary preview:');
  console.log('---');
  console.log(testSummary.substring(0, 500) + '...');
  console.log('---');
  
  console.log('\n‚úÖ All tests completed!');
  console.log('\nüéØ RECOMMENDATIONS:');
  console.log('1. The workflow logic structure is correct');
  console.log('2. GitHub API calls are properly formatted'); 
  console.log('3. Error handling includes fallback mechanisms');
  console.log('4. Summary content generation works as expected');
  console.log('\n‚ö†Ô∏è  POTENTIAL ISSUES TO CHECK:');
  console.log('1. Verify GITHUB_TOKEN has pull-requests: write permission');
  console.log('2. Confirm workflow_run trigger is working correctly');  
  console.log('3. Check artifact upload/download is successful');
  console.log('4. Ensure PR number detection is accurate in CI environment');
}

// Run the tests
runAllTests().catch(console.error);
