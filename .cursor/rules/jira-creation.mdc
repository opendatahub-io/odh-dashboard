---
description: Creating Jira issues in RHOAIENG project with proper formatting and field configuration
globs: 
alwaysApply: false
---
# .cursorrules - Creating Jira Issues in RHOAIENG Project

## Trigger:
User requests Jira creation (e.g., "create jira", "make jira tickets", "log a bug", "create a story for X").

## General Information & Best Practices

* **Project Key**: `RHOAIENG` (This is the primary project for Dashboard-related issues).
* **Team Field**:
  * ID: `customfield_12313240`
  * Value: `'4158'` (This string value represents the "RHOAI Dashboard" team).
* **Component**: `'Dashboard'` (This string value should be used for the components field).
* **Epic Link Custom Field ID** (for Stories/Tasks under an Epic): `customfield_12311140`.
* **Verify Information**: Always confirm specific details like summaries, descriptions, parent epic keys, and any ambiguous fields with the user.
* **Team Value is a STRING**: The team field value (`'4158'`) must be passed as a string.
* **Component is a STRING argument**: The `components` parameter is a direct top-level argument in the tool call.
* **Iterative Creation**: If multiple issues are requested, create them one by one, confirming success or handling errors for each before proceeding.
* **Error Handling**: If a tool call fails, analyze the error message. It often provides clues about field formats or missing required fields.
* **Labels**: Use the `labels` parameter in `additional_fields` as a list of strings. E.g., `{"labels": ["needs-info", "enhancement"]}`.
* **Priority**: Set priority using `additional_fields`. E.g., `{"priority": {"name": "Major"}}`.
* **Markdown Formatting**: The mcp-atlassian server automatically converts markdown to Jira syntax. Use proper markdown formatting in descriptions.
* **Underlying Tool**: This rule uses the [mcp-atlassian server](mdc:https:/github.com/sooperset/mcp-atlassian) for Jira issue creation and management.
* **Label Usage**: Only use labels that are strictly defined in Appendix B unless the user specifically requests additional labels.

---

## Markdown Formatting Guidelines

The mcp-atlassian server automatically converts markdown to Jira syntax using the `markdown_to_jira` method. Use the following markdown formatting for optimal conversion:

### Headers
- Use `##` for section headers (converts to `h2.` in Jira)
- Use `###` for subsection headers (converts to `h3.` in Jira)
- Use `####` for sub-subsection headers (converts to `h4.` in Jira)

### Text Formatting
- **Bold**: Use `**text**` (converts to `*text*` in Jira)
- *Italic*: Use `*text*` (converts to `_text_` in Jira)
- ~~Strikethrough~~: Use `~~text~~` (converts to `-text-` in Jira)

### Lists
- **Bullet lists:**
  Use `- Item` for each item. Indent nested items with 2 spaces per level.
  ```markdown
  - Item 1
  - Item 2
    - Item 2a
    - Item 2b
  - Item 3
  ```
- **Numbered lists:**
  Use `1. Item` for all items (even for 2, 3, etc.). Indent nested items with 4 spaces per level.
  ```markdown
  1. Item 1
  1. Item 2
  1. Item 3
      1. Item 3a
      1. Item 3b
  ```
- **Note:**
  Do **not** use `*`, `#`, or other symbols for lists. Use only `-` for bullets and `1.` for numbers, with the correct indentation, for best results with the mcp-atlassian preprocessor.

### Code
- **Inline code**: Use `` `code` `` (converts to `{{code}}` in Jira)
- **Code blocks**: Use ```language\ncode\n``` (converts to `{code:language}...{code}` in Jira)

### Links
- Use `[link text](mdc:url)` (converts to `[link text|url]` in Jira)

### Images
- **Without alt text**: Use `![](url)` (converts to `!url!` in Jira)
- **With alt text**: Use `![alt text](mdc:url)` (converts to `!url|alt=alt text!` in Jira)

### Blockquotes
- **Recommended:** Use Jira markup directly:
  ```
  bq. This is a blockquote in Jira
  ```
- **Do NOT use:** `> text` (standard markdown blockquote), as it will not be converted.

### Tables
- Use standard markdown table format with `|` separators
- The preprocessor will automatically convert to Jira table format with `||` headers

### Special Characters
- **Superscript**: Use `<sup>text</sup>` (converts to `^text^` in Jira)
- **Subscript**: Use `<sub>text</sub>` (converts to `~text~` in Jira)
- **Inserted text**: Use `<ins>text</ins>` (converts to `+text+` in Jira)
- **Citation**: Use `<cite>text</cite>` (converts to `??text??` in Jira)

### Color Text
- Use `<span style="color:#color">text</span>` (converts to `{color:#color}text{color}` in Jira)

---

## I. Creating a Bug

### Definition:
A defect in the product — e.g., something should be working but it is not. This often time is against requirements, direct ask, or "common sense" breaks.
* **Bugs are NOT**:
  * New functionality that is unlike existing functionality.
  * A way to "improve" things outside of "expected functionality" - e.g., "A form should submit cleanly and report k8s errors on the form" (expected) vs "A form should scroll to where the error is in the form" (new functionality).
  * Tests that are broken (these should be Tasks).

### Information Gathering:
1. **Summary**: From user. Should be concise and clearly state the problem.
2. **Description**: From user. This should be a markdown string structured as follows:
   ```markdown
   ## Description of problem
   [User-provided short description of the problem]

   ## Steps to Reproduce
   1. [Step 1]
   2. [Step 2]
   ...

   ## Actual results
   [User-provided actual results]

   ## Expected results
   [User-provided expected results]

   ## Reproducibility
   [User-provided: Always / Intermittent / Only Once]

   ## Acceptance Criteria
   - Fix the bug as described.
   - Add/Update Cypress mocked tests.
   - Add/Update unit tests.
   ```
3. **Severity**: Determine based on guidelines in Appendix A. Communicate this in the description and use it to inform Priority.
4. **Priority**: Determine based on guidelines in Appendix A.
5. **Labels**: Consider `needs-info` (if unclear), `needs-ux` (if UI presentation is part of the bug), `needs-advisor` (if fix is complex).

### Tool call possible params
```python
project_key="RHOAIENG",
issue_type="Bug",
summary="BUG: [User-provided summary]",
description="[Formatted markdown string including Description, Steps, Actual, Expected, Reproducibility, and Acceptance Criteria]",
components="Dashboard",
additional_fields={
	"customfield_12313240": "4158",  # Team: RHOAI Dashboard
	"priority": {"name": "..."},     # e.g., "Critical", "Major", "Normal", "Minor" (See Appendix A)
	"labels": ["..."]                # e.g., ["needs-info"] (See Appendix B for other general labels)
}
```

---

## II. Creating a Story

### Definition:
A user-impact addition/change to the product — e.g., feature work to add partial or whole pages, or update existing items to include additional functionality.
* **Stories are NOT**:
  * Test additions (outside of expected tests accompanying new work - these are Tasks).
  * Fixes to defects in the product (these are Bugs).

### Information Gathering:
1. **Summary**: From user. Should clearly state the user value or feature.
2. **Description**: From user. This should be a markdown string structured as follows:
   ```markdown
   ## Description of the enhancement
   [User-provided short, non-wordy description of what is wanted and where. User may provide a Figma link for UI details.]

   ## Acceptance Criteria
   - [Bulleted list item 1 of what is wanted]
   - [Bulleted list item 2 of what is wanted]
   ...
   - Add/Update Cypress mocked tests.
   - Add/Update unit tests for hooks/functions.

   ## Additional info (Optional)
   - Relevant areas in the codebase: [User-provided, e.g., specific files/modules]
   - Figma Link: [User-provided, if applicable]
   ```
3. **Priority**: Determine based on guidelines in Appendix A.
4. **Labels**: Consider `enhancement`, `needs-info`, `needs-ux`, `needs-pm`, `needs-advisor`.

### Tool call possible params
```python
project_key="RHOAIENG",
issue_type="Story",
summary="STORY: [User-provided summary]",
description="[Formatted markdown string including Description of enhancement, Acceptance Criteria, and Additional info]",
components="Dashboard",
additional_fields={
	"customfield_12313240": "4158",  # Team: RHOAI Dashboard
	"priority": {"name": "..."},     # e.g., "Major", "Normal" (See Appendix A)
	"labels": ["enhancement", "..."] # e.g., ["enhancement", "needs-ux"] (See Appendix B for other general labels)
}
```

---

## III. Creating a Task

### Definition:
A non-user facing change to the product — e.g., add a test, fix a test, or a refactor of code that does not impact the user (code cleanness / DRY / etc).
* **Tasks are NOT**:
  * New product functionality visible to the user.

### Information Gathering:
1. **Summary**: From user. Should clearly state the technical work.
2. **Description**: From user. This should be a markdown string structured as follows:
   ```markdown
   ## Description of the task
   [User-provided short description of the non-user facing change, logic, or refactor.]

   ## Acceptance Criteria
   - [Bulleted list item 1 of what is wanted]
   - [Bulleted list item 2 of what is wanted]
   ...
   - Add/Update unit tests for logic/functions.
   - (If applicable) Add/Update integration tests.

   ## Additional info (Optional)
   - Relevant areas in the codebase: [User-provided, e.g., specific files/modules]
   ```
3. **Priority**: Determine based on guidelines in Appendix A.
4. **Labels**: Consider `tech-debt`, `advisor-tech-debt`.

### Tool call possible params
```python
project_key="RHOAIENG",
issue_type="Task",
summary="TASK: [User-provided summary]",
description="[Formatted markdown string including Description of task, Acceptance Criteria, and Additional info]",
components="Dashboard",
additional_fields={
	"customfield_12313240": "4158",  # Team: RHOAI Dashboard
	"priority": {"name": "..."},     # e.g., "Normal", "Minor" (See Appendix A)
	"labels": ["tech-debt", "..."]   # e.g., ["tech-debt", "needs-info"] (See Appendix B for other general labels)
}
```

---

## IV. Creating a Story under an Epic

### Definition:
A user-impact Story that is part of a larger Epic. Follows Story definition above.

### Information Gathering:
1. **Parent Epic Key**: (e.g., `RHOAIENG-123`). From user or context. **REQUIRED**.
2. **Summary**: From user.
3. **Description**: From user (as per updated Story guidelines, including formatted markdown for Description, AC, Additional Info).
4. **Priority**: Determine based on guidelines in Appendix A.
5. **Labels**: As per Story guidelines.

### Tool call possible params
```python
# Infer PROJECT_KEY from PARENT_EPIC_KEY (e.g., "RHOAIENG" from "RHOAIENG-123")
# PARENT_EPIC_KEY is the full key like "RHOAIENG-XXXX"
# EPIC_LINK_FIELD_ID is "customfield_12311140"

project_key="RHOAIENG",  # Can be inferred if PARENT_EPIC_KEY is for RHOAIENG
issue_type="Story",
summary="STORY: [User-provided summary]",
description="[Formatted markdown string for Story description, AC, and Additional Info]",
components="Dashboard",
additional_fields={
	"customfield_12311140": PARENT_EPIC_KEY,  # Epic Link field
	"customfield_12313240": "4158",           # Team: RHOAI Dashboard
	"priority": {"name": "..."},
	"labels": ["enhancement", "..."]
}
```
* **Epic Link**: Do **NOT** use the `parent` field in `additional_fields` for linking Stories to Epics. Use the Epic Link custom field (`customfield_12311140`).

---

## V. Creating a Task under an Epic

### Definition:
A non-user facing Task that is part of a larger Epic. Follows Task definition above.

### Information Gathering:
1. **Parent Epic Key**: (e.g., `RHOAIENG-123`). From user or context. **REQUIRED**.
2. **Summary**: From user.
3. **Description**: From user (as per updated Task guidelines, including formatted markdown for Description, AC, Additional Info).
4. **Priority**: Determine based on guidelines in Appendix A.
5. **Labels**: As per Task guidelines.

### Tool call possible params
```python
# Infer PROJECT_KEY from PARENT_EPIC_KEY
# PARENT_EPIC_KEY is the full key like "RHOAIENG-XXXX"
# EPIC_LINK_FIELD_ID is "customfield_12311140"

project_key="RHOAIENG",  # Can be inferred
issue_type="Task",
summary="TASK: [User-provided summary]",
description="[Formatted markdown string for Task description, AC, and Additional Info]",
components="Dashboard",
additional_fields={
	"customfield_12311140": PARENT_EPIC_KEY,  # Epic Link field
	"customfield_12313240": "4158",           # Team: RHOAI Dashboard
	"priority": {"name": "..."},
	"labels": ["tech-debt", "..."]
}

```
* **Epic Link**: Do **NOT** use the `parent` field in `additional_fields` for linking Tasks to Epics. Use the Epic Link custom field (`customfield_12311140`).

---

## VI. Creating an Epic

### Context:
* Epics in `RHOAIENG` are typically cloned from the template: [https://issues.redhat.com/browse/RHOAIENG-8770](mdc:https:/issues.redhat.com/browse/RHOAIENG-8770).
  * **Recommendation**: For creating new Epic shells, it's often safest to have the user clone the template manually in the Jira UI first. You can then assist with structuring and creating its child issues.
* The Epic itself should primarily define **what the Epic aims to accomplish** at a high level.

### AI's Role in Structuring an Epic's Child Issues:
* When a user requests an Epic and outlines its goals, or provides a detailed solution/task list for it, your primary role is to help **structure the *child issues* (Stories and/or Tasks) that will achieve the Epic's overall aim.**
* **Analyze User Input for Child Issue Decomposition**: Carefully review the user's description of the Epic's goals, proposed solutions, features, and tasks to identify potential child issues.
* **Propose Child Issue Structure**: Based on this analysis, suggest a logical structure of child Stories and Tasks.
  * **Guiding Principles for Decomposing Work into Child Issues**:
    * **Parallel Streams**: Identify components, features, or phases of the Epic's work that can be developed, tested, and potentially delivered independently or concurrently by different team members or sub-groups.
    * **Agile Sizing (Optimize for Flow for Child Issues)**:
      * Aim for child issues that can realistically be completed (designed, developed, tested) within a standard sprint iteration (e.g., 1-2 weeks) by a small number of team members.
      * **Avoid Overly Large Child Jiras**: These can become blockers, hide risks, and make progress difficult to track for the Epic.
      * **Avoid Overly Small Child Jiras (Churn)**: Do not break down tasks into trivial pieces that create excessive administrative overhead (e.g., a separate Jira for every minor code change if it's part of a slightly larger, cohesive piece of work).
      * Strive for a **reasonable balance** in child issue size to promote continuous flow and clear progress towards the Epic's goal.
    * **Value Delivery**: Each child Story should ideally represent a testable increment of user-facing value contributing to the Epic. Each child Task should represent a clear technical deliverable or prerequisite for the Epic.
    * **Dependencies**: Identify potential dependencies between the proposed child issues and discuss how they might be managed or sequenced to ensure smooth progress for the Epic.
* **Interaction & Refinement on Child Structure**: Present this proposed child issue decomposition to the user. Be prepared to discuss, refine, and adjust the breakdown based on their feedback and deeper domain knowledge.
* **Epic Shell Description**: The description for the parent Epic issue itself should remain a **concise, high-level statement of what the Epic aims to accomplish**. It might briefly mention the main work streams if helpful, but the detailed breakdown lives in its child issues.

### Information Gathering (for Epic Shell Creation - if using API or confirming details for a cloned Epic):
1. **Summary (Epic Name)**: From user.
2. **Description**: From user, a concise statement focusing on **what the Epic aims to accomplish**.
3. **Priority**: Determine based on guidelines in Appendix A.
4. **Labels**: Any standard labels for Epics.
5. **Other template-specific fields**: If creating via API (less common), review `RHOAIENG-8770` for other custom fields (e.g., Strategic Alignment, Goals) and their field IDs that might be necessary.

### Tool Call (Example for Epic Shell Creation - use with caution, prefer manual clone by user):
```python
project_key="RHOAIENG",
issue_type="Epic",
summary="EPIC: [User-provided Epic Name]",
description="[User-provided concise, high-level description of what the Epic aims to accomplish]",
components="Dashboard",  # Or other relevant components for the Epic
additional_fields={
	"customfield_12313240": "4158",  # Team: RHOAI Dashboard
	"priority": {"name": "..."},     # e.g., "Major", "Critical"
	"labels": ["..."]                # (See Appendix B for other general labels)
}

```

### Creating Child Issues for the Epic:
* Once the Epic exists (either cloned by user or created via API) and its key is known (e.g., `RHOAIENG-XXXX`):
* For each agreed-upon decomposed piece of work, create a child Story or Task using the guidelines in:
  * **Section IV: Creating a Story under an Epic**
  * **Section V: Creating a Task under an Epic**
* Ensure each child issue is linked to the parent Epic using the Epic Link custom field (`customfield_12311140: PARENT_EPIC_KEY`).

---

## Appendix A: Triaging, Severity, and Priority Guidelines

### Triaging a Ticket (General Steps if creating and immediately triaging)
These steps are typically for issues already created, but the principles guide field setting during creation.

1. **Clear & Understandable?**
   * If unclear ask/reproduction: Add label `needs-info` and prompt user for details.
   * If solution unclear for devs: Consider label `needs-advisor`.
   * If UX direction unclear: Consider label `needs-ux`.
   * New feature (not an addition, potentially different project): If the ask is a completely new feature outside current scope, it might belong to `RHOAIRFE`. This decision usually needs PM input. For AI-assisted creation, assume `RHOAIENG` unless specified.

2. **Severity (for Bugs)**
   * Determines urgency and impact. Guides Priority setting.
   * **Critical**: Broken functionality, crashes/error screens, data loss, no workaround or unreasonable workaround, unauthorized access to sensitive data.
   * **Important**: Non-critical security concerns, RBAC issues, performance related.
   * **Moderate**: Default if not in another bucket, validation issues.
   * **Low**: Cosmetic issues (alignment, layout, color), micro copy.
   * **Informational**: Console output issues, React warnings.
   * *Note*: Set via `additional_fields`: `{"priority": {"name": "Blocker"}}` (or other levels).

3. **Team**: Covered by `customfield_12313240: '4158'`.

4. **Post-Creation Status**: API-created issues might start in 'New' or 'Backlog' depending on project workflow. If triaging implies moving from 'New' to 'Backlog', this might require a subsequent `mcp_atlassian_jira_transition_issue` call.

---

## Appendix B: Common Labels

### General Purpose Labels:
* `needs-info`: More information required from reporter or other sources.
* `needs-ux`: Requires input or mocks from the UX team.
* `needs-pm`: Requires input or clarification from Product Management.
* `needs-advisor`: Solution is unclear; needs input from technical advisors/leads.
* `enhancement`: For Stories that are standalone new features or improvements.
* `tech-debt`: Ticket addresses technical debt.
* `advisor-tech-debt`: Tech debt item identified/scoped by the Advisor group. (Only for Stories, Epics, Tasks. Bugs are not tech debt).

*(Always ask the user for the most appropriate labels if unsure, drawing from this list or others they provide.)*
